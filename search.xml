<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开启或关闭Nvidia DLSS Indicator.</title>
      <link href="/2024/09/26/%E5%BC%80%E5%90%AF%E6%88%96%E5%85%B3%E9%97%ADNvidia%20DLSS%20indicator/"/>
      <url>/2024/09/26/%E5%BC%80%E5%90%AF%E6%88%96%E5%85%B3%E9%97%ADNvidia%20DLSS%20indicator/</url>
      
        <content type="html"><![CDATA[<h2 id="enable"><a href="#enable" class="headerlink" title="enable"></a>enable</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\NVIDIA Corporation\Global\NGXCore]</span><br><span class="line">&quot;ShowDlssIndicator&quot;=dword:00000001</span><br></pre></td></tr></table></figure><h2 id="disable"><a href="#disable" class="headerlink" title="disable"></a>disable</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\NVIDIA Corporation\Global\NGXCore]</span><br><span class="line">&quot;ShowDlssIndicator&quot;=dword:00000000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows编译OpenJDK踩坑(持续更新).</title>
      <link href="/2024/07/12/Windows%E7%BC%96%E8%AF%91OpendJDK%E8%B8%A9%E5%9D%91/"/>
      <url>/2024/07/12/Windows%E7%BC%96%E8%AF%91OpendJDK%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p><a href="https://github.com/AdoptOpenJDK/openjdk-jdk11u">AdoptOpenJDK&#x2F;openjdk-jdk11u</a></p><p><a href="https://hg.openjdk.org/jdk-updates/jdk11u/tags">jdk-updates</a></p><h2 id="准备boot-JDK"><a href="#准备boot-JDK" class="headerlink" title="准备boot JDK"></a>准备boot JDK</h2><p><a href="https://jdk.java.net/">JDK release</a></p><p><code>C:\Program Files (x86)\Tencent\微信web开发者工具\dll</code></p><h2 id="安装vs2017"><a href="#安装vs2017" class="headerlink" title="安装vs2017"></a>安装vs2017</h2><ul><li><p>使用C++的桌面开发</p></li><li><p>通用Windows平台开发</p></li><li><p>语言包选择English</p></li></ul><h2 id="cygwin"><a href="#cygwin" class="headerlink" title="cygwin"></a>cygwin</h2><h3 id="安装必要软件包"><a href="#安装必要软件包" class="headerlink" title="安装必要软件包"></a>安装必要软件包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;path to Cygwin setup&gt;/setup-x86_64 -q -P autoconf -P make -P unzip -P zip</span><br></pre></td></tr></table></figure><h3 id="configu-amp-compile"><a href="#configu-amp-compile" class="headerlink" title="configu &amp; compile"></a>configu &amp; compile</h3><p>配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd path/openjdk17</span><br><span class="line"></span><br><span class="line">bash configure --with-debug-level=slowdebug --with-jvm-variants=server --disable-zip-debug-info --disable-warnings-as-errors --with-boot-jdk=/mnt/d/Aproject/openjdk/</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make LOG=info</span><br></pre></td></tr></table></figure><p>生成compile-database</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make compile-commands</span><br></pre></td></tr></table></figure><h1 id="使用wsl编译"><a href="#使用wsl编译" class="headerlink" title="使用wsl编译"></a>使用wsl编译</h1><h2 id="安装必要软件包-1"><a href="#安装必要软件包-1" class="headerlink" title="安装必要软件包"></a>安装必要软件包</h2><p>下载好jdk源码后，解压到<code>d:\openjdk\jdk11u</code></p><p>打开wsl shell，进入jdk源码目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /mnt/d/openjdk/jdk11u</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash configure --with-debug-level=slowdebug --with-jvm-variants=server --disable-zip-debug-info --disable-warnings-as-errors --with-boot-jdk=/mnt/d/Aproject/openjdk/</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>生成 compile database</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make compile-commands</span><br></pre></td></tr></table></figure><p>编译特定的模块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make CONF=config java.base-lib</span><br></pre></td></tr></table></figure><h1 id="Clion-Debug"><a href="#Clion-Debug" class="headerlink" title="Clion Debug"></a>Clion Debug</h1><p><code>Run/Debug Configurations &gt; new Custom Build Application</code></p><p><code>name: jdk11-spring-boot-debug</code></p><p><code>Executeble:build\jdk\bin\java.exe</code></p><p><code>Program arguments:</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xdebug -XX:+UseSerialGC -Xrunjdwp:server=y,transport=dt_socket,address=8099,suspend=n -Xlog:gc -Xms1000M -Xmn1000M -XX:-DoEscapeAnalysis -XX:+UseTLAB -XX:-ResizeTLAB -jar &quot;D:\AProject\edian\backend\etc\api\certification-service\target\cs1.jar&quot; -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintCompilation -XX:+PrintInlining -XX:CompileCommand=quiet</span><br></pre></td></tr></table></figure><p><code>Environment variables:</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_JAVA_LAUNCHER_DEBUG =1 </span><br></pre></td></tr></table></figure><blockquote><p>ref code: <code>src/java.base/share/native/launcher/main.c:146</code><br> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getenv</span>(JLDEBUG_ENV_ENTRY) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Windows original main args:\n&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; __argc ; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;wwwd_args[%d] = %s\n&quot;</span>, i, __argv[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="assert-strcmp-value-system-value-x3D-x3D-0-failed-property-value-mustn’t-differ-from-System-getProperty"><a href="#assert-strcmp-value-system-value-x3D-x3D-0-failed-property-value-mustn’t-differ-from-System-getProperty" class="headerlink" title="assert(strcmp(value, system_value) &#x3D;&#x3D; 0) failed: property value mustn’t differ from System.getProperty"></a>assert(strcmp(value, system_value) &#x3D;&#x3D; 0) failed: property value mustn’t differ from System.getProperty</h2><p>出现这个问题，通常日志如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># To suppress the following error report, specify this argument</span><br><span class="line"># after -XX: or in .hotspotrc:  SuppressErrorAt=\statSampler.cpp:204</span><br><span class="line">#</span><br><span class="line"># A fatal error has been detected by the Java Runtime Environment:</span><br><span class="line">#</span><br><span class="line">#  Internal Error (d:\aproject\openjdk\jdk17\src\hotspot\share\runtime\statSampler.cpp:204), pid=4488, tid=21828</span><br><span class="line">#  assert(strcmp(value, system_value) == 0) failed: property value mustn&#x27;t differ from System.getProperty</span><br><span class="line">#</span><br><span class="line"># JRE version: OpenJDK Runtime Environment (17.0) (slowdebug build 17-internal+0-adhoc.edian.jdk17)</span><br><span class="line"># Java VM: OpenJDK 64-Bit Server VM (slowdebug 17-internal+0-adhoc.edian.jdk17, mixed mode, tiered, compressed oops, com</span><br><span class="line">pressed class ptrs, g1 gc, windows-amd64)</span><br><span class="line"># Core dump will be written. Default location: D:\AProject\openjdk\jdk17\build\windows-x86_64-server-slowdebug\jdk\bin\h</span><br><span class="line">s_err_pid4488.mdmp</span><br></pre></td></tr></table></figure><p>该问题是由于在<code>bash configure</code>阶段，启用了调试，如<code>--with-debug-level=*debug</code> (*指的是 <code>slow</code>,<code>fast</code>)<br>相关定义可在如下文件找到</p><p><code>make/hotspot/lib/JvmFlags.gmk:81</code></p><figure class="highlight make"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(DEBUG_LEVEL)</span>, release)</span><br><span class="line">  <span class="comment"># For hotspot, release builds differ internally between &quot;optimized&quot; and &quot;product&quot;</span></span><br><span class="line">  <span class="comment"># in that &quot;optimize&quot; does not define PRODUCT.</span></span><br><span class="line">  <span class="keyword">ifneq</span> (<span class="variable">$(HOTSPOT_DEBUG_LEVEL)</span>, optimized)</span><br><span class="line">    JVM_CFLAGS_DEBUGLEVEL := -DPRODUCT</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> (<span class="variable">$(DEBUG_LEVEL)</span>, fastdebug)</span><br><span class="line">  JVM_CFLAGS_DEBUGLEVEL := -DASSERT</span><br><span class="line">  <span class="keyword">ifeq</span> (<span class="variable">$(<span class="built_in">call</span> isTargetOs, windows aix)</span>, false)</span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span> Old build did not define CHECK_UNHANDLED_OOPS on Windows and AIX.</span></span><br><span class="line">    JVM_CFLAGS_DEBUGLEVEL += -DCHECK_UNHANDLED_OOPS</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> (<span class="variable">$(DEBUG_LEVEL)</span>, slowdebug)</span><br><span class="line">  <span class="comment"># _NMT_NOINLINE_ informs NMT that no inlining is done by the compiler</span></span><br><span class="line">  JVM_CFLAGS_DEBUGLEVEL := -DASSERT -D_NMT_NOINLINE_</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>定位到相关源码则是</p><p><code>statSampler.cpp:180</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">StatSampler::assert_system_property</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">const</span> <span class="type">char</span>* value, TRAPS)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ASSERT</span></span><br><span class="line">  <span class="function">ResourceMark <span class="title">rm</span><span class="params">(THREAD)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setup the arguments to getProperty</span></span><br><span class="line">  Handle key_str   = java_lang_String::<span class="built_in">create_from_str</span>(name, CHECK);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return value</span></span><br><span class="line">  <span class="function">JavaValue <span class="title">result</span><span class="params">(T_OBJECT)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public static String getProperty(String key, String def);</span></span><br><span class="line">  JavaCalls::<span class="built_in">call_static</span>(&amp;result,</span><br><span class="line">                         vmClasses::<span class="built_in">System_klass</span>(),</span><br><span class="line">                         vmSymbols::<span class="built_in">getProperty_name</span>(),</span><br><span class="line">                         vmSymbols::<span class="built_in">string_string_signature</span>(),</span><br><span class="line">                         key_str, </span><br><span class="line">                         CHECK);</span><br><span class="line"></span><br><span class="line">  oop value_oop = result.<span class="built_in">get_oop</span>();</span><br><span class="line">  <span class="built_in">assert</span>(value_oop != <span class="literal">NULL</span>, <span class="string">&quot;property must have a value&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// convert Java String to utf8 string</span></span><br><span class="line">  <span class="type">char</span>* system_value = java_lang_String::<span class="built_in">as_utf8_string</span>(value_oop);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\tA system value: %s -&gt; \n%s\n\n&quot;</span>,name,system_value);</span><br><span class="line">  <span class="built_in">assert</span>(<span class="built_in">strcmp</span>(value, system_value) == <span class="number">0</span>, <span class="string">&quot;property value mustn&#x27;t differ from System.getProperty&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// ASSERT</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当比较到<code>value</code>和<code>system_value</code>不相等时，会抛出异常，</p><p>通过断点调试</p><p>此时的<code>char* name</code>值为<code>java.library.path</code></p><p><del>是由于环境变量<code>PATH</code>中包含了带有中文的路径，导致<code>system_value</code>转换为utf8时，中文字符转换为乱码，导致<code>strcmp</code>不相等，从而抛出异常。</del></p><p>解决办法：把<code>PATH</code>中的中文路径去掉，或者<code>bash configure</code>阶段不要启用调试</p><h3 id="补充1"><a href="#补充1" class="headerlink" title="补充1"></a>补充1</h3><p>如果是Windows平台 此时<code>value</code>中存储的是<code>GBK</code>编码后的<code>path</code>值，value_oop存储的是<code>UTF-16(LE)</code>编码后的<code>path</code>值，经过</p><p><code>char* system_value = java_lang_String::as_utf8_string(value_oop);</code> 后，<code>system_value</code>存储的是<code>utf8编码后的path</code>值，这个时候<code>strcmp</code>比较字符串的结果是不相等的（因为有中文）</p><h3 id="补充2"><a href="#补充2" class="headerlink" title="补充2"></a>补充2</h3><p>假如<code>path</code>含有<code>中文</code>字符  eg：<code>c:\Hello\Abc-ZH-中文-Abc;</code></p><p>则有如下</p><table><thead><tr><th>字符</th><th>GBK</th><th>UTF16</th><th>UTF8</th></tr></thead><tbody><tr><td>中</td><td>D6D0</td><td>4E2D</td><td>E4B8AD</td></tr><tr><td>文</td><td>CEC4</td><td>6587</td><td>E69687</td></tr></tbody></table><p><code>value</code>内存中的值（GBK编码）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6d 33 32 3b   43 3a 5c 57   49 4e 44 4f   57 53 3b 63   │ m32;C:\WINDOWS;c │</span><br><span class="line">3a 5c 48 65   6c 6c 6f 5c   41 62 63 2d   5a 48 2d d6   │ :\Hello\Abc-ZH-· │</span><br><span class="line">d0 ce c4 2d   41 62 63 3b   43 3a 5c 47   6e 75 57 69   │ ···-Abc;C:\GnuWi │</span><br></pre></td></tr></table></figure><p><code>value_oop</code> 在内存中的值(因为使用UTF16LE编码，所以字节序和大端模式相反)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">57 00 53 00   3b 00 63 00   3a 00 5c 00   48 00 65 00   │ W·S·;·c·:·\·H·e· │</span><br><span class="line">6c 00 6c 00   6f 00 5c 00   41 00 62 00   63 00 2d 00   │ l·l·o·\·A·b·c·-· │</span><br><span class="line">5a 00 48 00   2d 00 2d 4e   87 65 2d 00   41 00 62 00   │ Z·H·-·-N·e-·A·b· │</span><br><span class="line">63 00 3b 00   43 00 3a 00   5c 00 47 00   6e 00 75 00   │ c·;·C·:·\·G·n·u· │</span><br><span class="line">57 00 69 00   6e 00 33 00   32 00 5c 00   62 00 69 00   │ W·i·n·3·2·\·b·i· │</span><br></pre></td></tr></table></figure><p><code>system_value</code>在内存中的值（UTF8编码）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6d 33 32 3b   43 3a 5c 57   49 4e 44 4f   57 53 3b 63   │ m32;C:\WINDOWS;c │</span><br><span class="line">3a 5c 48 65   6c 6c 6f 5c   41 62 63 2d   5a 48 2d e4   │ :\Hello\Abc-ZH-· │</span><br><span class="line">b8 ad e6 96   87 2d 41 62   63 3b 43 3a   5c 47 6e 75   │ ·····-Abc;C:\Gnu │</span><br></pre></td></tr></table></figure><h3 id="补充3"><a href="#补充3" class="headerlink" title="补充3"></a>补充3</h3><p><code>utf8</code> 最小代码单元是一个字节</p><p><code>utf16</code> 的最小代码单元是2个字节</p><h2 id="complication-database-json-导入clion无法正确编译"><a href="#complication-database-json-导入clion无法正确编译" class="headerlink" title="complication-database.json 导入clion无法正确编译"></a>complication-database.json 导入clion无法正确编译</h2><p>使用<code>make compile-commands</code> 生成 <code>compilation-database.json</code></p><p>将其导入到clion中，出现编译错误，原因是因为json中的编译命令路径问题，需要把<br><code>\\\\</code> 和 <code>\\</code> 替换为<code>/</code>,然后重新导入即可。</p><p>arguments.cpp 969 解析+-参数选项<br>1162 解析JVM -XX参数</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ol><li><p>jvm char*在内存中的存储方式为小端模式</p></li><li><p><a href="http://www.mytju.com/classcode/tools/encode_gb2312.asp">查看字符编码</a></p></li></ol><p><a href="https://www.qqxiuzi.cn/bianma/Unicode-UTF.php">Unicode和UTF编码转换</a></p><p><a href="https://www.cnblogs.com/throwable/p/9188439.html"></a></p><ol start="3"><li>jstring 转char*<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">jstring value_oop;</span><br><span class="line">java_lang_String::<span class="built_in">as_utf8_string</span>(value_oop)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Can-not-determine-compiler"><a href="#Can-not-determine-compiler" class="headerlink" title="Can not determine compiler"></a>Can not determine compiler</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot determine compiler type by executable file: &#x27;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\bin\Hostx86\x64\ml64.exe&#x27;</span><br></pre></td></tr></table></figure><h3 id="Clion-plugins"><a href="#Clion-plugins" class="headerlink" title="Clion plugins"></a>Clion plugins</h3><h3 id="cidr-base-plugin-jar"><a href="#cidr-base-plugin-jar" class="headerlink" title="cidr-base-plugin.jar"></a>cidr-base-plugin.jar</h3><p>定义了各种编译器匹配实现，以及编译器调用逻辑</p><p><code>OCCompilerResolver</code> 编译器解析工具</p><p><code>OCBuiltInCompilerResolver</code> 默认实现类</p><p>主要匹配以下编译器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, OCCompilerKind&gt; compilerCache = MapsKt.mapOf(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Pair</span>[]&#123;</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;cl&quot;</span>, MSVCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;gcc&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;g++&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;xgcc&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;xg++&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;colorgcc&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;cc&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;c++&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;cpp&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;clang&quot;</span>, ClangCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;clang++&quot;</span>, ClangCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;emcc&quot;</span>, ClangCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;em++&quot;</span>, ClangCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;tiarmclang&quot;</span>, ClangCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;nvcc&quot;</span>, NVCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(OCBuiltInCompilerKindProvider.CLANG_CL_ID, ClangClCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;icl&quot;</span>, MSVCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;icc&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;icpc&quot;</span>, GCCCompilerKind.INSTANCE),</span><br><span class="line">                TuplesKt.to(<span class="string">&quot;dpcpp-cl&quot;</span>, ClangClCompilerKind.INSTANCE)</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="clion-compdb-jar"><a href="#clion-compdb-jar" class="headerlink" title="clion-compdb.jar"></a>clion-compdb.jar</h3><p>主要用于解析<a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html">compile-commands.json</a></p><p>结构如下</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;directory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/user/llvm/build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/usr/bin/clang++&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-Irelative&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-DSOMEDEF=With spaces, quotes and \\-es.&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-c&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span> <span class="string">&quot;file.o&quot;</span><span class="punctuation">,</span> <span class="string">&quot;file.cc&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file.cc&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;directory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/user/llvm/build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang++ -Irelative -DSOMEDEF=\&quot;With spaces, quotes and \\-es.\&quot; -c -o file.o file.cc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file2.cc&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>当通过<code>Clion</code>打开<code>compile-commands.json</code>后，会进行<code>Sync</code>操作，触发<code>CompDBProjectResolver#resolveProjectInfo</code></p><p>通过遍历<code>compile-commands.json</code>中的<code>command</code>值，校验<code>command</code>是否符合 <code>cidr-base-plugin.jar</code>中定义的编译器。</p><p>如果<code>command</code>中的命令不符合上述的编译器，那么会出现<code> Cannot determine compiler type by executable file: &#39;/path/xxx&#39;</code> 这个错误，导致导入失败</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">reportUnresolvedCompilers</span><span class="params">(ExternalSystemTaskId resolveTaskId, Set&lt;? extends File&gt; set, ExternalSystemTaskNotificationListener listener, String parentEventId)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (set.isEmpty()) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span> (File compiler : set) &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> CompDBBundle.message(<span class="string">&quot;project.resolver.cannot.resolve.compiler.error&quot;</span>, compiler);</span><br><span class="line">         Intrinsics.checkNotNullExpressionValue(message, <span class="string">&quot;CompDBBundle.message(\&quot;pr…ompiler.error\&quot;, compiler)&quot;</span>);</span><br><span class="line">         listener.onTaskOutput(resolveTaskId, message + <span class="string">&quot;\n&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">         CompDBLog.INSTANCE.getLOG().debug(message);</span><br><span class="line">         <span class="type">String</span> <span class="variable">compilerEventId</span> <span class="operator">=</span> <span class="string">&quot;unresolved-compiler:&quot;</span> + UUID.randomUUID();</span><br><span class="line">         <span class="type">OperationDescriptor</span> <span class="variable">taskOperationDescriptorImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskOperationDescriptorImpl</span>(message, System.currentTimeMillis(), <span class="string">&quot;unresolved-compiler&quot;</span>);</span><br><span class="line">         <span class="type">ExternalSystemProgressEvent</span> <span class="variable">externalSystemStartEventImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExternalSystemStartEventImpl</span>(compilerEventId, parentEventId, taskOperationDescriptorImpl);</span><br><span class="line">         <span class="type">ExternalSystemProgressEvent</span> <span class="variable">externalSystemFinishEventImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExternalSystemFinishEventImpl</span>(compilerEventId, parentEventId, taskOperationDescriptorImpl, <span class="keyword">new</span> <span class="title class_">FailureResultImpl</span>(externalSystemStartEventImpl.getEventTime(), externalSystemStartEventImpl.getEventTime(), CollectionsKt.listOf(<span class="keyword">new</span> <span class="title class_">FailureImpl</span>(message, message, CollectionsKt.emptyList()))));</span><br><span class="line">         listener.onStatusChange(<span class="keyword">new</span> <span class="title class_">ExternalSystemTaskExecutionEvent</span>(resolveTaskId, externalSystemStartEventImpl));</span><br><span class="line">         listener.onStatusChange(<span class="keyword">new</span> <span class="title class_">ExternalSystemTaskExecutionEvent</span>(resolveTaskId, externalSystemFinishEventImpl));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>找到<code>compile_commands.json</code> 把所有含<code>ml64.exe</code> 相关的<code>commands</code>删掉(注意删掉的是一个整体)</p><p>样例</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;directory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d:/aproject/openjdk/jdk17/make&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d:/aproject/openjdk/jdk17/src/jdk.incubator.vector/windows/native/libsvml/svml_d_acos_windows_x86.S&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c:/progra~2/micros~2/2017/commun~1/vc/tools/msvc/1416~1.270/bin/hostx86/x64/ml64.exe -nologo -c -Fod:/aproject/openjdk/jdk17/build/windows-x86_64-server-slowdebug/support/native/jdk.incubator.vector/libsvml/svml_d_acos_windows_x86.obj d:/aproject/openjdk/jdk17/src/jdk.incubator.vector/windows/native/libsvml/svml_d_acos_windows_x86.S&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>再重新导入一下即可</p><p><code>Menu &gt; Tools &gt; Compilation Database &gt; Reload Compilation Database Project</code></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://blog.jetbrains.com/clion/2020/03/openjdk-with-clion/">Tips &amp; Tricks: Develop OpenJDK in CLion with Pleasure</a></p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/">GC垃圾回收器 调整参数</a></p><p><a href="https://xie.infoq.cn/article/62e1635e0e9db1d091ec0ab16">不同版本 OpenJDK 源码调试方案</a></p><p><a href="https://oi-wiki.org/tools/wsl/">WSL</a></p><p><a href="https://lin1997.github.io/2020/07/19/debug-openjdk-on-ubuntu.html#%E7%94%9F%E6%88%90compilation-database">在Ubuntu中编译和调试OpenJDK </a></p><p><a href="http://www.huicentury.tech/post/2021-10-12-1%E3%80%90JVM%E3%80%91Build%20OpenJDK%2012">编译 openJDK</a></p><p><a href="https://linux.xiaosiseo.com/post/6776.html">Ubuntu下使用rpm</a></p><p><a href="https://www.cnblogs.com/ykpkris/p/15058656.html">windows 平台编译openjdk12</a></p><p><a href="https://www.python100.com/html/0J1T425OO6LT.html">tar教程</a></p><p><a href="https://jiawanggjia.github.io/post/openjdk-bian-yi-zhi-nan/">OpenJDK 编译指南(Ubuntu 16.04 + MacOS 10.15)</a></p><p><a href="https://blog.csdn.net/qq_35136937/article/details/110531971">Cygwin</a></p><p><a href="https://jiawanggjia.github.io/post/openjdk-bian-yi-zhi-nan/">OpenJDK 编译指南(Ubuntu 16.04 + MacOS 10.15)</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> openjdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JBPM 异常分析.</title>
      <link href="/2023/09/08/jbpm%20%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90/"/>
      <url>/2023/09/08/jbpm%20%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><code>JBPM 4.0</code>使用<code>hibernate 3.6.0</code>作为数据持久框架,该版本依赖的javassist版本为<code>3.12.0.GA</code></p><p>Hibernate中的每个<code>Entity</code>其实都是代理过的类，由<code>javassit</code>生成一个<code>代理类</code>去继承<code>Entity</code>类。</p><p>举个例子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneImpl</span> <span class="keyword">extends</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="keyword">private</span> Phone phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="keyword">private</span> PhoneImpl phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PhoneImpl <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//javassit生成的代理类如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImplProxy</span> <span class="keyword">extends</span> <span class="title class_">UserImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PhoneImpl phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">fetchDataFromDB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PhoneImpl <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//hibernate 代理 查询数据库</span></span><br><span class="line">        phone = fetchDataFromDB();</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Method[] declaredMethods = UserImplProxy.class.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         *  /**</span></span><br><span class="line"><span class="comment">         * &lt;init&gt;()V                                    0x0001 [public]</span></span><br><span class="line"><span class="comment">         * fetchDataFromDB()Ljava/lang/Object;          0x0002 [private] </span></span><br><span class="line"><span class="comment">         * getPhone()Lcom/project/pangu/cache/PhoneImpl;0x0001 [public]</span></span><br><span class="line"><span class="comment">         * getPhone()Lcom/project/pangu/cache/Phone;    0x1041 [public synthetic bridge]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//此处模拟jbpm的调用</span></span><br><span class="line">        <span class="type">UserImplProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserImplProxy</span>();</span><br><span class="line">        <span class="type">PhoneImpl</span> <span class="variable">phoneImpl</span> <span class="operator">=</span> proxy.getPhone();</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现</p><p>执行<code>UserImplProxy.class.getDeclaredMethods()</code>后</p><p>你会发现返回结果“多出”一个<code>synthetic bridge</code>方法<br><code>getPhone()Lcom/project/pangu/cache/Phone;    0x1041 [public synthetic bridge]</code> （<a href="https://blog.csdn.net/qq_32868023/article/details/123980578">Java几种生成synthetic方法的情况</a>，）</p><p><code>javassit</code>在代理目标类时，会把目标类中定义的所有方法都查询出来，形成<code>Map&lt;String,Method&gt;</code></p><h3 id="javassist-3-12-0-GA"><a href="#javassist-3-12-0-GA" class="headerlink" title="javassist 3.12.0.GA"></a>javassist 3.12.0.GA</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getMethods</span><span class="params">(HashMap hash, Class clazz)</span> &#123;</span><br><span class="line">    Class[] ifs = clazz.getInterfaces();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ifs.length; i++)</span><br><span class="line">        getMethods(hash, ifs[i]);</span><br><span class="line"></span><br><span class="line">    <span class="type">Class</span> <span class="variable">parent</span> <span class="operator">=</span> clazz.getSuperclass();</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="literal">null</span>)</span><br><span class="line">        getMethods(hash, parent);</span><br><span class="line"></span><br><span class="line">    Method[] methods = SecurityActions.getDeclaredMethods(clazz);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methods.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPrivate(methods[i].getModifiers())) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> methods[i];</span><br><span class="line">            <span class="comment">//重点，RuntimeSupport.makeDescriptor(m)，这里返回格式为：方法参数表+方法返回类型;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> m.getName() + <span class="string">&#x27;:&#x27;</span> + RuntimeSupport.makeDescriptor(m);</span><br><span class="line">            <span class="comment">// JIRA JASSIST-85</span></span><br><span class="line">            <span class="comment">// put the method to the cache, retrieve previous definition (if any) </span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">oldMethod</span> <span class="operator">=</span> (Method)hash.put(key, methods[i]); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// check if visibility has been reduced </span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != oldMethod &amp;&amp; Modifier.isPublic(oldMethod.getModifiers())</span><br><span class="line">                                  &amp;&amp; !Modifier.isPublic(methods[i].getModifiers()) ) &#123; </span><br><span class="line">                <span class="comment">// we tried to overwrite a public definition with a non-public definition,</span></span><br><span class="line">                <span class="comment">// use the old definition instead. </span></span><br><span class="line">                hash.put(key, oldMethod); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map的<code>key</code>最终格式为:<code>methodName:paramsTypes+returnType</code></p><h3 id="javassit-3-16-0-GA"><a href="#javassit-3-16-0-GA" class="headerlink" title="javassit 3.16.0.GA"></a>javassit 3.16.0.GA</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getMethods</span><span class="params">(HashMap hash, Class clazz, Set visitedClasses)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (visitedClasses.add(clazz)) &#123;</span><br><span class="line">           Class[] ifs = clazz.getInterfaces();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ifs.length; ++i) &#123;</span><br><span class="line">               getMethods(hash, ifs[i], visitedClasses);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="type">Class</span> <span class="variable">parent</span> <span class="operator">=</span> clazz.getSuperclass();</span><br><span class="line">           <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">               getMethods(hash, parent, visitedClasses);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           Method[] methods = SecurityActions.getDeclaredMethods(clazz);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!Modifier.isPrivate(methods[i].getModifiers())) &#123;</span><br><span class="line">                   <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> methods[i];</span><br><span class="line">                   <span class="comment">// //重点，RuntimeSupport.makeDescriptor(m)，这里返回格式为：方法参数表;</span></span><br><span class="line">                   <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> m.getName() + <span class="string">&#x27;:&#x27;</span> + RuntimeSupport.makeDescriptor(m.getParameterTypes(), (Class)<span class="literal">null</span>);</span><br><span class="line">                   <span class="type">Method</span> <span class="variable">oldMethod</span> <span class="operator">=</span> (Method)hash.put(key, methods[i]);</span><br><span class="line">                   <span class="keyword">if</span> (<span class="literal">null</span> != oldMethod &amp;&amp; Modifier.isPublic(oldMethod.getModifiers()) &amp;&amp; !Modifier.isPublic(methods[i].getModifiers())) &#123;</span><br><span class="line">                       hash.put(key, oldMethod);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Map的<code>key</code>最终格式为:<code>methodName:paramsTypes</code></p><p>当使用<code>javaassist 3.12.0.GA</code>时，由于遍历目标类的方法时，Map使用的key为<code>methodName:paramsTypes+returnType</code>,可以保证每个方法都能被代理到</p><p>由于项目中实际运行时使用的<code>javassist</code>版本是<code>3.16.0.GA</code>，(某个小伙伴引入的第三方库中使用<code>javassist-3.16.0.GA</code>,覆盖了jbpm所依赖的<code>javassist-3.12.0.GA</code>)</p><p>当遍历目标类的方法时，Map使用的key为<code>methodName:paramsTypes</code>，当出现<code>同名</code>，<code>同形参</code>的方法时，这个时候能被代理到的方法和<code>Class#getDeclaredMethods()</code> 返回的顺序有关，该方法注释如下</p><blockquote><p>Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods.<br>If this Class object represents a type that has multiple declared methods with the same name and parameter types, but different return types, then the returned array has a Method object for each such method.<br>If this Class object represents a type that has a class initialization method <clinit>, then the returned array does not have a corresponding Method object.<br>If this Class object represents a class or interface with no declared methods, then the returned array has length 0.<br>If this Class object represents an array type, a primitive type, or void, then the returned array has length 0.<br>The elements in the returned array are not sorted and are not in any particular order （重点，返回数组中的元素没有排序，也没有特定顺序）</p></blockquote><p>所以当执行下面代码时，有一定几率执行的方法不是代理过方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserImplProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> JavassistProxy(<span class="keyword">new</span> <span class="title class_">UserImplProxy</span>());</span><br><span class="line"><span class="type">PhoneImpl</span> <span class="variable">phoneImpl</span> <span class="operator">=</span> proxy.getPhone();</span><br></pre></td></tr></table></figure><p>所以导致jbmp执行相关操作时，查询对象实体时，有一定几率导致返回为空(没有被代理，那么就不会触发查询)</p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lol-lcu-api</title>
      <link href="/2023/04/23/lol-lcu-api/"/>
      <url>/2023/04/23/lol-lcu-api/</url>
      
        <content type="html"><![CDATA[<h1 id="LCU-API"><a href="#LCU-API" class="headerlink" title="LCU-API"></a>LCU-API</h1><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><p>CMD以管理员权限运行，输入如下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wmic process where caption=&#x27;LeagueClientUx.exe&#x27; get commandline</span><br></pre></td></tr></table></figure><p>得到如下结果</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g:/英雄联盟/LeagueClient/LeagueClientUx.exe &quot;--riotclient-auth-token=63-Wr1ACdIS6EfVkuy9gig&quot; &quot;--riotclient-app-port=58789&quot; &quot;--riotclient-tencent&quot; &quot;--no-rads&quot; &quot;--disable-self-update&quot; &quot;--region=TENCENT&quot; &quot;--locale=zh_CN&quot; &quot;--t.lcdshost=hn1-cloud-feapp.lol.qq.com&quot; &quot;--t.chathost=hn1-cloud-ejabberd.lol.qq.com&quot; &quot;--t.lq=https://hn1-cloud-login.lol.qq.com:8443&quot; &quot;--t.storeurl=https://hn1-cloud-sr.lol.qq.com:8443&quot; &quot;--t.rmsurl=wss://hn1-cloud-rms.lol.qq.com&quot; &quot;--rso-auth.url=https://prod-rso.lol.qq.com:3000&quot; &quot;--rso_platform_id=HN1&quot; &quot;--rso-auth.client=lol&quot; &quot;--t.location=loltencent.gz1.HN1&quot; &quot;--tglog-endpoint=https://tglogsz.datamore.qq.com/lolcli/report/&quot; &quot;--ccs=https://hn1-cloud-cc.lol.qq.com:8093&quot; &quot;--entitlements-url=https://hn1-cloud-entitlements.lol.qq.com:28088/api/token/v1&quot; &quot;--dradis-endpoint=http://some.url&quot; &quot;--remoting-auth-token=fBHICcvvUudE4Fij_kpQuA&quot; &quot;--app-port=58831&quot; &quot;--install-directory=g:\鑻遍泟鑱旂洘\LeagueClient&quot; &quot;--app-name=LeagueClient&quot; &quot;--ux-name=LeagueClientUx&quot; &quot;--ux-helper-name=LeagueClientUxHelper&quot; &quot;--log-dir=LeagueClient Logs&quot; &quot;--crash-reporting=&quot; &quot;--crash-environment=HN1&quot; &quot;--app-log-file-path=g:/英雄联盟/LeagueClient/../Game/Logs/LeagueClient Logs/2023-04-23T19-21-31_24144_LeagueClient.log&quot; &quot;--app-pid=24144&quot; &quot;--output-base-dir=g:/鑻遍泟鑱旂洘/LeagueClient/../Game&quot; &quot;--no-proxy-server&quot; &quot;--ignore-certificate-errors&quot;</span><br></pre></td></tr></table></figure><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>客户端api使用的<code>https</code>协议，认证方式使用的是<code>Basic</code>,用户名为<code>riot</code></p><h3 id="riot-client"><a href="#riot-client" class="headerlink" title="riot-client"></a>riot-client</h3><p><code>riotclient-auth-token</code> token</p><p><code>riotclient-app-port</code> 端口号</p><p>eg:</p><p><code>GET https://127.0.0.1:50886/swagger/v2/swagger.json</code> 获取swagger文档说明</p><p><code>GET https://127.0.0.1:58789/swagger/v3/openapi.json</code> </p><h3 id="lcu-client"><a href="#lcu-client" class="headerlink" title="lcu-client"></a>lcu-client</h3><p><code>remoting-auth-token</code> token</p><p><code>app-port</code> 端口号</p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://127.0.0.1:55205/lol-player-report-sender/v1/end-of-game-reports">https://127.0.0.1:55205/lol-player-report-sender/v1/end-of-game-reports</a></p><p>{“gameId”:8293338498,”categories”:[“NEGATIVE_ATTITUDE”,”VERBAL_ABUSE”,”HATE_SPEECH”],”offenderSummonerId”:2947216121,”offenderPuuid”:”42924433-abf2-568c-a318-41f80cb50e57”}</p><p><a href="https://pengu.lol/guide/lcu-request">https://pengu.lol/guide/lcu-request</a></p><p><a href="https://hextechdocs.dev/getting-started-with-the-lcu-websocket/">https://hextechdocs.dev/getting-started-with-the-lcu-websocket/</a></p><p><a href="https://riot-api-libraries.readthedocs.io/en/latest/lcu.html">https://riot-api-libraries.readthedocs.io/en/latest/lcu.html</a></p><p><a href="https://www.nuget.org/packages/Camille.Lcu/">https://www.nuget.org/packages/Camille.Lcu/</a></p><p><a href="https://lcu.vivide.re/#operation--lol-chat-v1-me-put">https://lcu.vivide.re/#operation--lol-chat-v1-me-put</a></p><p><a href="https://developer.riotgames.com/docs/lol">https://developer.riotgames.com/docs/lol</a></p>]]></content>
      
      
      <categories>
          
          <category> LOL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lcu-api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinDbg符号配置.</title>
      <link href="/2023/03/07/WinDbg%E7%AC%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/03/07/WinDbg%E7%AC%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p><code>_NT_SYMBOL_PATH</code> :<code>cache*C:\MySymbols;srv*https://msdl.microsoft.com/download/symbols</code></p><p><code>_NT_SYMBOL_PROXY</code>: <code>ip:port</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/bug-check-code-reference2">https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/bug-check-code-reference2</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/symbol-path">https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/symbol-path</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/firewalls-and-proxy-servers">https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/firewalls-and-proxy-servers</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LOL ob教程.</title>
      <link href="/2023/02/25/LOL%20ob%E6%95%99%E7%A8%8B/"/>
      <url>/2023/02/25/LOL%20ob%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>为了观战韩服职业选手排位历史记录</p><ol><li><p>下载外服客户端</p></li><li><p>修改配置</p></li></ol><p>到 <code>C:\ProgramData\Riot Games\Metadata\league_of_legends.live</code> 目录下<br>找到<code>league_of_legends.live.product_settings.yaml</code><br>修改如下</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_patching_enabled_by_player:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">    <span class="attr">Direct X 9:</span></span><br><span class="line">        <span class="attr">hash:</span> <span class="string">&quot;9f22c993a42816d61a3063badbf25f9dd299721051ca0665a7cb295ba97591b0&quot;</span></span><br><span class="line">        <span class="attr">phase:</span> <span class="string">&quot;Succeeded&quot;</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"><span class="attr">locale_data:</span></span><br><span class="line">    <span class="attr">available_locales:</span> <span class="comment"># 配置语言选项</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;en_US&quot;</span> <span class="comment">#英文</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;zh_CN&quot;</span> <span class="comment">#中文</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;ko_KR&quot;</span> <span class="comment">#韩文</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;ja_JP&quot;</span> <span class="comment">#日文</span></span><br><span class="line">    <span class="attr">default_locale:</span> <span class="string">&quot;en_US&quot;</span> <span class="comment">#默认语言</span></span><br><span class="line"><span class="attr">patching_policy:</span> <span class="string">&quot;manual&quot;</span></span><br><span class="line"><span class="attr">patchline_patching_ask_policy:</span> <span class="string">&quot;ask&quot;</span></span><br><span class="line"><span class="attr">product_install_full_path:</span> <span class="string">&quot;G:\\Riot Games\\League of Legends&quot;</span></span><br><span class="line"><span class="attr">product_install_root:</span> <span class="string">&quot;G:/Riot Games&quot;</span></span><br><span class="line"><span class="attr">settings:</span></span><br><span class="line">    <span class="attr">create_shortcut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">create_uninstall_key:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">locale:</span> <span class="string">&quot;ko_KR&quot;</span> <span class="comment"># 这里设置为你想要的语言，参考上面</span></span><br><span class="line"><span class="attr">shortcut_name:</span> <span class="string">&quot;League of Legends.lnk&quot;</span></span><br><span class="line"><span class="attr">should_repair:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>为了ob韩服不乱码，所以需要将上述的<code>locale</code> 后面的值改成<code>ko_KR</code></p><ol start="2"><li>修改观战进程语言</li></ol><p>找到 LOL 安装目录 ，这里以我的为例，<code>G:\Riot Games\League of Legends\Config</code><br>打开 <code>LeagueClientSettings.yaml</code> 文件，<br>修改如下</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">install:</span></span><br><span class="line">    <span class="attr">crash_reporting:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;crashpad&quot;</span></span><br><span class="line">    <span class="attr">game-settings:</span></span><br><span class="line">        <span class="attr">accountId:</span> <span class="number">238191481</span></span><br><span class="line">        <span class="attr">modified:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">timestamp:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">gameflow-patcher-lock:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">gameflow-process-info:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">gameflow-spectate-reconnect-info:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">globals:</span></span><br><span class="line">        <span class="attr">locale:</span> <span class="string">&quot;en_US&quot;</span> <span class="comment"># 这里设置为ko_KR 就不会乱码了</span></span><br><span class="line">        <span class="attr">region:</span> <span class="string">&quot;NA&quot;</span></span><br><span class="line">    <span class="attr">lcu-settings:</span></span><br><span class="line">        <span class="attr">accountId:</span> <span class="number">238191481</span></span><br><span class="line">        <span class="attr">modified:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">timestamp:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">patcher:</span></span><br><span class="line">        <span class="attr">client_migrated:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">client_patcher_available:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">game_migrated:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">game_patcher_available:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">locales:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;en_US&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;ja_JP&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;ko_KR&quot;</span></span><br><span class="line">        <span class="attr">toggles:</span></span><br><span class="line">            <span class="attr">new_client_patcher:</span> <span class="number">0</span></span><br><span class="line">            <span class="attr">new_game_patcher:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">perks-settings:</span></span><br><span class="line">        <span class="attr">accountId:</span> <span class="number">238191481</span></span><br><span class="line">        <span class="attr">modified:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">timestamp:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">riotclient-upgrade:</span></span><br><span class="line">        <span class="attr">seq-success-count:</span> <span class="number">16</span></span><br><span class="line">        <span class="attr">success-count:</span> <span class="number">16</span></span><br><span class="line">    <span class="attr">rso-auth:</span></span><br><span class="line">        <span class="attr">install-identifier:</span> <span class="string">&quot;7ca3c8997368594881546f6d2d70a551&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wireshark tls抓包.</title>
      <link href="/2023/01/30/wireshark%20tls%E6%8A%93%E5%8C%85/"/>
      <url>/2023/01/30/wireshark%20tls%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>配置环境变量 <code>SSLKEYLOGFILE</code> 值为拥有读写权限的文件,例如:<code>D:\A_TLS_LOG\sslkeylog.log</code></p></li><li><p>打开<code>wireshark</code>,找到首选项(ctrl+shift+p),<code>Protocols &gt;&gt; TLS </code>,<code>TLS debug file</code> 配置tls日志，<code>(Pre)-Master-Secret log filename</code>配置上述环境变量<code>SSLKEYLOGFILE</code>中指定的文件</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二进制 &amp;&amp; 位操作.</title>
      <link href="/2022/10/11/%E4%BA%8C%E8%BF%9B%E5%88%B6%20&amp;&amp;%20%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/10/11/%E4%BA%8C%E8%BF%9B%E5%88%B6%20&amp;&amp;%20%E4%BD%8D%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><p>计算中的任何数据都是由二进制表示，因为IC(Integrated Circuit)集成电路的引脚只有直流电压<code>0V</code>或<code>5V</code>两个状态，也就是一个IC引脚只能表示两个状态，和二进制 <code>0</code> <code>1</code> 契合</p><h1 id="数"><a href="#数" class="headerlink" title="数"></a>数</h1><p>二进制数<code>0000 0101</code> 转成10进制数结果为<code>5 = 1*2^2 + 0*2^1 +1*2^0 = 4 + 0 + 1 = 5</code> 即数值和<code>位权</code>相乘后相加</p><h2 id="正数和负数的表示"><a href="#正数和负数的表示" class="headerlink" title="正数和负数的表示"></a>正数和负数的表示</h2><p>通常将数的二进制最高位作为符号位，<code>1</code>表示负数，<code>0</code> 表示正数</p><p>10进制数<code>1</code> 的二进制数为:<code>0000 0001</code>， 负数为 ：<code>~1 + 1 = -2 + 1 =-1</code></p><p>数<code>v</code>取反：</p><p>  正数：<code>-(v+1)</code></p><p>  负数 <code>|v| -1 </code></p><p>正数取反结果为负数，负数取反结果为整数</p><p>任何数取反加一的结果都为该数的相反数</p><p>正加负减(<code>-(v+1)</code>)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下数取反后的值</span><br><span class="line">10 -11</span><br><span class="line">1 -2</span><br><span class="line">-2 1</span><br><span class="line">-5 4</span><br><span class="line">-6  5</span><br></pre></td></tr></table></figure><h2 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h2><p>只有右移时才能区分出<code>逻辑位移</code>和<code>算术位移</code></p><p>java中 <code>&gt;&gt;</code> 为算术右移，<code>&gt;&gt;&gt;</code> 为逻辑位移</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x = -4;</span><br><span class="line">int y = -4 &gt;&gt;2;// -1</span><br><span class="line">int z = -4 &gt;&gt;&gt;2; // 1073741823</span><br></pre></td></tr></table></figure><h3 id="逻辑位移"><a href="#逻辑位移" class="headerlink" title="逻辑位移"></a>逻辑位移</h3><p>补零就行了</p><h3 id="算术位移"><a href="#算术位移" class="headerlink" title="算术位移"></a>算术位移</h3><p>将二进制数作为带符号的数值进行运算时，移位后需要在最高位补充符号位（0或者1）</p><h1 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h1><p>符号、尾数、基数、指数</p><h2 id="双精度-64bit"><a href="#双精度-64bit" class="headerlink" title="双精度(64bit)"></a>双精度(64bit)</h2><p><code>符号部分(1bit) + 指数部分(11bit) + 尾数部分(52bit)</code></p><h2 id="单精度-32bit"><a href="#单精度-32bit" class="headerlink" title="单精度(32bit)"></a>单精度(32bit)</h2><p><code>符号部分(1bit) + 指数部分(8bit) + 尾数部分(23bit)</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis-源码学习总结.</title>
      <link href="/2022/09/28/redis-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2022/09/28/redis-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="sds-Simple-dynamic-string"><a href="#sds-Simple-dynamic-string" class="headerlink" title="sds (Simple dynamic string)"></a>sds (Simple dynamic string)</h1><p><code>sdsHeader</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sdsHdr&#123;</span><br><span class="line">    <span class="type">size_t</span> len;</span><br><span class="line">    <span class="type">size_t</span> alloc;</span><br><span class="line">    <span class="type">size_t</span> flag</span><br><span class="line">    <span class="type">char</span> [] buf;<span class="comment">//柔性数组，内存分配时不占用空间，根据需要可以动态构建该区域，且内存空间连续</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="List-双链表实现"><a href="#List-双链表实现" class="headerlink" title="List (双链表实现)"></a>List (双链表实现)</h1><h1 id="rio-面向stream的IO抽象层"><a href="#rio-面向stream的IO抽象层" class="headerlink" title="rio (面向stream的IO抽象层)"></a>rio (面向stream的IO抽象层)</h1><p>实现了<code>sds</code>,<code>file</code>,<code>socket</code>,<code>fd</code>的相关读写</p><p>其中针对<code>aof(Append only file)</code>文件，定义了序列化协议 <code>*&lt;argv_num&gt;\r\n$&lt;count&gt;\r\n&lt;payload&gt;\r\n </code></p><blockquote><p>开启redis aof,需要在<code>redis.conf</code>中配置<code>appendonly yes</code></p></blockquote><p>例子：假如需要往<code>aof</code>中写入字符串<code>Hello</code>,实际写入的是<code>$5\r\nHello</code></p><p>例子：<code>redis-cli</code>执行<code>set test abc</code></p><p>那么aof文件将会追加下面这段内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*3</span><br><span class="line">$3</span><br><span class="line">set</span><br><span class="line">$4</span><br><span class="line">test</span><br><span class="line">$3</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><p>翻译成人话就是：<code>三个字符串，分别为set test abc</code></p><h1 id="dictht-HashTable"><a href="#dictht-HashTable" class="headerlink" title="dictht (HashTable)"></a>dictht (HashTable)</h1><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>&#x2F;&#x2F;设置状态<br><code>flags |= STATE_OEPN</code></p><p>&#x2F;&#x2F;取消状态<br><code>flags &amp;= ~STATE_OPEN</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">updateFlag</span><span class="params">(<span class="type">int</span>*flags,<span class="type">int</span> flag,<span class="type">int</span> enable)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(enable)&#123;</span><br><span class="line">        *flags |= flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        *flags &amp;= ~flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring-transaction-auto.</title>
      <link href="/2022/09/20/spring-transaction-auto/"/>
      <url>/2022/09/20/spring-transaction-auto/</url>
      
        <content type="html"><![CDATA[<h1 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h1><p>@EnableTransactionManagement<br>    -&gt; @Import(TransactionManagementConfigurationSelector.class)<br>        -&gt; ProxyTransactionManagementConfiguration</p><p>ProxyTransactionManagementConfiguration<br>    @Bean<br>    -&gt; BeanFactoryTransactionAttributeSourceAdvisor<br>        -&gt;setTranactionAttributeSource (TransactionAttributeSource())<br>        -&gt;setAdvice(TransactionInterceptor()-&gt;ref-&gt;TransactionManager)</p><pre><code>    7vPUtZJ6pMgebJvzi4C,eWDpdRrVLwQk56uCCIE</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2022年8月22日-POI-drawing.</title>
      <link href="/2022/08/22/2022%E5%B9%B48%E6%9C%8822%E6%97%A5-POI-drawing/"/>
      <url>/2022/08/22/2022%E5%B9%B48%E6%9C%8822%E6%97%A5-POI-drawing/</url>
      
        <content type="html"><![CDATA[<h1 id="sheet中的单位"><a href="#sheet中的单位" class="headerlink" title="sheet中的单位"></a>sheet中的单位</h1><p>统一使用<code>EMU</code></p><p><code>1EMU = (1 / 914400) US inch = (1 / 360000) cm</code></p><p><code>PIXEL_DPI  = 96</code></p><p><code>POINT_DPI = 72</code></p><p><code>emu = (pixel / 96) * 914400</code></p><p><code>emu = (point / 72) * 914400</code></p><p><code>1 pixel = (914400 / 96 ) = 9525 emu</code></p><p><code>1 point = (914400 / 72) = 12700 emu</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7 is single char pixel </span><br><span class="line"></span><br><span class="line">cell width:</span><br><span class="line"></span><br><span class="line">((8*7+5)/7*256)/256 = 8.714285714</span><br><span class="line"></span><br><span class="line">width to pixel:</span><br><span class="line"></span><br><span class="line">(((256*8.714285714+(128/7))/256)*7) = 61.499999998</span><br><span class="line"></span><br><span class="line">pixel to char width</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">31 is single char pixel</span><br><span class="line"></span><br><span class="line">cell width:</span><br><span class="line"></span><br><span class="line">((8*32+8)/32*256)/256 </span><br><span class="line"></span><br><span class="line">((8*32+5)/32*256)/256 = 8.15625</span><br><span class="line"></span><br><span class="line">width to pixel:</span><br><span class="line"></span><br><span class="line">(((256*8.15625+(128/32))/256)*32) = 261.5</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="字体像素计算"><a href="#字体像素计算" class="headerlink" title="字体像素计算"></a>字体像素计算</h1><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Drawing.Text;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FontMesure</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FontMeasure</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] _font_size = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">36</span>, <span class="number">48</span>, <span class="number">72</span> &#125;;</span><br><span class="line">        FontStyle[] _font_style = <span class="keyword">new</span> FontStyle[] &#123; FontStyle.Regular, FontStyle.Bold, FontStyle.Italic &#125;;</span><br><span class="line">        String fontSizeDelimeter = <span class="string">&quot;|&quot;</span>;</span><br><span class="line">        String fontDelimeter = <span class="string">&quot;__&quot;</span>;</span><br><span class="line">        String fontPixelStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FontMeasure</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            dumpToTxt.Enabled = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Bitmap bm = <span class="keyword">new</span> Bitmap(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">            bm.SetResolution(<span class="number">96</span>, <span class="number">96</span>);</span><br><span class="line">            Graphics g = Graphics.FromImage(bm);</span><br><span class="line">            InstalledFontCollection fonts = <span class="keyword">new</span> InstalledFontCollection();</span><br><span class="line">            StringBuilder str = <span class="keyword">new</span> StringBuilder(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (FontFamily family <span class="keyword">in</span> fonts.Families)</span><br><span class="line">            &#123;</span><br><span class="line">                str.Append(family.Name);</span><br><span class="line">                str.Append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="keyword">foreach</span> (FontStyle style <span class="keyword">in</span> _font_style)</span><br><span class="line">                &#123;</span><br><span class="line">                    str.Append(style.ToString());</span><br><span class="line">                    str.Append(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="built_in">int</span> fontSize <span class="keyword">in</span> _font_size)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Font tmp = <span class="keyword">new</span> Font(family.Name, fontSize, style);</span><br><span class="line">                        <span class="built_in">float</span> w = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            SizeF sf = g.MeasureString(i + <span class="string">&quot;&quot;</span>, tmp, Int32.MaxValue, StringFormat.GenericTypographic);</span><br><span class="line">                            <span class="keyword">if</span> (sf.Width &gt; w)</span><br><span class="line">                            &#123;</span><br><span class="line">                                w = sf.Width;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        str.Append(fontSize + <span class="string">&quot;:&quot;</span> + w +fontSizeDelimeter);</span><br><span class="line">                    &#125;</span><br><span class="line">                    str.Remove(str.Length - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                    str.Append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                str.Append(fontDelimeter);</span><br><span class="line">                str.Append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            fontPixelStr = str.ToString();</span><br><span class="line">            richTextBox1.Text = fontPixelStr;</span><br><span class="line">            g.Dispose();</span><br><span class="line">            dumpToTxt.Enabled = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">richTextBox1_TextChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dumpToTxt_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextWriter textWriter = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;fontPixelRaw.txt&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            textWriter.Write(fontPixelStr);</span><br><span class="line">            textWriter.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="转json"><a href="#转json" class="headerlink" title="转json"></a>转json</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FontMeasureBuild</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//把上面输出的fontPixelRaw.txt 转成json格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">raw</span> <span class="operator">=</span> FileUtil.readString(<span class="string">&quot;fontPixelRaw.txt&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line">        String[] rawSplit = raw.split(<span class="string">&quot;\r\n__\r\n&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">fontMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="keyword">for</span> (String fontRaw : rawSplit) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isBlank(fontRaw)) <span class="keyword">continue</span>;</span><br><span class="line">            String[] split = fontRaw.split(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="comment">//font-&gt;bold-&gt;k-&gt;v</span></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">styleMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">            fontMapping.put(split[<span class="number">0</span>], styleMapping);</span><br><span class="line">            String[] RegularSplit = split[<span class="number">1</span>].split(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">            buildFontStyleMapping(<span class="string">&quot;r&quot;</span>, styleMapping, RegularSplit[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            String[] BoldSplit = split[<span class="number">2</span>].split(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">            buildFontStyleMapping(<span class="string">&quot;b&quot;</span>, styleMapping, BoldSplit[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String[] ItalicSplit = split[<span class="number">3</span>].split(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">            buildFontStyleMapping(<span class="string">&quot;i&quot;</span>, styleMapping, ItalicSplit[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        FileUtil.writeString(fontMapping.toJSONString(),<span class="string">&quot;fontPixel.json&quot;</span>,<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">        System.out.println(fontMapping.toJSONString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildFontStyleMapping</span><span class="params">(String style, JSONObject styleMapping, String strList)</span> &#123;</span><br><span class="line"></span><br><span class="line">        String[] split = strList.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : split) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotBlank(str)) &#123;</span><br><span class="line">                String[] sizeSplit = str.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> style + <span class="string">&quot;@&quot;</span> + sizeSplit[<span class="number">0</span>];</span><br><span class="line">                styleMapping.put(key, sizeSplit[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>根据workbook中的字体查表获取对应的digitWidth、cellWidth、cellPixelWidth</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> workbook.getFontAt(<span class="number">0</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">defaultFontName</span> <span class="operator">=</span> <span class="string">&quot;Calibri&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">fontName</span> <span class="operator">=</span> font.getFontName();</span><br><span class="line"><span class="type">short</span> <span class="variable">fontSize</span> <span class="operator">=</span> font.getFontHeightInPoints();</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">fontPixelConfig</span> <span class="operator">=</span> JSON.parseObject(FileUtils.readStr(<span class="string">&quot;fontPixel.json&quot;</span>))</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> fontPixelConfig.getJSONObject(fontName);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == jsonObject) &#123;</span><br><span class="line">    jsonObject = fontPixelConfig.getJSONObject(defaultFontName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != jsonObject) &#123;</span><br><span class="line">    <span class="comment">//fontStyle(Initial)@fontSize</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;r@&quot;</span> + fontSize;</span><br><span class="line">    <span class="type">String</span> <span class="variable">digitWidthStr</span> <span class="operator">=</span> jsonObject.getString(key);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(digitWidthStr)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dw</span> <span class="operator">=</span> ColumnHelper.round(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(digitWidthStr).floatValue());</span><br><span class="line">        <span class="type">int</span> <span class="variable">cellWidthPixel</span> <span class="operator">=</span> ColumnHelper.dw2pixel(dw);</span><br><span class="line">        <span class="type">float</span> <span class="variable">cellWidth</span> <span class="operator">=</span> ColumnHelper.pixel2cw(cellWidthPixel, dw);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>转换</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColumnHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">round</span><span class="params">(<span class="type">float</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (v + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dw_ digit width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> default cell width of pixel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dw2pixel</span><span class="params">(<span class="type">float</span> dw_)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dw</span> <span class="operator">=</span> round(dw_);</span><br><span class="line">        <span class="keyword">return</span> align(Math.round(dw * <span class="number">8f</span> + round((dw) / <span class="number">4f</span>) * <span class="number">2</span> + <span class="number">1</span>), <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cw  cellWidth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dw_ digitWidth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> cell width of pixel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">cw2pixel</span><span class="params">(<span class="type">double</span> cw, <span class="type">float</span> dw_)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dw</span> <span class="operator">=</span> round(dw_);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) Math.round(cw * dw + round(((dw) / <span class="number">4f</span>)) * <span class="number">2d</span> + <span class="number">1d</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pixel cell width of pixel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dw_   digit width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> cellWidth of pixel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">pixel2cw</span><span class="params">(<span class="type">int</span> pixel, <span class="type">float</span> dw_)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dw</span> <span class="operator">=</span> round(dw_);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">value</span> <span class="operator">=</span> BigDecimal.valueOf(pixel - (((dw) / <span class="number">4f</span>) * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">        value = value.divide(BigDecimal.valueOf(dw), <span class="number">2</span>, RoundingMode.HALF_UP);</span><br><span class="line">        <span class="keyword">return</span> value.floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按给定倍数对齐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 给定值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 倍数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">align</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (v + a - <span class="number">1</span>) &amp; -a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">getCellWidthPixel</span><span class="params">(Sheet sheet, <span class="type">int</span> colIndex)</span> &#123;</span><br><span class="line">        <span class="type">WorkbookInfo</span> <span class="variable">workBookInfo</span> <span class="operator">=</span> JxlsDrawingContextHolder.getWorkBookInfo();</span><br><span class="line">        <span class="keyword">if</span> (sheet <span class="keyword">instanceof</span> XSSFSheet) &#123;</span><br><span class="line">            <span class="type">CTCol</span> <span class="variable">col</span> <span class="operator">=</span> ((XSSFSheet) sheet).getColumnHelper().getColumn(colIndex, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">float</span>) (col == <span class="literal">null</span> || !col.isSetWidth() ? workBookInfo.getDefaultColumnPixelWidth() : cw2pixel(col.getWidth(), workBookInfo.getDigitWidth()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> workBookInfo.getDefaultColumnPixelWidth();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">dw</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pixel1</span> <span class="operator">=</span> dw2pixel(dw);</span><br><span class="line">        System.out.println(pixel1);<span class="comment">//280</span></span><br><span class="line">        System.out.println(pixel2cw(pixel1, dw));<span class="comment">//8.22</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/zazzh007/article/details/106982863">Excel列宽像素值计算方法详解</a></p><p><a href="http://www.ericwhite.com/blog/precisely-placing-images-in-an-open-xml-spreadsheet/">precisely-placing-images-in-an-open-xml-spreadsheet</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=yuenm18.ooxml-viewer&ssr=false#overview">ooxml-viewer</a></p><p><a href="https://www.youtube.com/watch?v=zgO_vOfThCI">Calculating-Cell-Sizes</a></p><p><a href="https://stackoverflow.com/questions/61041830/convert-excel-column-width-between-characters-unit-and-pixels-points">Convert Excel column width between characters unit and pixels (points)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows下Clion导入MySQL源码.</title>
      <link href="/2022/08/12/windows%E4%B8%8BClion%E5%AF%BC%E5%85%A5MySQL%E6%BA%90%E7%A0%81/"/>
      <url>/2022/08/12/windows%E4%B8%8BClion%E5%AF%BC%E5%85%A5MySQL%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>安装 <a href="https://www.jetbrains.com/clion/">Clion</a></p></li><li><p>安装 <a href="https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/">Visual Studio 2015生成工具2017</a></p></li><li><p>下载<a href="https://github.com/mysql/mysql-server">MySQL源码</a></p></li><li><p>安装<a href="https://onboardcloud.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz">boost</a></p></li><li><p>安装<a href="http://downloads.sourceforge.net/gnuwin32/bison-2.4.1-setup.exe">bison</a></p></li><li><p>安装<a href="https://slproweb.com/download/Win64OpenSSL-1_1_1q.exe">OpenSSL-1.1.1</a></p></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>下载MySQL源码成功后，导入到Clion</p><p>还需要做如下配置</p><h2 id="配置Profile"><a href="#配置Profile" class="headerlink" title="配置Profile"></a>配置Profile</h2><p><a href="jetbrains://CLion/settings?name=Build%2C+Execution%2C+Deployment--CMake">File | Settings | Build, Execution, Deployment | CMake</a></p><p>点击+号生成了一个Profile</p><p>Name：<code>Debug</code></p><p>Build type:<code>Debug</code></p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303150105864.png" alt="1"></p><p>在<code>CMake options</code> 输入<code>-DDOWNLOAD_BOOST=1 -DWITH_BOOST=boost/boost_1_59_0/</code></p><h2 id="配置Toolchains"><a href="#配置Toolchains" class="headerlink" title="配置Toolchains"></a>配置Toolchains</h2><p><a href="jetbrains://CLion/settings?name=Build%2C+Execution%2C+Deployment--Toolchains">File | Settings | Build, Execution, Deployment | Toolchains</a></p><p>点击+号，选择Visual Studio,Clion应该会自动识别到vs2017</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303150106949.png" alt="2"></p><h1 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h1><p>上述准备工作完成后，clion应该会自动<code>cmake</code>，由于<code>boost</code>文件较大，下载速度很慢，这个时候，只需要停止cmake.</p><p>在源码目录下找到<code>cmake-build-debug\boost\boost_1_59_0</code>这个目录，把上面下载好的<code>boost_1_59_0.tar.gz</code>文件复制过去，然后重新cmake。</p><p>不出意外的话，cmake完成后，找到任意源码文件，<code>ctrl+鼠标左键</code>是可以做到跳转的。</p><h1 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h1><p><code>MySQL</code>的源码路径<code>不能有空格或者中文</code></p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 数据导入导出.</title>
      <link href="/2022/08/02/mysql%20%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
      <url>/2022/08/02/mysql%20%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><p><code>mysql shell</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br><span class="line">create database test;</span><br><span class="line">use test;</span><br><span class="line">source test.sql;</span><br></pre></td></tr></table></figure><p><code>cmd</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456 dbname &lt; test.sql</span><br></pre></td></tr></table></figure><h1 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h1><h1 id="整个数据库"><a href="#整个数据库" class="headerlink" title="整个数据库"></a>整个数据库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p password database_name &gt; output.sql</span><br></pre></td></tr></table></figure><h1 id="导出一个表"><a href="#导出一个表" class="headerlink" title="导出一个表"></a>导出一个表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -u username -p password database_name table_name &gt; output.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见框架HOOK点.</title>
      <link href="/2022/07/01/%E5%B8%B8%E8%A7%81%E6%A1%86%E6%9E%B6HOOK%E7%82%B9/"/>
      <url>/2022/07/01/%E5%B8%B8%E8%A7%81%E6%A1%86%E6%9E%B6HOOK%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><p>查看最终mapper方法生成的SQL</p><p><code>org.apache.ibatis.binding.MapperMethod#execute</code><br><code>org.apache.ibatis.executor.ReuseExecutor#doUpdate</code><br><code>org.apache.ibatis.executor.ReuseExecutor#doQuery</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JEPaaS开发版部署方式.</title>
      <link href="/2022/06/24/JEPaaS%E5%BC%80%E5%8F%91%E7%89%88%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/06/24/JEPaaS%E5%BC%80%E5%8F%91%E7%89%88%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="JEPaaS商业开发版部署教程"><a href="#JEPaaS商业开发版部署教程" class="headerlink" title="JEPaaS商业开发版部署教程"></a>JEPaaS商业开发版部署教程</h1><h2 id="源码下载-amp-amp-基础环境搭建"><a href="#源码下载-amp-amp-基础环境搭建" class="headerlink" title="源码下载 &amp;&amp; 基础环境搭建"></a>源码下载 &amp;&amp; 基础环境搭建</h2><h3 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h3><ul><li><p><code>OS: windows/linux/macos</code></p></li><li><p><code>MySQL 5.7+</code></p></li><li><p><code>Redis 3.0+</code></p></li><li><p><code>Tomcat 7.0+</code></p></li></ul><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><ol><li>下载<a href="https://gitee.com/jepaas/jepaas-commercial">商业开发板源码</a></li></ol><h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><p>依次创建<code>instant</code>,<code>jepaas</code> 数据库，到<code>jepaas-commercial\scripts\db-migration</code>，把需要的脚本导入到Mysql执行</p><h3 id="搭建redis"><a href="#搭建redis" class="headerlink" title="搭建redis"></a>搭建redis</h3><p>Redis 搭建成功后，需要在redis.conf 设置redis的密码，这里假设为 <code>edtest123</code></p><h3 id="参数修改-amp-amp-证书覆盖"><a href="#参数修改-amp-amp-证书覆盖" class="headerlink" title="参数修改 &amp;&amp; 证书覆盖"></a>参数修改 &amp;&amp; 证书覆盖</h3><ol><li><p>把<code>JEPaaS</code>的授权证书重命名为<code>je.license</code>,复制到<code>jepaas-commerical/je-web/src/main/webapp/JE/data/config</code>目录下</p></li><li><p><code>jepaas-commerical/je-web/src/main/resources/</code>目录下为各个环境的配置文件，根据实际的MySQL、Redis 配置，修改<code>jdbc.properties</code>,<code>redis.properties</code>中的连接地址和认证参数</p></li><li><p><code>scripts/push</code>目录下是<code>connector-server</code>和<code>instant-push-server</code>的构建好的文件，也需要修改mysql和redis 连接及认证参数</p></li></ol><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p><code>-P</code> 后面的参数代表maven打包时使用的profile,根据不同环境选择相应的profile,下面以prod为例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd jepaas-commercial</span><br><span class="line">mvn package -P prod</span><br></pre></td></tr></table></figure><p>上述命令如果执行成功后，应该会输出一个war包<code>jepaas-commercial\je-web\target\jepaas.war</code></p><h2 id="部署-amp-amp-启动"><a href="#部署-amp-amp-启动" class="headerlink" title="部署 &amp;&amp; 启动"></a>部署 &amp;&amp; 启动</h2><ol start="0"><li><p>启动 <code>connector-server</code>和<code>instant-push-server</code></p></li><li><p>下载<code>tomcat</code>后，把上面打包好的<code>jepaas.war</code>复制到<code>TOMCAT_HOME\webapps\</code>这个目录，然后把<code>jepaas.war</code>重命名为<code>ROOT.war</code></p></li><li><p>到<code>TOMCAT_HOME\bin\</code>目录下，执行如下命令，启动服务</p></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">startup.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jepaas-license加密分析.</title>
      <link href="/2022/06/09/jepaas-license%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
      <url>/2022/06/09/jepaas-license%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="JePaaS-license加密分析"><a href="#JePaaS-license加密分析" class="headerlink" title="JePaaS-license加密分析"></a>JePaaS-license加密分析</h1><p>uncode-session.jar</p><h1 id="MUserCanvas"><a href="#MUserCanvas" class="headerlink" title="MUserCanvas"></a>MUserCanvas</h1><h2 id="errorInfo-json"><a href="#errorInfo-json" class="headerlink" title="errorInfo.json"></a>errorInfo.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;e1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没有找到证书，请联系官方或下载证书！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取认证信息出错！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;您的证书最多创建%s张表！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;您的证书最多创建%s个功能！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;您的证书最多创建%s个流程！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e6&quot;</span><span class="punctuation">:</span> <span class="string">&quot;证书认证异常！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e7&quot;</span><span class="punctuation">:</span> <span class="string">&quot;学习版无法使用迁移工具，请购买指定的授权!&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e8&quot;</span><span class="punctuation">:</span> <span class="string">&quot;您的版本用户量超过限制！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e9&quot;</span><span class="punctuation">:</span> <span class="string">&quot;您的证书已到期，请联系官方！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e10&quot;</span><span class="punctuation">:</span> <span class="string">&quot;您的版本资源已超过限制，将无法启动！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e11&quot;</span><span class="punctuation">:</span> <span class="string">&quot;授权告警！&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e12&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请更新插件集！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>g</code> 错误信息JSON</li><li><code>name</code> license信息</li><li><code>s</code> plugin.lock 信息</li><li><code>e</code> 可创建表数量，-1 无限制</li><li><code>h</code> 可创建流程数量，-1无限制</li><li><code>f</code> 可创建功能数量，-1无限制</li><li><code>q</code> 最大用户数量，-1无限制</li><li><code>i</code> 证书到期时间</li><li><code>x</code> 版本:develop开发版,commercial商业版</li><li><code>m</code> 版本号 </li><li>。。</li></ul><h2 id="je-license定义"><a href="#je-license定义" class="headerlink" title="je.license定义"></a>je.license定义</h2><ul><li><code>d</code> RSA privateKey</li><li><code>b</code> AES key</li><li><code>a</code> AES IV</li><li><code>c</code> AES 加密后的内容</li></ul><h2 id="plugin-lock定义"><a href="#plugin-lock定义" class="headerlink" title="plugin.lock定义"></a>plugin.lock定义</h2><ul><li><code>d</code> RSA privateKey</li><li><code>b</code> AES key</li><li><code>a</code> AES IV</li><li><code>c</code> AES 加密后的内容</li></ul><p>je.license 解密前</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Eu0KOoPjqTOWZKeEOyyIJcr6RTBchmdMVSJi0aX7oQEM5wcBKsTrUlHg0mdQS3wsPOc/LSKswc7IPAd1U/OE5GVhOkerLiPZgouIqXNVMIvfhH1RS5nXHkHtdHS1HVAkEUEZ9PA0EAZtBYdqYbUm1wHEBvBnGUoyHDP1ymVBQw8=&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;QNu+ipkXIXXYZZkZczDUNTYfV60QimrI8nVxmoxKuBVJtnzC7YJo9O0wHrLYe0+iGQZy/qj4UZVlMdNc2qwpx4b03Orqu+c6qfp2L5befTH3AwDOT146OMx8F/dIRQ6KYmwuAGT5+zozw8K3BKA+WCrjuWYuK7BuuEld8OWQpMo=&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fkFTsuZi8C+f+zvfXPO/I4cm4bLdJdYP1P11HiJ9xAjUIlmc/TMS3yinyHGolZ6tjEYvLF3AUzzN3+HbQQn2jFvRldwZAPQzkS2iuG7wLiwzTwGxkBFk+6J2GCCQxzgFDcXIfxIFFB1YOqFnje2wiKW6viPQqQBFu2FniW57bHzH+7qAcNmZBewTE4REbMYfqUm7spbRvrr09kgaKmD0HmJBejVIulMoxBUFmSgqnW9ywPuToUwTB81OiqVPUqAvdsOwzxJnkQQRn2Pt0WzEdDbbAdONyWcZw3dc5sEKMz3U6lD5GUPPZi/Yn0QwHOZDQuxJ3dIliQ05vVDhIH2txLa58Cyuzw6UI2sMIWc4KlJm7sa3hlvz9bvkPE5FJUHx2fw+DLx8hszJ/g9+d7DnS1fM2YRgV8R7SuPXDZ9Yx/u7IUlNwbZiyyh1o8X9dQND5C98VDH34Q8twj4AiNqtOjX4prx6jvHMIYCv/eou/g7lHxWTwJ08kfFbKbpBUSmiedcHqLnAL8izdRHvUUlDBw==&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAIOKUqPHeVESjR47ptAd+BBBJUoVDfYkaMMrTUWIDQrO1OW1LPUYvLUXnrkePftmR1saeMyIKWaJX08dKqSKto5WJr/E6GD9/YADMlph1ZC2LGxFqDg8hgK2dqfcNMVuobIOFuBSjcFr5QKFcdchkNVC4ULtuoabFg8knoH2tnJPAgMBAAECgYAculPsEv+K1jtds/dtkm3/1sp3EHwZGsCKh2V73wfCKYPTmyrzaHCmOD9g/Jra0e6ZlgF14fLwwuW+2IbcorLVuOFg6WRmlLm21jb+IDIvdfsrkccH17ukuGjxT548QVmS/6axv/rtmaBqI8YvlQq4BSl+vvcacUMQnRmy4dJMWQJBAMR9l2zQjDYdUoahskMInpcCgDxGTbKNpyNiIBvArBG0cLghrOlQYC7NF8j/87HWRZxAeRf6Kls4KRxjMhrl+z0CQQCrYPlcs7mAqrmIsdjENAcrnnA7WEO9Zq/1fn2wnWHBIFS4UUmvTenytLnsGtTouJeznzK+vCrzF3mtQjvsrWx7AkBIXqGJGH6r57zfjWqkueX/ZJJqoNI5M2cd5yRAVISLuNPTXcPb4xip5CwggfT1yR+2XyC6rg8vrc2mgPqRYadZAkBE/R6k0LymLRPPETjfksooJvmrChcK0aGXw7m5NUG6ytcP87kj1suMpnAJuatnm5eF+VomKf1oKlUTCAyzdAStAkEAgyqG6NpVX9x39UpEZ5/Nk8NxUQdZxFVGT0vaFPE1qWUWriDUwSQx02N7LAUYhjlxuUtWjmms+IfiJV7DAvTOZg==&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>解密算法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rsaDecrypt</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Crypto</span>.<span class="title function_">rsaDecrypt</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> licenseInfo = <span class="title class_">Base64</span>.<span class="title function_">decode</span>(<span class="title function_">readFile</span>(<span class="string">&quot;je.license&quot;</span>)).<span class="title function_">toJSON</span>();</span><br><span class="line"><span class="keyword">const</span> rsaPrivateKey = <span class="title class_">Crypto</span>.<span class="title function_">genRSAPrivateKey</span>(licenseInfo.<span class="property">d</span>);</span><br><span class="line"><span class="keyword">const</span> aesKey = <span class="title class_">Crypto</span>.<span class="title function_">aesKey</span>(<span class="title function_">rsaDecrypt</span>(licenseInfo.<span class="property">b</span>));</span><br><span class="line"><span class="keyword">const</span> aesIV = <span class="title class_">Crypto</span>.<span class="title function_">aesIV</span>(<span class="title function_">rsaDecrypt</span>(licenseInfo.<span class="property">a</span>));</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Crypto</span>.<span class="title function_">aesDecrpyt</span>(aesKey,aesIV,licenseInfo.<span class="property">c</span>);</span><br></pre></td></tr></table></figure><p>解密后：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;技术支持：凯特伟业&quot;</span><span class="punctuation">,</span><span class="comment">//topInfo</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JEPAAS快速开发平台系统加载中...&quot;</span><span class="punctuation">,</span><span class="comment">//loadingInfo</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京凯特伟业提供技术支持 电话：400-0999-235&quot;</span><span class="punctuation">,</span> <span class="comment">//companyInfo</span></span><br><span class="line"><span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span><span class="comment">//tableNum</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span><span class="comment">//funNum</span></span><br><span class="line"><span class="attr">&quot;h&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span><span class="comment">//proceeNum</span></span><br><span class="line"><span class="attr">&quot;i&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-1&quot;</span><span class="punctuation">,</span><span class="comment">//</span></span><br><span class="line"><span class="attr">&quot;j&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-08-19 16:13:33&quot;</span><span class="punctuation">,</span><span class="comment">//createdTime</span></span><br><span class="line"><span class="attr">&quot;k&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://jepaas.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;m&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v2&quot;</span><span class="punctuation">,</span><span class="comment">//pluginVersion</span></span><br><span class="line"><span class="attr">&quot;n&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-05-10 17:39:14&quot;</span><span class="punctuation">,</span><span class="comment">//verifyTime</span></span><br><span class="line"><span class="attr">&quot;o&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1888-6430-1121-8706&quot;</span><span class="punctuation">,</span><span class="comment">//verifyUniqueCode</span></span><br><span class="line"><span class="attr">&quot;q&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span><span class="comment">//userNum</span></span><br><span class="line"><span class="attr">&quot;r&quot;</span><span class="punctuation">:</span> <span class="string">&quot;刘旭&quot;</span><span class="punctuation">,</span><span class="comment">//applicant</span></span><br><span class="line"><span class="attr">&quot;t&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span><span class="comment">//auth</span></span><br><span class="line"><span class="attr">&quot;v&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="comment">//</span></span><br><span class="line"><span class="attr">&quot;w&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-07-20 12:04:36&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;x&quot;</span><span class="punctuation">:</span> <span class="string">&quot;develop&quot;</span><span class="punctuation">,</span><span class="comment">//licenseType</span></span><br><span class="line"><span class="attr">&quot;y&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span><span class="comment">//machineNum</span></span><br><span class="line"><span class="attr">&quot;z&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="comment">//licenseVersion</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;obj&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;userNum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;companyInfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京凯特伟业提供技术支持 电话：400-0999-235&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;machineNum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;50&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;loadInfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JEPAAS快速开发平台系统加载中...&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;topInfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;技术支持：凯特伟业&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;verifyTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-12-31 17:49:02&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;applicant&quot;</span><span class="punctuation">:</span> <span class="string">&quot;刘旭&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;licenseType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;develop&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;creatTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-08-19 16:13:33&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;funNum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tableNum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;licenseVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;verifyUniqueCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6468-3423-1654-5339&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;processNum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>plugin.lock解码前</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;QruKKDuCwU9+ohAcw/NbZO47YTsOngaMrosHHOH9QDz3AwuQCsFfZ0K4FdyNIIcNfAygRNku4bts8AkOt1TLsT/vewr5SM2alkexCw101WedAQatYtMZt44FeqpBqWh3zSRcB7FAxySvS6Q+dEHtWsCoWxlW/xvNew+TASe9+OU=&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RHGz4esnrLvFLyMsRm2tVDNuIvGMAPE8X9vhQ0XhqI7sU/dCJ5XRf+7W5wuw5qLgzVmR6R8K6dFAgZn/oU5sHA3d5VUs3bSnq+BCNZoMBU1RQDhEixzzf9wfLuLtsrLX/gc5m4oK8+gu3PEZLuXgdHyV/5tLo0pOFVrEMPr9Btk=&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eKeHEjHkOZ25Du5Y3m/VJXF1/efUXYF8+rRRr0Pmp3zOb9AObNIi4sg+RHf79sxZX05KtXzNFtATINUpLCGy0mEOxiGucKxp7TgM0yapaBpFNXk4FCcyOdtDSatV+iTA4qmqYG2bfflVwoGoSRR7SXH6Lmes9mbqCWjE60e+q5c5emqwKfHMx+njU0MX9HXW5J7ZTOO9EcqIQz0iYSVqyIZhXJTZBf5z2z5gRjXEk6PTlZ7aAkIX8al2R1qTIW+20riMkzOVAw0JQ6rqnA8OXoqPQN9oSVrUxOQTgXOIZ3qTzWo7anDI2RnPPi5WnTJqeqN/4c0S8i7x387pm9w0Gzl20p6vx1h/jDfK3ciZpDvkW4Y6/FmtSApgmzM8+eMQtlEF/2r5wtRPlxPUWGHXqVVdAERcIcI6f6rqz2gxbve9Qo8ZwTU7CPDquVrj5c11n66uNI3WxqjrHKwo7bwidwYzuLCotOgYU+ty7CQgHiyIWsil4oQAgx+RbBY4m2I80VGus3sK7AM9rrMfEAb8E6w6BcGZdDgS0GqtRQAoGwiO+CBXH9O6s9tpbLLhqJe30KE5GUo6sJWHDHyyMOEP6TEnDMGCcpJKn3jKGXiNVuC1xmjUMUaA1C5uKMSC4aocNswfZwH/uTAqUcrl8ANg5cLdHiDGuNFDL92H+uYHTQ8yFoc5GQ237j7fQOUgagJysZX5/28IBE6JHmXklJbSItSgx48e4C8mFJ/12/cWc5H65kqEBK58UsJJbMrqh3LU7Mx2lZ/CYFuSqdeWm6MkxBNleNYA1W+94ar2MC5TSkWV4M5pQnuJbTg/HvWMUrr4XNe5nzwK5y9vr/xFXPAM3jbMzUGBemYRm1MoaToSp1BUaIy6FkTxXXsZqcUOMEl/bUoMoQ/9gsliDvtfRKlcUlE/T1BQWdbf0n4H8BaFuXJGFchu1VnManYIKEMmwmllbLLdEbUwBVvHSE0VcZvQVDa5CMGhLa9fMIh6hwMN07ntt6ZovzdNkezQazHF0Uplnlp2Ya198/K4g7dODbS2DmG+MwdvrMddLPkHPvki0auHAXMwbeOymrrKsi/Uom4leyZJU2B38GI1Q29Vv24FGVPbDJOKBGEpxOqdZh/4xVevuTdg0s2dxX0J90XgjMAz76IZxHrenzoxBTnOWm/1A8jYuyZglZQEmUWqp9rYn4fqszivQnJvjIG+SSiWwHkN5J00PXhFqNgJuW3i4pFZCAHzrvzbngys2P/MzhD5ku5sp9/2VewysrWaS6IoHj+alK+8ss2aNc8zKG4o4cFxt/2SG9LAKiUfbaqbe5gI1MYOaObPVsr9C8sJpYiEEmpg8VfN4te2CuKAke+fqIFnthFdQi3kMmGD6x5WqCOrPbaLRsFkpukQF51NKqDsr/5K5jkjTpkmy9mVe8lImQBCSA+erXC/tCc0vioiM78MaNtggIxNb37zhmywqS69qLE0kb9aZIHR0vnXZPkFDeszY0jkv77WwtH0j+p4xTm+mxtH4n948uPCz6tpYW1MHjH6nkxaihZfPg8IAnxIgk0FoyWNPmj/u5e4JHG//fSfdtbb1/ejGy0srjLx94DnlYwJ01H1zF1OPFe44Y+gB9+jrJZjfuCq4p5hfYaKhku/d8yViriDYBPNOEXjWitreUoaYqawWEwViWSCkaZDa0oHjM2HtlmTsm+yzQyQA0p6tr2z1exY/6iIwMDMe3nJfaD74E27b46L0SnUqsJpBjEdMsx++GrSZhGF8ogdPxFuhmcomDq3KKSjK9v2EJS+Ujo0Wre3BvCQzvf0MQOpkPGxzPZ/7YKOgnrjl1VVMAQzugIQi2dFcFggxhMWGsmWXNJ+dNWP7+AmFmrpyOu10dTNdZCmd/DT8mFVaVc8itSYXQfRmfE0U4O+URCjFhIHFMc3V8VV5ko3oTOKMSGSdQ62caum19FBXVVeHIqLzAt3IMAwAVkWDIc7Qa1U4UEbIX1vCRbColH64EIxTddO4gmzgd8wiyFTRb2fmLL3a+A8xT3JhcNzpHR9rwZNRfqkpXxv5RYXeFsPgkqeQr+6YeW+HVs9sPUOyo2P7FpLOgJ+U/Rm6zDAGfWAZYBxiIqF7TF6SLVLbR3QAAYiOEHp1j2H6ZcNOm7PPWqDo/2hanpSq4b8U/YDrK/qYBIoslThztQzZL5qoOPfaJ70MK6BA0LNHYZm33ivS34XCIK3V/tC/BPnCr8/SFGCg43IEJjiVSito2F23wzQVcYEkNuWiCyIfoxoAZktUvVZr+LADmNFBM/oFzQlpzT3nOzYCskxDN1/PLiuFUfrlHVUARuXL4ADKQEXLqBUHp+LlbeoeaD8/mVUrzN7D/qH10ziY0JUcdGVs889l+rI1mOBq4Sa89d3tsDXmvZnwQJRz9M6Zb1Qya0xdA1+oI5zgQKvzGSyemUnIJbQAM2s9mTF2ZdLhWGbZAP4e8HM1LsgckVBXeBUM7CdHPJf6TKX/cAdRJ0K9lI4ac4d/gkoTbneQD7uWYQ0THrjHetPz72opKDdS1Vg694B2beWU5oujTm2VSxSjjsvnDOnuC0W+I5wUb+Zzlo+IIpvGMpesnjcI2xWy5mevzi11JLOMG+0jYc9GyYfpFwznWwIYVYxPpAcsGaGAOyu4R38bjOnoNd6shoCHE2svUSjg4YmnGHA6gwDz8oyqrXPH+N73y/1aWj9SnCR7UO9GMVPNhyeBq+k7Gr8zsWJ/oQSulTsVekB93d0Psn+qyMrGImQPEuzpA/dTsAGFUdJLaVtQfEPbQvG/OO2J3n82hk0U74FrEwbu8qcDCy0NE9hMEzIjxZQ5zzyE3gHv/OFNRpmprR4mj4SDyX2bSDCyF/i7Zim1S2pKfNhxnuD2GPUiTaad7BRgYMbbweCYQax21yDARKFJPTYkVl8UD7zPb+mvyOKAlRDkEKLSUrXbqvuvVvVE8KzKvqqZ5sEigGXaa26tejm0VN32WiCKrvMtUC+NN3mA5Ayuue9ehV8b95bFiEDn/rBPXih1VWSIXs5D92INFv1KLqqWCMtcCrP0Nrx53RZeX7GqUzhHUP5crfgG5xdrUnjVblnGIpbrN8qwoGLxCqdb4Qp/y0lDYQdgBkgrBxAsuL7ed1njZkgde+dKTvAeuj4Ld2d5TvScSeXHCaoP5pd6JpJazhc247DQ/RYWM8hU8WhtE2U7tyGlHjOU8jFJPeZEMJ30hW7pDugBqpUk3A/aiwe89R9/lLq21K4AT8F82eClzXvi41XP0EPVDTo+lQC9nfEOLDSw/slXcMstTIW8AW59wG1n6P3SWo7ozA3VWTCniRavBaqdENv3vwUeZIkwCDBtq4sgI9JuuyhgDxcHpCdwZQJPS8/dLZXdasAzrmm9R3Mja78DHNWYwKW7EX+Lq1mqOWLrGQaoFo88hrW0TiR9+AOAB3E9+j481WX8mlQkX1SnrpXjzcRragjxwoqcGYVJ4Tm0GDqXKsWk5Z9RA56BAX79KcDThRututNypfd7S8BbOtSULkoD8NEb+830VoVUSSNMwKMBjsIbxAw/uYw9KnqIzpMxzA+oH1QloUCrSaUF1u3FkMQlQtMtSbILdOPUzZfU2byLQPUkfwzMty5ZONqpPdibNG9znNk96pqH5mSkUERnmL91pT0kgsoYYeJpnFMfRAuhGe77KwgvDtXKao5MTfNMzE9woJ4KOxXKUNogv7aWf4L7JTGZejp8Zt/wtRn77kC18tgcHeKe55VX2vpiMWBGEFk+DJOIRUp+ZQt3fFK171SoLdSRBvARmBAtFR+N1m98yT7t1otKz9Jj0OW3fSrGpQhsaM8Y7nePDqZ2Q5lAOgIIH+j/l9KOGMIm3qeCg7gt0zrpha/yZmmINgvxQ9TRh9x8GY2lWTJ2JrZe2IO5mTDhTuJFfRacCDyLriApAGsfwb2TTZxwyGGW+J9c4p6F2H9fwIKyXGTVnNMFtmTo4TruoNMIDyDhbHPozDDc+R1aGRJnE6p8M1QXjN1VVUP2d5aPmb3zeESN2263GJUzdROsLAe/2RSL8Es/Hb86hGX7iho2RGFWdhgbByX2+92GO6HfGaFo2oG1Ei1Z0eYxnLaOr7H3XVtzTtsGv37+rrMb08vC5BCSfXl7TYyqZAVD5HRsbubhVPYljVVDmjK/DnJf0KC24J90p6M+9OljiHIkX6ZJ1+orPjCPMjioF8iV+cPaYq4IyBpyY5kOCuwzCRK/dbglfaPIFEIZ0StMc7tRsBfyhcUaLGG6XohsjRPOzPo6L6CSAcA9Q/CyO4Mf8nExPZmPDNA0gAQiLxkaddoXZU4Q3OzzFNYpjos+VG0RhLVb2G5wG03BFEqKZ5MLdW6OZouLKVnSh41lObkc6jv4XD//s5/ZwWT264GVCLC+nHXXvid7SlcqdjvvH6yx043Ss5aQxyV/K4uC+Pz2iC4h0/mekSCSk0hhVhrdAIpgIZYf/rH4RH6EnofeJ+H5OIWDmZ5EQa/Qkp8ZdvIyqtiAXTR4Jvt41zHzVyQ6HK1i9fCXbHwxC9rVjIrQjJouZbdqtISYu8As3xKVA0BugSPTR/QU55jUcQNIT6G9fd+YNI4+U/6oiGCu4q8vuj3CIQi20hlYj7aNOwhX30EPZ8t1BDR7zTOMLpCMb9pPXACTCo0I+lMyYG7H0qJ58/T9fcB+9Qp+KCovXHZ3S5T63z+iet3vuPOJMCySLolN8l5xRQIEvKoqF0UdsRgw493SvIV8LFxjKG38czm1evswDoiXWrpcfhQE6IW+SAk07tZZFCGr59G47Z/BL2oYOc5Agg+gwX9cQTbwqdUIk31u1GNPqlySUU96zx1vNrUj+M174zyY+0sfUxYbDEQl9FLN48/ox7igy8onnd+3qgWuIdtEx3ZpmhTRnN53TrTbDtH7bktNMcEij7ef2D/Fs+xdf3cu6z5n0DjCgEyBRfibfBDAlpGjccTldf8qlYlFa+vWKaqg1LccCtPOSswd1n6gcaAXdDqBG33PXxqQOdQRddRFK8l7wve8aJTt5XZ5XhZmpnmHLN4puJjyeeERbzLb55Hqb5fwmpMWngOB6Y+vKIuPS+cpJcwZ01tYh2RyWKdpw4e5oATuCXu6J/ywh+fn0JusFcD885UiyZz4xMpn2rKKak2YTUlkAF/5HoOJ3oEwbo9A4m/fbDKMaBqJSBssjlmj/XtnsUpLrYMmHxcFQb1DlO+eihMjomOHUIRxCVSjbZ7h3tyriE9I41DY2e38S+nTElF54ia7Vjw2iISLdnYmgEtKGy5GBshgALsHrRQsBN6Emt1/HHKbQIg4pncbpF18vMCuBSE8Qr27Rii/NOmuBMsBkyJJ+Zhwx+oikkXRqdeZ/XbAtb3P2btXDoAh2VdWnAJVaZIIApQuTXMuujiGPaLNX20n7rZdwYWuqNFd4k7EC2kKSDp0K3fzCJY3DKNn0r/XqeF93hJfaR5Uuait3vzUWLvfNF6y6nPlccky7wnilX6hFMjzNGRq9N3r2F748iPQ8RFAUyVS6PFFrcec+ZcgKZC9xDrhsOICYwjL1x1PxFqhc804SKL4dEIOoemQR564UsUP/ckvvQldre1IAYlgZR+pxkztDxoxezSCWyacP6N6csxQOIrAo4ihQOpsjtLoDnz3u4/KF1YEYo9yOChXZx8kMlXRAKtU5hsj9IGcgGVb4G/5ivNCXchle07T0AE31m4nLLHF3vEiF/M+OTOx3/X3Z/Mm2fp9Ta+cyKt8Nbz07I5kXE9E/XwGMSB01Wf30txHjVY3hsxJmMs+qt1UIZBIQPsNIiGKlIChFvQGHbWWcRRfj8+I/Cp66HMwDpJO5F56d4+9SKeVucnnujqcDB1Aoaor3IDW2xzl5hTQyyYwqm0lhs5aD/I8bm7YXZWjhjV9a2s0eSmVYghVCuAslB76Q0jZLQaiD1vIvXG6UZ6bIOeunV3AeECdHeeQbHq2C5zX/vg8q217FvHRY7nREQRJtl9MOWKyhNe2UdUwslGBqIPEvSs/+RRhhfphLDlCyX18HbGS+57BzGMfblwLZo+ZoQM+S0DG/VMiArEHSx868Y4IV+sBXOi/M8jWrq8JkCkgNq+/DCQx/60NXwdXBO/dUfiPst1g7XxiG/zSwim2R6iYGD8befjiQF5KoOFYBh2Ys0/V3d9nPjfqafc41I4NqX4FbIS/qxFi4qOcsGSXKTPh/WnRarHIyBI/G/8dn9+6YwhslLlkzT2E6yX1UaNMd8h3L3kFM27HlCiVA3j0UV8z6QST1I6G9gDi7eYqqQvMiybGfXxELj6Bl7FItlEfVjZrzfLJqYcdeTgIytlVTyuHsk1ebiN1SSc1Z0TuoOELOjUpfiYl4re6XnjYDtL9tPmdmb2AsR7Zem7GDWGr7Pevahne0d4uRG/Gu7PYpXq+CuHADrW5iuG+S+PFCzVAB/qpsKknI3uDQAH2qxSK8GC5yj70mpb0gsdKQSlWnmpP5q22fiIhTcxCrT+TQXRz2Nll/6V+Mdir7iBhcNoNwCecOwbd5Vt1ZWzwzuQl50pK06wYl4c5Vkx9d7lel5zUu7P/aUvhjxVSCyYPGGo0INoQ/p8dG9Om9gdo9f/CVrMHHmvBkAseToUJlw39StjYJ4dnd6BdqhDsGhdl9N+tljiOgqX4H/jEDnmu67Z3hfUyT4OgCvol3cM/5hMRthERn7855nfu5bLEyrmNBGU39vd3SXH+pjKC7Iz&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAI2aNFu1vfjI7Iy+yQVDFFvAteIBMTGCUKj9BPER444SoQ2tfclNgsmEWwtZmqMb6rbw8s9k02NqDX4UMjuC5uQsqKCEE9i9/aHBlbRiPt2ANmvPxfTCml5Kh1sQkaUZo6fRmAUtQpuDSDl2CYrXe5w8Is/MEScVA2oFiAioydS5AgMBAAECgYBvFvZSqK9kOYVTGe4tAaY8IWDP8O1+EOVk3jN9SPKEKFtPlrdjMTsVC5A9xEtMAX/PjBKB4HDywmXZbtDF3XlziAtWgcvTE7jdjwKVXHngMWFKFndLzwVqnAVBFEhtX+HSOWnewxg3w0FHFhdsJeluwGoXLuJJZPiw6d8zoJc/fQJBAMbgDzeJSK2jSz8a0LFmXAQEJs536PDIrlKxxF3qnh7HMHy0PzkBFwNdyyrpV5bIwSbq0vIG8FMIzebRemfMRxsCQQC2Rq9qtoD9TFXX1f1xPyGqjeW/D6WWWkkeKLlcEEMXSS3ZV9M2r+PKyocxKtB+6hxGX4I94NihtskExDiGX+y7AkBp7U/Nmd7PNanPm93Kj6W1MezljjLRhWJsg2j/SQcdh6UI1wzRtQXn8h5T5eOUWaufqfXfmdiJsafSKINVJBY/AkAmtxzLLbh4FJ6nGWybgS1FbJ4/1rL1HHgrT7sPMuUNLR3v7BeQpgtcJ2hPqShfzJn02JRxUDCzKH/J42OeJwHBAkAOP5F3BKXtk1qlMxmuTbDQqTPiFEIfQ5/7BI3oWJzQUBJXfL2bKyRw0Kv4TiZCaduOjqUa6WSY5oCkrGLxNTkJ&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>解密后</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;p&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_THIRDSOURCE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CORE_THIRDSOURCE\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin7.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_INSTANT_MESSAGE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FRONTEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;DOM\&quot;,\&quot;type\&quot;:\&quot;IM\&quot;,\&quot;info\&quot;:\&quot;.im-content .im-text\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin5.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_MESSAGE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FRONTEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CORE_PUSH_TEMPLATE\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin27.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_INDUSTRY&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FRONTEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CORE_INDUSTRY\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;VIEW\&quot;,\&quot;info\&quot;:\&quot;JE.sys.svg.view.MainView\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin22.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE-CORE-DESKTOP&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FRONTEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_DESKTOP_UPGRADE\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin18.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_SYS_TIMEDTASK&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_SYS_TIMEDTASK\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin6.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_PERMLIST&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;IDDT\&quot;,\&quot;info\&quot;:\&quot;JE_ADMINPERM,JE.sys.rbac.view.perm.MainView\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin8.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_EXCELGROUP&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CORE_EXCELGROUP\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin13.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE-CORE-THIRD&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CP_APP\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CP_DEPT\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CP_DEPTUSER\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_FS_DEPT\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_FS_DEPTUSER\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_DD_DEPT\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_DD_DEPTUSER\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_SERVER_DETAIL\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin19.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_DATAFLOW&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CONFIG&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;FUNC\&quot;,\&quot;type\&quot;:\&quot;CONFIG\&quot;,\&quot;info\&quot;:\&quot;JE_DataflowConfig\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;VIEW\&quot;,\&quot;info\&quot;:\&quot;JE.sys.funccfg.view.data.DataFlowView\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin17.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CHINA_JINCANG&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BACKEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;className\&quot;:\&quot;\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cplugin2.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_COMMON_PERM&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;IDDT\&quot;,\&quot;info\&quot;:\&quot;JE_PUBLICPERM,JE.sys.rbac.view.public.MainView\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin9.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_NEWS&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FRONTEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;VIEW\&quot;,\&quot;info\&quot;:\&quot;PRO.portal.View\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin1.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_DISK&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FRONTEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;IDDT\&quot;,\&quot;info\&quot;:\&quot;JE_SYS_CLOUDFILE,PRO.cloud.View\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin16.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_MANAGERPLUGIN&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;IDDT\&quot;,\&quot;info\&quot;:\&quot;JE_RBAC_CJGL,JE.sys.rbac.view.cjgl.MainView\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin14.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_REPORT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;IDDT\&quot;,\&quot;info\&quot;:\&quot;JE_CORE_CHARTS,JE.sys.chart.view.MainView\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;VIEW\&quot;,\&quot;info\&quot;:\&quot;JE.core.view.ChartView\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;VIEW\&quot;,\&quot;info\&quot;:\&quot;JE.core.view.ReportView\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin11.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CHINA_DAMENG&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BACKEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;className\&quot;:\&quot;\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cplugin3.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_IOT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BACKEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_WLW_KHD\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_WLW_EQUIPMENT\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin24.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_JEAPPH5&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FRONTEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin26.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_BUSFLOW&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;SYSZ_FLOWINFO\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin10.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_DATASOURCE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CORE_DATASOURCE\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin3.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_UPPACKAGE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CORE_UPPLATFORM\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CORE_UPPACKAGE\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin2.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CHINA_SHENTONG&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BACKEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;className\&quot;:\&quot;\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cplugin1.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_PROTAL&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FUNC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_CORE_PROTAL\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;VIEW\&quot;,\&quot;info\&quot;:\&quot;JE.sys.portal.view.MainView\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;VIEW\&quot;,\&quot;info\&quot;:\&quot;JE.core.view.PortalView\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;VIEW\&quot;,\&quot;info\&quot;:\&quot;JE.core.view.PortalMenuView\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin15.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_TIDB&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BACKEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin23.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_FUNCCONFIG_DATAPERM&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CONFIG&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;FUNC\&quot;,\&quot;type\&quot;:\&quot;CONFIG\&quot;,\&quot;info\&quot;:\&quot;JE_DataConfig\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;VIEW\&quot;,\&quot;info\&quot;:\&quot;JE.sys.funccfg.view.power.PowerView\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin12.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JE_CORE_PHONE&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FRONTEND&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;f&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;IDDT\&quot;,\&quot;info\&quot;:\&quot;JE_PHONE_APP,JE.sys.phone.view.ApkView,JE.sys.phone.controller.MainController\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_PHONE_UPGRADE\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_PHONE_FUNC\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_PHONE_PLUGIN\&quot;&#125;,&#123;\&quot;model\&quot;:\&quot;MENU\&quot;,\&quot;type\&quot;:\&quot;MT\&quot;,\&quot;info\&quot;:\&quot;JE_PHONE_LOGGER\&quot;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plugin4.key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v7.2.7&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring boot日志配置.</title>
      <link href="/2022/04/29/spring%20boot%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/04/29/spring%20boot%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">logs/etc-service/etc-service.log</span> <span class="comment">#日志文件名称</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="string">50KB</span> <span class="comment">#单个日志文件最大大小</span></span><br><span class="line">    <span class="attr">max-history:</span> <span class="number">7</span> <span class="comment">#日志归档保留天数</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">org.hibernate.type.descriptor.sql.BasicBinder:</span> <span class="string">trace</span></span><br><span class="line">    <span class="attr">com.netflix.eureka:</span> <span class="string">OFF</span></span><br><span class="line">    <span class="attr">com.netflix.discovery:</span> <span class="string">OFF</span></span><br><span class="line">    <span class="attr">org.springframework.cloud.config.client.ConfigServicePropertySourceLocator:</span> <span class="string">WARN</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="comment">#rolling-file-name: $&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.log #滚动日志文件名称pattern,当文件已gz,zip结尾时，日志文件会被压缩</span></span><br><span class="line">    <span class="attr">rolling-file-name:</span> <span class="string">logs/etc-service/%d&#123;yyyy-MM-dd,aux&#125;/etc-service.%d&#123;yyyy-MM-dd&#125;.%i.log</span> <span class="comment">#滚动日志文件名称pattern,当文件已gz,zip结尾时，日志文件会被压缩</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jol工具的使用</title>
      <link href="/2022/02/21/jol%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/02/21/jol%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="JOL"><a href="#JOL" class="headerlink" title="JOL"></a>JOL</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://openjdk.java.net/projects/code-tools/jol/">JOL(Java Object Layout)</a>是用于分析 JVM 中对象布局方案的微型工具箱。这些工具大量使用 Unsafe、JVMTI 和 Serviceability Agent (SA) 来解码实际的 对象布局、占用空间和引用。这使得JOL比其他依赖堆转储、规范假设等的工具更准确。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleObject</span> &#123;</span><br><span class="line">    <span class="comment">//primitive type</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> bl;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">short</span> s;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> f;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> d;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> l;</span><br><span class="line">    <span class="comment">//reference type</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">private</span> Object [] objArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 打印class布局</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrintClassLayout</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">ClassLayout</span> <span class="variable">classLayout</span> <span class="operator">=</span> ClassLayout.parseClass(SimpleObject.class);</span><br><span class="line">     System.out.println(classLayout.toPrintable());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 打印对象实例布局</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrintObjectLayout</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">SimpleObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleObject</span>();</span><br><span class="line">     System.out.println(ClassLayout.parseInstance(obj).toPrintable());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="关闭指针压缩"><a href="#关闭指针压缩" class="headerlink" title="关闭指针压缩"></a>关闭指针压缩</h3><p>VM参数：<code>-XX:-UseCompressedOops</code></p><h4 id="Class-Layout"><a href="#Class-Layout" class="headerlink" title="Class Layout"></a>Class Layout</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SimpleObject object internals:</span><br><span class="line">OFF  SZ                 TYPE DESCRIPTION               VALUE</span><br><span class="line">  0   8                      (object header: mark)     N/A</span><br><span class="line">  8   8                      (object header: class)    N/A</span><br><span class="line"> 16   8               double SimpleObject.d            N/A</span><br><span class="line"> 24   8                 long SimpleObject.l            N/A</span><br><span class="line"> 32   4                  int SimpleObject.a            N/A</span><br><span class="line"> 36   4                float SimpleObject.f            N/A</span><br><span class="line"> 40   2                short SimpleObject.s            N/A</span><br><span class="line"> 42   2                 char SimpleObject.c            N/A</span><br><span class="line"> 44   1                 byte SimpleObject.b            N/A</span><br><span class="line"> 45   1              boolean SimpleObject.bl           N/A</span><br><span class="line"> 46   2                      (alignment/padding gap)   </span><br><span class="line"> 48   8     java.lang.Object SimpleObject.obj          N/A</span><br><span class="line"> 56   8   java.lang.Object[] SimpleObject.objArray     N/A</span><br><span class="line">Instance size: 64 bytes</span><br><span class="line">Space losses: 2 bytes internal + 0 bytes external = 2 bytes total</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Object-Layout"><a href="#Object-Layout" class="headerlink" title="Object Layout"></a>Object Layout</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SimpleObject object internals:</span><br><span class="line">OFF  SZ                 TYPE DESCRIPTION               VALUE</span><br><span class="line">  0   8                      (object header: mark)     0x0000000000000001 (non-biasable; age: 0)</span><br><span class="line">  8   8                      (object header: class)    0x000000001c123380</span><br><span class="line"> 16   8               double SimpleObject.d            0.0</span><br><span class="line"> 24   8                 long SimpleObject.l            0</span><br><span class="line"> 32   4                  int SimpleObject.a            0</span><br><span class="line"> 36   4                float SimpleObject.f            0.0</span><br><span class="line"> 40   2                short SimpleObject.s            0</span><br><span class="line"> 42   2                 char SimpleObject.c             </span><br><span class="line"> 44   1                 byte SimpleObject.b            0</span><br><span class="line"> 45   1              boolean SimpleObject.bl           false</span><br><span class="line"> 46   2                      (alignment/padding gap)   </span><br><span class="line"> 48   8     java.lang.Object SimpleObject.obj          null</span><br><span class="line"> 56   8   java.lang.Object[] SimpleObject.objArray     null</span><br><span class="line">Instance size: 64 bytes</span><br><span class="line">Space losses: 2 bytes internal + 0 bytes external = 2 bytes total</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="开启指针压缩"><a href="#开启指针压缩" class="headerlink" title="开启指针压缩"></a>开启指针压缩</h3><p>默认是开启的</p><p>VM参数:<code>-XX:+UseCompressedOops</code></p><p>uid:8个字节<br>timpstamp:8个字节<br>Map每个Node大小<br>4+8+8+4<br>hash(4) + key(8) + value(8) +next(4)<br>每个用户占用16个字节</p><h4 id="Class-Layout-1"><a href="#Class-Layout-1" class="headerlink" title="Class Layout"></a>Class Layout</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SimpleObject object internals:</span><br><span class="line">OFF  SZ                 TYPE DESCRIPTION               VALUE</span><br><span class="line">  0   8                      (object header: mark)     N/A</span><br><span class="line">  8   4                      (object header: class)    N/A</span><br><span class="line"> 12   4                  int SimpleObject.a            N/A</span><br><span class="line"> 16   8               double SimpleObject.d            N/A</span><br><span class="line"> 24   8                 long SimpleObject.l            N/A</span><br><span class="line"> 32   4                float SimpleObject.f            N/A</span><br><span class="line"> 36   2                short SimpleObject.s            N/A</span><br><span class="line"> 38   2                 char SimpleObject.c            N/A</span><br><span class="line"> 40   1                 byte SimpleObject.b            N/A</span><br><span class="line"> 41   1              boolean SimpleObject.bl           N/A</span><br><span class="line"> 42   2                      (alignment/padding gap)   </span><br><span class="line"> 44   4     java.lang.Object SimpleObject.obj          N/A</span><br><span class="line"> 48   4   java.lang.Object[] SimpleObject.objArray     N/A</span><br><span class="line"> 52   4                      (object alignment gap)    </span><br><span class="line">Instance size: 56 bytes</span><br><span class="line">Space losses: 2 bytes internal + 4 bytes external = 6 bytes total</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Object-Layout-1"><a href="#Object-Layout-1" class="headerlink" title="Object Layout"></a>Object Layout</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SimpleObject object internals:</span><br><span class="line">OFF  SZ                 TYPE DESCRIPTION               VALUE</span><br><span class="line">  0   8                      (object header: mark)     0x0000000000000001 (non-biasable; age: 0)</span><br><span class="line">  8   4                      (object header: class)    0xf800c105</span><br><span class="line"> 12   4                  int SimpleObject.a            0</span><br><span class="line"> 16   8               double SimpleObject.d            0.0</span><br><span class="line"> 24   8                 long SimpleObject.l            0</span><br><span class="line"> 32   4                float SimpleObject.f            0.0</span><br><span class="line"> 36   2                short SimpleObject.s            0</span><br><span class="line"> 38   2                 char SimpleObject.c             </span><br><span class="line"> 40   1                 byte SimpleObject.b            0</span><br><span class="line"> 41   1              boolean SimpleObject.bl           false</span><br><span class="line"> 42   2                      (alignment/padding gap)   </span><br><span class="line"> 44   4     java.lang.Object SimpleObject.obj          null</span><br><span class="line"> 48   4   java.lang.Object[] SimpleObject.objArray     null</span><br><span class="line"> 52   4                      (object alignment gap)    </span><br><span class="line">Instance size: 56 bytes</span><br><span class="line">Space losses: 2 bytes internal + 4 bytes external = 6 bytes total</span><br></pre></td></tr></table></figure><h3 id="指针压缩对结果的影响"><a href="#指针压缩对结果的影响" class="headerlink" title="指针压缩对结果的影响"></a>指针压缩对结果的影响</h3><p>以下都是基于<code>64bit</code>操作系统的测试结果</p><table><thead><tr><th></th><th>开启指针压缩</th><th>关闭指针压缩</th></tr></thead><tbody><tr><td>对象头</td><td>12byte</td><td>16byte</td></tr><tr><td>引用类型</td><td>4byte</td><td>8byte</td></tr></tbody></table><p><code>其他</code></p><p>对象的大小是<code>8</code>的倍数，如果不是<code>8</code>的倍数，jvm在创建对象分配内存时会<code>填充字节</code>用以<code>对齐</code></p><h3 id="JUC-lock与synchronized-差异"><a href="#JUC-lock与synchronized-差异" class="headerlink" title="JUC lock与synchronized 差异"></a>JUC lock与synchronized 差异</h3><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><pre><code>    // Thread State    // ReentrantLock.lock -&gt;  java.lang.Thread.State: WAITING (parking)    waiting on condition    // synchronized -&gt;  java.lang.Thread.State: BLOCKED (on object monitor) waiting for monitor entry    // get lock on sleep -&gt;  java.lang.Thread.State: TIMED_WAITING (sleeping)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库去重复数据最新或最小记录.</title>
      <link href="/2022/02/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%BB%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%E6%9C%80%E6%96%B0%E6%88%96%E6%9C%80%E5%B0%8F%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/02/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%BB%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%E6%9C%80%E6%96%B0%E6%88%96%E6%9C%80%E5%B0%8F%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="取最小记录"><a href="#取最小记录" class="headerlink" title="取最小记录"></a>取最小记录</h1><p>没有比它更小的记录，那么就是最小记录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select v1.id,v2.id from certification_version v1 left join certification_version v2 on v1.certification_id = v2.certification_id</span><br><span class="line">and v1.deleted = &#x27;f&#x27;</span><br><span class="line">and v2.created_time &lt; v1.created_time</span><br><span class="line">where 1=1</span><br><span class="line">--and v1.id =&#x27;d0196569-393d-4bb1-a843-7b058efca61d&#x27;</span><br><span class="line">and v2.id is null</span><br><span class="line">and v1.certification_id = &#x27;c1bb788b-cce3-4377-baae-53e4b4f589d8&#x27;</span><br></pre></td></tr></table></figure><h1 id="取最大记录"><a href="#取最大记录" class="headerlink" title="取最大记录"></a>取最大记录</h1><p>没有比它更新的记录，那么它就是最新记录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select v1.id,v2.id from certification_version v1 left join certification_version v2 on v1.certification_id = v2.certification_id</span><br><span class="line">and v1.deleted = &#x27;f&#x27;</span><br><span class="line">and v1.created_time &lt; v2.created_time</span><br><span class="line">where 1=1</span><br><span class="line">--and v1.id =&#x27;d0196569-393d-4bb1-a843-7b058efca61d&#x27;</span><br><span class="line">and v2.id is null</span><br><span class="line">and v1.certification_id = &#x27;c1bb788b-cce3-4377-baae-53e4b4f589d8&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring security tokenStore keys.</title>
      <link href="/2022/02/17/spring%20security%20tokenStore%20keys/"/>
      <url>/2022/02/17/spring%20security%20tokenStore%20keys/</url>
      
        <content type="html"><![CDATA[<h1 id="redis-token-store-key-specs"><a href="#redis-token-store-key-specs" class="headerlink" title="redis token store key specs"></a>redis token store key specs</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">access: </span><br><span class="line">  accessToken-&gt; OAuth2AccessToken</span><br><span class="line"></span><br><span class="line">auth:</span><br><span class="line"> accessToken -&gt; OAuth2Authentication</span><br><span class="line"></span><br><span class="line">auth_to_access:</span><br><span class="line">  md5(OAuth2Authentication -&gt; &#123;username=xxx,client_id=xxx,scope=xxx&#125;) -&gt; OAuth2AccessToken</span><br><span class="line"></span><br><span class="line">uname_to_access: Set</span><br><span class="line">  clientId +&quot;:&quot;+ username(phone) -&gt; OAuth2AccessToken</span><br><span class="line"></span><br><span class="line">client_id_to_access: Set</span><br><span class="line"> clientId -&gt; OAuth2AccessToken</span><br><span class="line"></span><br><span class="line">refresh_to_access:</span><br><span class="line">  refreshToken -&gt; OAuth2RefreshToken</span><br><span class="line"></span><br><span class="line">access_to_refresh:</span><br><span class="line">  accessToken -&gt; refreshToken</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令总结.</title>
      <link href="/2022/02/09/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2022/02/09/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="DOCKER"><a href="#DOCKER" class="headerlink" title="DOCKER"></a>DOCKER</h1><p>查看指定服务名的日志（只有一个服务实列）<br><code>docker service ps t_mserv_espare|grep Running|awk &#39;&#123;print $1&#125;&#39;|xargs docker service logs -f</code></p><p>构建镜像</p><p><code>docker build -t &lt;TAG_NAME&gt; &lt;Dockerfile_PATH&gt;</code></p><p>运行镜像</p><p><code>docker run -d -p 3000:3000/tcp -v /d:\\test:/home/test gettingg-started</code></p><p> <code>-d(etach)</code> 后台模式运行 <code>-p(ublish) &lt;hostPort&gt;:&lt;containerPort&gt;/&lt;protocol[tpc,udp...]&gt;</code> 端口映射</p><p><code>-v(olume)</code> 磁盘映射 <code>hostPath</code>:<code>containerPath</code></p><p>查看镜像列表</p><p><code>docker images</code></p><p>查看容器实例列表</p><p><code>docker ps</code> 或者 <code>docker container ls</code></p><p>查看实例中运行的程序的<code>STD_OUT</code>(标准输出)(eg:c语言中的<code>print/printf</code>,node:<code>console.log</code>,java:<code>System.out</code>…)</p><p><code>docker logs &lt;containerId&gt;</code></p><p>运行当前运行中容器中的命令</p><p><code> docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Options:</span><br><span class="line">  -d, --detach               Detached mode: run command in the background</span><br><span class="line">      --detach-keys string   Override the key sequence for detaching a</span><br><span class="line">                             container</span><br><span class="line">  -e, --env list             Set environment variables</span><br><span class="line">  -i, --interactive          Keep STDIN open even if not attached</span><br><span class="line">      --privileged           Give extended privileges to the command</span><br><span class="line">  -t, --tty                  Allocate a pseudo-TTY</span><br><span class="line">  -u, --user string          Username or UID (format:</span><br><span class="line">                             &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class="line">  -w, --workdir string       Working directory inside the container</span><br></pre></td></tr></table></figure><p>eg: <code>docker exec -it 12e /bin/sh</code></p><p>执行上述命令后会会自动连接到目标容易的终端</p><p>删除容器</p><p>&#96;docker rm -f <container_id></p><p>创建服务</p><p><code>docker service create [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p><p>强制重启服务</p><p><code>docker service update your_service_name --force</code></p><p>查看service的containerId</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for f in $(docker service ps -q t_mserv_base_mq);do docker inspect --format &#x27;&#123;&#123;.ServiceID&#125;&#125; &#123;&#123;.NodeID&#125;&#125; &#123;&#123;.Status.ContainerStatus.ContainerID&#125;&#125; &#123;&#123;.DesiredState&#125;&#125;&#x27; $f; done</span><br></pre></td></tr></table></figure><p>docker 容器可视化</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull dockersamples/visualizer:latest</span><br><span class="line">docker service create \</span><br><span class="line">--name=viz \</span><br><span class="line">--publish=12306:8080/tcp \</span><br><span class="line">--constraint=node.role==manager \</span><br><span class="line">--mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \</span><br><span class="line">dockersamples/visualizer:latest</span><br></pre></td></tr></table></figure><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="COPY-SRC-DEST"><a href="#COPY-SRC-DEST" class="headerlink" title="COPY SRC DEST"></a>COPY SRC DEST</h2><p>复制src文件到dest</p><h2 id="ADD-SRC-DEST"><a href="#ADD-SRC-DEST" class="headerlink" title="ADD SRC DEST"></a>ADD SRC DEST</h2><p>复制src文件到dest,如果src为压缩文件，怎复制和自动解压</p><h2 id="CMD-cmd-args…"><a href="#CMD-cmd-args…" class="headerlink" title="CMD cmd args…"></a>CMD cmd args…</h2><p>在<code>docker run</code> 时运行</p><h2 id="RUN-cmd-args…"><a href="#RUN-cmd-args…" class="headerlink" title="RUN cmd args…"></a>RUN cmd args…</h2><p>在<code>docker build</code>时运行，可能</p><p>HEX(NUM) -&gt; DECIMAL<br>int r&#x3D; (int)(NUM &#x2F; 10)*16 + NUM%10</p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p><code>docker service logs --help</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:  docker service logs [OPTIONS] SERVICE|TASK</span><br><span class="line"></span><br><span class="line">Fetch the logs of a service or task</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --no-resolve     Do not map IDs to Names in output</span><br><span class="line">      --no-task-ids    Do not include task IDs in output</span><br><span class="line">      --no-trunc       Do not truncate output</span><br><span class="line">      --raw            Do not neatly format logs</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>eg：</p><h2 id="查询日志通过服务名"><a href="#查询日志通过服务名" class="headerlink" title="查询日志通过服务名"></a>查询日志通过服务名</h2><p><code>docker service logs t_mserv_xgb_project --since 2022-04-22</code></p><h2 id="查询日志通过taskId"><a href="#查询日志通过taskId" class="headerlink" title="查询日志通过taskId"></a>查询日志通过taskId</h2><p>获取服务对应的taskId</p><p><code>docker service ps t_mserv_xgb_project</code></p><p>通过taskId获取日志输出 </p><p><code>docker service logs taskId --since 2022-04-22</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LOL资源文件路径说明.</title>
      <link href="/2021/10/26/LOL%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E8%AF%B4%E6%98%8E/"/>
      <url>/2021/10/26/LOL%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p><code>Globa.client.wad</code> 客户端资源<br><code>assets\ux\summonericons</code> 头像</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg m3u8合成mp4 Invalid data found when processing input.</title>
      <link href="/2021/06/23/ffmpeg%20m3u8%E5%90%88%E6%88%90mp4%20Invalid%20data%20found%20when%20processing%20input/"/>
      <url>/2021/06/23/ffmpeg%20m3u8%E5%90%88%E6%88%90mp4%20Invalid%20data%20found%20when%20processing%20input/</url>
      
        <content type="html"><![CDATA[<p>网上搜索了很多文章都没解决，只好自己动手排查</p><p>通过对比可以正常转换的m3u8文件，发现出现问题的文件里少了 <code>#EXTM3U</code></p><p>如果你遇到类似问题不妨检查下你的m3u8文件首行是不是<code>#EXTM3U</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 问题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate-validation.</title>
      <link href="/2021/05/27/hibernate-validation/"/>
      <url>/2021/05/27/hibernate-validation/</url>
      
        <content type="html"><![CDATA[<p><a href="https://users.cs.fiu.edu/~downeyt/webdev/Hibernate_Validator_Reference_Guide.htm">https://users.cs.fiu.edu/~downeyt/webdev/Hibernate_Validator_Reference_Guide.htm</a></p><p><a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-method-validation-prerequisite-relaxation">https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-method-validation-prerequisite-relaxation</a><br><a href="https://my.oschina.net/u/4390157/blog/3476201">https://my.oschina.net/u/4390157/blog/3476201</a><br><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-initbinder">https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-initbinder</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">validation-config</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://jboss.org/xml/ns/javax/validation/configuration&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://jboss.org/xml/ns/javax/validation/configuration validation-configuration-1.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-provider</span>&gt;</span>org.hibernate.validator.HibernateValidator<span class="tag">&lt;/<span class="name">default-provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.validator.allow_parameter_constraint_override&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.validator.allow_multiple_cascaded_validation_on_result&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.validator.allow_parallel_method_parameter_constraint&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validation-config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nacos如何实现服务注册.</title>
      <link href="/2021/04/15/nacos%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/"/>
      <url>/2021/04/15/nacos%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>ConditionalOnNacosDiscoveryEnabled<br>    @ConditionalOnProperty(value &#x3D; “spring.cloud.nacos.discovery.enabled”, matchIfMissing &#x3D; true)<br>@ConditionalOnProperty(value &#x3D; “spring.cloud.service-registry.auto-registration.enabled”, matchIfMissing &#x3D; true)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>thread join.</title>
      <link href="/2021/03/29/thread%20join/"/>
      <url>/2021/03/29/thread%20join/</url>
      
        <content type="html"><![CDATA[<h1 id="thread-join-实现-java层"><a href="#thread-join-实现-java层" class="headerlink" title="thread join 实现(java层)"></a>thread join 实现(java层)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        join(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">long</span> millis)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">                <span class="comment">//等待唤醒</span></span><br><span class="line">                wait(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> millis - now;</span><br><span class="line">                <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                wait(delay);</span><br><span class="line">                now = System.currentTimeMillis() - base;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="什么时候被唤醒呢"><a href="#什么时候被唤醒呢" class="headerlink" title="什么时候被唤醒呢"></a>什么时候被唤醒呢</h1><p><a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/tip/src/share/vm/runtime/thread.cpp#l1526">Thread</a>的<code>c++</code>实现</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ensure_join</span><span class="params">(JavaThread* thread)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// We do not need to grap the Threads_lock, since we are operating on ourself.</span></span><br><span class="line">  <span class="function">Handle <span class="title">threadObj</span><span class="params">(thread, thread-&gt;threadObj())</span></span>;</span><br><span class="line">  <span class="built_in">assert</span>(threadObj.<span class="built_in">not_null</span>(), <span class="string">&quot;java thread object must exist&quot;</span>);</span><br><span class="line">  <span class="function">ObjectLocker <span class="title">lock</span><span class="params">(threadObj, thread)</span></span>;</span><br><span class="line">  <span class="comment">// Ignore pending exception (ThreadDeath), since we are exiting anyway</span></span><br><span class="line">  thread-&gt;<span class="built_in">clear_pending_exception</span>();</span><br><span class="line">  <span class="comment">// Thread is exiting. So set thread_status field in  java.lang.Thread class to TERMINATED.</span></span><br><span class="line">  java_lang_Thread::<span class="built_in">set_thread_status</span>(<span class="built_in">threadObj</span>(), java_lang_Thread::TERMINATED);</span><br><span class="line">  <span class="comment">// Clear the native thread instance - this makes isAlive return false and allows the join()</span></span><br><span class="line">  <span class="comment">// to complete once we&#x27;ve done the notify_all below</span></span><br><span class="line">  java_lang_Thread::<span class="built_in">set_thread</span>(<span class="built_in">threadObj</span>(), <span class="literal">NULL</span>);</span><br><span class="line">  <span class="comment">//唤醒所有执行了wait方法的线程</span></span><br><span class="line">  lock.<span class="built_in">notify_all</span>(thread);</span><br><span class="line">  <span class="comment">// Ignore pending exception (ThreadDeath), since we are exiting anyway</span></span><br><span class="line">  thread-&gt;<span class="built_in">clear_pending_exception</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ensure_join</code>在什么时候执行呢</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// For any new cleanup additions, please check to see if they need to be applied to</span></span><br><span class="line"><span class="comment">// cleanup_failed_attach_current_thread as well.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">JavaThread::exit</span><span class="params">(<span class="type">bool</span> destroy_vm, ExitType exit_type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// Notify waiters on thread object. This has to be done after exit() is called</span></span><br><span class="line">    <span class="comment">// on the thread (if the thread is the last thread in a daemon ThreadGroup the</span></span><br><span class="line">    <span class="comment">// group should have the destroyed bit set before waiters are notified).</span></span><br><span class="line">    <span class="built_in">ensure_join</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程执行完毕（退出时）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java volatile.</title>
      <link href="/2021/03/26/java%20volatile/"/>
      <url>/2021/03/26/java%20volatile/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVolatile1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0 getstatic #2 &lt;online/githuboy/concurrent/TestVolatile1.i&gt;</span></span><br><span class="line"><span class="comment">     * 3 iconst_1</span></span><br><span class="line"><span class="comment">     * 4 iadd</span></span><br><span class="line"><span class="comment">     * 5 putstatic #2 &lt;online/githuboy/concurrent/TestVolatile1.i&gt;</span></span><br><span class="line"><span class="comment">     * 8 return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>i &#x3D; 10<br>t1<br>    int temp &#x3D; i + 1<br>    &#x2F;&#x2F;ThreadContextSwitch t2<br>t2<br>    int tmep &#x3D; i+ 1<br>    i &#x3D; 11<br>    &#x2F;&#x2F;write result to main memory</p><p>t1<br>    continue execute<br>    reread from temp<br>    write i &#x3D; 11<br>    sync to main memory    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xincanshu crack.</title>
      <link href="/2021/03/25/xincanshu%20crack/"/>
      <url>/2021/03/25/xincanshu%20crack/</url>
      
        <content type="html"><![CDATA[<p>今天访问这个网站查看<a href="https://www.xincanshu.com/cpu/Intel_Core_i7_10700F/duohexingneng.html">i7-10700F</a><br>查看性能参数,谁知道给我弹出一个密码输入框<br><img src="https://static01.imgkr.com/temp/ce0ff7917c664beaaded598f703f03a2.png" alt="p1"></p><p>然后需要关注公众号，才能获取密码，我开始以为是免费的。结果需要3元RMB.<br>本着研究的精神，决定看下网站是如何验证的。</p><p>按<code>F12</code>本以为能打开浏览器调试工具，结果直接弹出一个新的<a href="https://www.xincanshu.com/huoqumima.html?requestname=123">window</a>.</p><p>好吧那只能通过菜单栏打开调试工具了。</p><p>通过快捷按键无法打开调试工具，说明该网站拦截了<code>keyDown</code>事件.</p><p>关键代码如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">onkeydown</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="variable language_">window</span>.<span class="property">event</span>||<span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">keyCode</span>==<span class="number">123</span>)&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;/huoqumima.html?requestname=123&#x27;</span>, <span class="string">&quot;_blank&quot;</span>, <span class="string">&quot;scrollbars=yes,resizable=1,modal=false,alwaysRaised=yes&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((e.<span class="property">ctrlKey</span>)&amp;&amp;(e.<span class="property">shiftKey</span>)&amp;&amp;(e.<span class="property">keyCode</span>==<span class="number">73</span>))&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;/huoqumima.html?requestname=73&#x27;</span>, <span class="string">&quot;_blank&quot;</span>, <span class="string">&quot;scrollbars=yes,resizable=1,modal=false,alwaysRaised=yes&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((e.<span class="property">ctrlKey</span>)&amp;&amp;(e.<span class="property">keyCode</span>==<span class="number">85</span>))&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;/huoqumima.html?requestname=85&#x27;</span>, <span class="string">&quot;_blank&quot;</span>, <span class="string">&quot;scrollbars=yes,resizable=1,modal=false,alwaysRaised=yes&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((e.<span class="property">ctrlKey</span>)&amp;&amp;(e.<span class="property">keyCode</span>==<span class="number">83</span>))&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;/huoqumima.html?requestname=83&#x27;</span>, <span class="string">&quot;_blank&quot;</span>, <span class="string">&quot;scrollbars=yes,resizable=1,modal=false,alwaysRaised=yes&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>试着删除密码输入框的元素，结果整个网页<code>reload</code>.<br>逻辑如下<br><img src="https://static01.imgkr.com/temp/0056006c73904251a87f15663a5a4ee4.png" alt="p2"></p><p>既然不能删除元素，那就加个样式吧<code>display: none;</code></p><p><img src="https://static01.imgkr.com/temp/7b7cd09d7fc74f6c8a906a9567f25c1b.png" alt="p3"></p><p>结果还是模糊的。</p><p>审查元素发现加了模糊过滤</p><p><img src="https://static01.imgkr.com/temp/2a01b5c779af4f8da6c5d78764226cea.png" alt="p4"></p><p>基本分析差不多了，就开始写代码吧。</p><p>用的<a href="https://www.tampermonkey.net/">油猴脚本管理器</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         xincanshu crack</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  Hidden password login dialog and blur mask,just for personal use</span></span><br><span class="line"><span class="comment">// @author       githuboy</span></span><br><span class="line"><span class="comment">// @match        *://*.xincanshu.com/*</span></span><br><span class="line"><span class="comment">// @grant        GM_log</span></span><br><span class="line"><span class="comment">// @run-at       document-body</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script init success&quot;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> $ = jq;</span><br><span class="line">        $(<span class="string">&quot;.zheceng&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line">        $(<span class="string">&quot;#chart-wrapper&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;filter&quot;</span>,<span class="string">&quot;blur(0px)&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;.paofenjietu&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;filter&quot;</span>,<span class="string">&quot;blur(0px)&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;#chart-wrapper&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> t = $(<span class="string">&quot;.tishitubiao&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(t)&#123;</span><br><span class="line">          $(t).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很简单的逻辑，就改下相关<code>Element</code>的样式</p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.tampermonkey.net/documentation.php">Tampermonkey documentation</a></p><p><a href="https://developer.chrome.com/docs/extensions/mv3/match_patterns/">Match patterns</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM常用参数.</title>
      <link href="/2021/03/22/JVM%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/"/>
      <url>/2021/03/22/JVM%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础参数"><a href="#基础参数" class="headerlink" title="基础参数"></a>基础参数</h1><p><code>java -XX:+PrintFlagsFinal -version</code> 获取JVM 所有提供的参数选项</p><p>formats<br><code>Type | Name | Operator | Value | Application</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Global flags]</span><br><span class="line">     #type name                                     # =defaultValue :=overrideValue        #&#123;&#125;</span><br><span class="line">     intx ActiveProcessorCount                      = -1                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeDecrementScaleFactor          = 4                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10                                  &#123;product&#125;</span><br></pre></td></tr></table></figure><p><code>java -XX:+PrintCommandLineFlags</code> 打印当前运行JVM的参数</p><h1 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h1><p><code>-Xmx20M</code> 设置堆内存最大为20M</p><p><code>-Xms20M</code> 设置堆内存最小为20M</p><p><code>-Xmn10M</code> 设置新生代内存为10M</p><p><code>-verbose:gc</code> 打印GC日志</p><p><code>-XX:SurvivorRatio=8</code> edian &#x3D; 8&#x2F;10 survivorFrom &#x3D; 1&#x2F;10, survivorTo &#x3D; 1&#x2F;10</p><p><code>-XX:+PrintGCDetails</code> 打印gc详细日志</p><p><code>-XX:+PrintGCTimeStamps</code> 打印gc时间戳</p><p><code>-Xloggc:gc.log</code> gc日志输出到文件</p><p><code>-XX:+PrintStringTableStatistics</code> 打印StringTable 和SymbolTable统计信息</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://chriswhocodes.com/hotspot_option_differences.html">https://chriswhocodes.com/hotspot_option_differences.html</a></p><p><a href="https://foojay.io/command-line-arguments/openjdk-8/?tab=alloptions">https://foojay.io/command-line-arguments/openjdk-8/?tab=alloptions</a></p><p><a href="https://chenweixiang.github.io/2020/05/29/english.html">https://chenweixiang.github.io/2020/05/29/english.html</a></p><p><a href="https://www.jrebel.com/blog/jvm-options-cheat-sheet">jvm-options-cheat-sheet</a></p><p><a href="https://www.logicbig.com/quick-info/java/jvm-ergonomics.html">jvm-ergonomics</a></p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/">VM</a></p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html">Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring-cloud是如何通过bus-refresh刷新配置的</title>
      <link href="/2021/03/18/spring-cloud%E6%98%AF%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87bus-refresh%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE%E7%9A%84/"/>
      <url>/2021/03/18/spring-cloud%E6%98%AF%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87bus-refresh%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<ol><li><p>request &#x2F;actuator&#x2F;bus-refresh</p></li><li><p>BusRefreshEndpoint received request</p></li><li><p>ApplicationEventPublisher.publish(RemoteApplicationEvent)</p></li><li><p>BusAutoConfiguration#</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener(classes = RemoteApplicationEvent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acceptLocal</span><span class="params">(RemoteApplicationEvent event)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.serviceMatcher.isFromSelf(event)</span><br><span class="line">&amp;&amp; !(event <span class="keyword">instanceof</span> AckRemoteApplicationEvent)) &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;Sending remote event on bus: &quot;</span> + event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//rabitmqTemplate send messsage</span></span><br><span class="line"><span class="built_in">this</span>.cloudBusOutboundChannel.send(MessageBuilder.withPayload(event).build());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> debug </tag>
            
            <tag> spring </tag>
            
            <tag> spring-cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring bus.</title>
      <link href="/2021/03/18/spring%20bus/"/>
      <url>/2021/03/18/spring%20bus/</url>
      
        <content type="html"><![CDATA[<ol><li><p>request &#x2F;actuator&#x2F;bus-refresh</p></li><li><p>BusRefreshEndpoint received request</p></li><li><p>ApplicationEventPublisher.publish(RemoteApplicationEvent)</p></li><li><p>BusAutoConfiguration#</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener(classes = RemoteApplicationEvent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acceptLocal</span><span class="params">(RemoteApplicationEvent event)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.serviceMatcher.isFromSelf(event)</span><br><span class="line">&amp;&amp; !(event <span class="keyword">instanceof</span> AckRemoteApplicationEvent)) &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;Sending remote event on bus: &quot;</span> + event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.cloudBusOutboundChannel.send(MessageBuilder.withPayload(event).build());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bash 常用总结.</title>
      <link href="/2021/03/12/bash%20%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2021/03/12/bash%20%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><code>$?</code>表示上个命令执行的结果值，<code>0</code>表示上个命令执行成功,非0表示上个命令执行失败</p><p><code>$$</code>当前shell的进程ID</p><p><code>$_</code> 上个命令的最后一个参数</p><p><code>$!</code> 为最近一个后台执行的异步命令的进程 ID</p><p><code>$0</code> 为当前 Shell 的名称（在命令行直接执行时）或者脚本名（在脚本中执行时）</p><p><code>$-</code> 为当前 Shell 的启动参数。</p><p><code>$@</code>和<code>$#</code>表示脚本的参数数量</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>steam注册外区账户.</title>
      <link href="/2021/03/04/steam%E6%B3%A8%E5%86%8C%E5%A4%96%E5%8C%BA%E8%B4%A6%E6%88%B7/"/>
      <url>/2021/03/04/steam%E6%B3%A8%E5%86%8C%E5%A4%96%E5%8C%BA%E8%B4%A6%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h1><ol><li><p>魔法上网</p></li><li><p>注册区域随便选择</p></li><li><p>过了谷歌验证</p></li><li><p>邮箱确认注册</p></li></ol><h1 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h1><ol><li><p>魔法上网(节点是你想注册到哪个地区的节点(eg:russia))，需要全局proxy</p></li><li><p>输入用户名密码</p></li><li><p>提交</p></li><li><p>上述步骤没出现问题的话，应该注册成功且自动跳转到steam首页了。</p></li><li><p>点击右上角<code>账户明细</code>,网页加载成功后 <code>国家/地区</code> 应该就是魔法上网选择的节点区域</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pgSQL 递归.</title>
      <link href="/2021/02/25/pgSQL%20%E9%80%92%E5%BD%92/"/>
      <url>/2021/02/25/pgSQL%20%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p><a href="https://my.oschina.net/Kenyon/blog/55137">https://my.oschina.net/Kenyon/blog/55137</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql lock &amp;&amp; tx.</title>
      <link href="/2021/02/03/mysql%20lock%20&amp;&amp;%20tx/"/>
      <url>/2021/02/03/mysql%20lock%20&amp;&amp;%20tx/</url>
      
        <content type="html"><![CDATA[<h1 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h1><p><a href="https://tool.4xseo.com/a/24067.html">https://tool.4xseo.com/a/24067.html</a></p><p>锁分类：</p><h2 id="对数据操作的粒度分"><a href="#对数据操作的粒度分" class="headerlink" title="对数据操作的粒度分"></a>对数据操作的粒度分</h2><ol><li>表锁：操作时，会锁定整个表</li><li>行锁：操作时，会锁定当前行</li><li>间隙锁：操作时，锁定范围条件内的记录</li></ol><h2 id="对数据的操作类型分"><a href="#对数据的操作类型分" class="headerlink" title="对数据的操作类型分"></a>对数据的操作类型分</h2><ol><li><p>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行不会互相影响</p></li><li><p>写锁（排他锁，也叫独占锁）：当前操作没有完成之前，会阻塞其他写锁或读锁</p></li></ol><p>在开启事务的且自动提交为关闭的状态下&#96;</p><p><code>select for update</code> 和 <code>update</code> 会创建 <code>排他锁</code>,<br>如果带有索引查询，则会加<code>行锁</code>，如果查询整个表，则会加<code>间隙锁</code></p><h2 id="lock-table"><a href="#lock-table" class="headerlink" title="lock table"></a>lock table</h2><p> session 1</p><p><code>lock table my_table read;</code></p><p><code>select * from my_table;</code><br><code>unlock tables;</code></p><p> sessoin 2</p><p><code>select * from my_table;</code></p><p><code>update my_table set id = 1; -- will blocked until session 1 unlock tables</code></p><h2 id="lock-record"><a href="#lock-record" class="headerlink" title="lock record"></a>lock record</h2><p>session 1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- session  a</span><br><span class="line">set autocommit = 0;</span><br><span class="line">begin;</span><br><span class="line">select TRX_ID from information_schema.INNODB_TRX where trx_mysql_thread_id = CONNECTION_ID();</span><br><span class="line">select * from stu_teacher where teacher_id = 1 for update;</span><br><span class="line">select TRX_ID from information_schema.INNODB_TRX where trx_mysql_thread_id = CONNECTION_ID();</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>session 2</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set @@autocommit=0; </span><br><span class="line">SHOW VARIABLES LIKE &#x27;autocommit&#x27;;</span><br><span class="line">BEGIN;</span><br><span class="line">select * from stu_teacher where teacher_id = 1 for update;</span><br><span class="line">update stu_teacher set teacher_name = &#x27;test112&#x27; where teacher_id = 1;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p><code>session 1</code> 先执行的话 <code>session 2</code>的查询<code>for update</code> 更新会被锁住</p><h1 id="Tx"><a href="#Tx" class="headerlink" title="Tx"></a>Tx</h1><p>steps </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">set autocommit = 0;</span><br><span class="line"></span><br><span class="line">start transaction -- or begin;</span><br><span class="line"></span><br><span class="line">update something set id = 1;</span><br><span class="line"></span><br><span class="line">commit;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ISOLATION"><a href="#ISOLATION" class="headerlink" title="ISOLATION"></a>ISOLATION</h2><p><code>READ_UNCOMMITED</code></p><p><code>READ_COMMITED</code> </p><p><code>REPEATABLE-READ</code> 可重复读，但会幻读（读取到新加入的行）</p><p><code>READ_PHANTOM</code></p><p><code>serialization</code></p><h1 id="LOCK"><a href="#LOCK" class="headerlink" title="LOCK"></a>LOCK</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring websocket.</title>
      <link href="/2021/01/18/Spring%20websocket/"/>
      <url>/2021/01/18/Spring%20websocket/</url>
      
        <content type="html"><![CDATA[<h1 id="EntryPoint"><a href="#EntryPoint" class="headerlink" title="EntryPoint"></a>EntryPoint</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">               HttpRequestHandler</span><br><span class="line">                       |</span><br><span class="line">                  /----------\</span><br><span class="line">                 /            \</span><br><span class="line">                /              \ </span><br><span class="line"> WebSocketHttpRequestHandler    SockJsHttpRequestHandler(So,text message need json format,strictly is json array)</span><br><span class="line">            |                               |</span><br><span class="line">SubProtocolWebSocketHandler         SockJsWebSocketHandler</span><br><span class="line">            |                               |</span><br><span class="line">            |                       WebSocketServerSockJsSession -&gt; handleMessage -&gt;  Jackson2SockJsMessageCodec -&gt; decode </span><br><span class="line">            |                               |</span><br><span class="line">StompSubProtocolHandler             StompSubProtocolHandler            </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java byte code instruction.</title>
      <link href="/2021/01/18/java%20byte%20code%20instruction/"/>
      <url>/2021/01/18/java%20byte%20code%20instruction/</url>
      
        <content type="html"><![CDATA[<h1 id="Intel-lock-prefix"><a href="#Intel-lock-prefix" class="headerlink" title="Intel lock prefix"></a>Intel lock prefix</h1><p><a href="https://xem.github.io/minix86/manual/intel-x86-and-64-manual-vol3/o_fe12b1e2a880e0ce-259.html">Bus Locking</a></p><p>[]</p><h1 id="jvm-instructon-list"><a href="#jvm-instructon-list" class="headerlink" title="jvm instructon list"></a>jvm instructon list</h1><p><a href="http://yuweijun.github.io/blog/java/2017/01/18/jvm-instructions-listings.html">jvm-instructions-listings</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ali-player-decrypt.</title>
      <link href="/2021/01/07/ali-player-decrypt/"/>
      <url>/2021/01/07/ali-player-decrypt/</url>
      
        <content type="html"><![CDATA[<h1 id="AliyunVodEncryption加密分析"><a href="#AliyunVodEncryption加密分析" class="headerlink" title="AliyunVodEncryption加密分析"></a>AliyunVodEncryption加密分析</h1><h2 id="阿里云点播API文档地址"><a href="#阿里云点播API文档地址" class="headerlink" title="阿里云点播API文档地址"></a>阿里云点播API文档地址</h2><p><a href="https://next.api.aliyun.com/api/vod/2017-03-21/GetVideoPlayAuth?params=%7B%7D">GetVideoPlayAuth</a></p><p><a href="https://next.api.aliyun.com/document/vod/2017-03-21/GetPlayInfo">GetPlayInfo</a></p><h2 id="预定义伪代码"><a href="#预定义伪代码" class="headerlink" title="预定义伪代码"></a>预定义伪代码</h2><h3 id="covert"><a href="#covert" class="headerlink" title="covert"></a>covert</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  <span class="doctag">@param</span> hexStr 16进制字符串，长度为16</span></span><br><span class="line"><span class="comment">  *  把16进制字符串利用base64编码，再解码，得到长度为16的字节数组</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">hexStr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Base64</span>.<span class="title function_">decode</span>(<span class="title class_">Base64</span>.<span class="title function_">encode</span>(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AES加密，模式为CBC,填充方式:PKCS5Padding</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AES</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">encrypt</span>(<span class="params">content,KEY,IV</span>)&#123;</span><br><span class="line">    aes.<span class="title function_">encrypt</span>(content,<span class="variable constant_">KEY</span>,<span class="variable constant_">IV</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回参数说明"><a href="#返回参数说明" class="headerlink" title="返回参数说明"></a>返回参数说明</h3><p><code>PlayInfoList.PlayInfo[0]</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Normal&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;StreamType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;video&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Rand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NYspn8Qc220551gz62GCFGeOOU6WxF9nr9e8c64wDbE=&quot;</span><span class="punctuation">,</span> <span class="comment">//存储第一段AES key</span></span><br><span class="line">  <span class="attr">&quot;Size&quot;</span><span class="punctuation">:</span> <span class="number">1368828</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Definition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LD&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Fps&quot;</span><span class="punctuation">:</span> <span class="string">&quot;25&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Duration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0254&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ModificationTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-05-11T08:04:11Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Specification&quot;</span><span class="punctuation">:</span> <span class="string">&quot;H264.SD&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Bitrate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1092.283&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Encrypt&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//是否加密</span></span><br><span class="line">  <span class="attr">&quot;PreprocessStatus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UnPreprocess&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;m3u8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EncryptType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AliyunVoDEncryption&quot;</span><span class="punctuation">,</span><span class="comment">//阿里云的私有加密</span></span><br><span class="line">  <span class="attr">&quot;PlayURL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://vod.domain.com/play.m3u8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;NarrowBandType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Plaintext&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4pccpVV9LIjk9s0gZCFj4t6n85PPlwZuhrL2D4fbJJU=&quot;</span><span class="punctuation">,</span><span class="comment">//存储第二段AES key</span></span><br><span class="line">  <span class="attr">&quot;CreationTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-05-11T08:04:05Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Height&quot;</span><span class="punctuation">:</span> <span class="number">540</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Width&quot;</span><span class="punctuation">:</span> <span class="number">960</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;JobId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a7a32209e6e3429f99128b25b34a8e40&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h2><p>假设视频文件的AES <code>key</code> 为 <code>realKey</code></p><p>浏览器生成一个随机串 <code>r1</code> 利用<code>RSA</code>公钥加密，结果为<code>randStr</code></p><p>服务器接受到<code>randStr</code>，利用私钥解密出随机串 <code>r1</code></p><p>把<code>r1</code>利用<code>MD5</code>生成数字摘要，再截取(8,24)位的字符串 记为<code>rs1</code></p><p><code>convert(rs1)</code>得到第一段加密的<code>IV</code>和<code>KEY</code>,记为<code>KEY1</code>,<code>IV1</code></p><p>再生成一段随机字符串记为<code>r2</code>,利用<code>AES.encrypt(r2,KEY1,IV1)</code> 得到上面返回结果中的 <code>Rand</code></p><p>拼接<code>r1 + r2</code>，利用<code>MD5</code>生成数字摘要，再截取(8,24)为的字符串，记为<code>rs2</code></p><p><code>convert(rs2)</code>得到第二段加密的<code>KEY</code>，记为<code>KEY2</code></p><p>利用<code>AES.encrypt(realKey,KEY2,IV1)</code> 得到上面返回的结果<code>Plaintext</code></p><p>至此，整个加密逻辑分析完毕</p><h2 id="解密TS文件"><a href="#解密TS文件" class="headerlink" title="解密TS文件"></a>解密TS文件</h2><p><a href="https://blog.csdn.net/u013354805/article/details/51578457">MPEG-TS文件结构</a></p><p>用到的工具<code>EasyICE</code>,<code>DVB Inspector</code>,<code>tsduck</code></p><p> ts-header(32byte)</p><table><thead><tr><th align="left">字段名</th><th align="center">位数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">sync_byte</td><td align="center"><code>4bit</code></td><td align="left">TS package 标识,固定值<code>0x47</code></td></tr><tr><td align="left">transport_error_indicator</td><td align="center"><code>1bit</code></td><td align="left">传输错误标识</td></tr><tr><td align="left">payload_unit_start_indicator</td><td align="center"><code>1bit</code></td><td align="left">PES包开始标识,可以用掩码<code>0x40</code> 判断</td></tr><tr><td align="left">transport_priority</td><td align="center"><code>1bit</code></td><td align="left">传输优先级</td></tr><tr><td align="left">PID</td><td align="center"><code>13bit</code></td><td align="left">TS package identity <code>0x100:视频数据</code>,<code>0x101:音频数据</code>, <code>-1:id3Track</code>，应该从PMT表中查找</td></tr><tr><td align="left">transport_scrambling_control</td><td align="center"><code>2bit</code></td><td align="left">是否有干扰码</td></tr><tr><td align="left">adaptation_field_control</td><td align="center"><code>2bit</code></td><td align="left">是否有扩展字段，<code>0x01:payload only</code>,<code>0x02:adaptation field only</code>,<code>0x03:adaptation field follow payload</code></td></tr><tr><td align="left">continuity_counter</td><td align="center"><code>4bit</code></td><td align="left">pack seq</td></tr></tbody></table><hr><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = []</span><br><span class="line"><span class="comment">//当遇到`PUSI(Payload unit start indicator )`标识时，获取每个ts包的payload</span></span><br><span class="line">data.<span class="title function_">push</span>(payload)</span><br><span class="line"><span class="comment">//遇到下一个`pusi`标识时，</span></span><br><span class="line"><span class="comment">//合并data中的payload，作为一个PES单元</span></span><br><span class="line"><span class="comment">//解密PES数据段,再把解密后的payload回写到TSPacket</span></span><br></pre></td></tr></table></figure><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.cnblogs.com/starwolf/p/3365834.html">AES五种加密模式</a></p><p><a href="https://g.alicdn.com/de/prismplayer/2.9.0/hls/aliplayer-vod-min.js">aliplayer-vod.js</a></p><p><a href="https://github.com/ricmoo/aes-js/blob/master/index.js">aes-js</a></p><p><a href="http://travistidwell.com/jsencrypt/">jsencrypt</a></p><p><a href="https://gist.github.com/manyuanrong/39f151181a193b454c3b11dac1b60e15#file-jsencrypt-js">https://gist.github.com/manyuanrong/39f151181a193b454c3b11dac1b60e15#file-jsencrypt-js</a></p><p><a href="https://g.alicdn.com/de/prismplayer/2.9.0/hls/aliplayer-hls-min.js">https://g.alicdn.com/de/prismplayer/2.9.0/hls/aliplayer-hls-min.js</a></p><p><a href="https://stackoverflow.com/questions/28562894/how-to-loop-an-mpeg-ts-stream">https://stackoverflow.com/questions/28562894/how-to-loop-an-mpeg-ts-stream</a></p><p><a href="https://github.com/fy-create/TSParser">https://github.com/fy-create/TSParser</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven 相关.</title>
      <link href="/2021/01/06/maven%20%E7%9B%B8%E5%85%B3/"/>
      <url>/2021/01/06/maven%20%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="只构建parent-pom"><a href="#只构建parent-pom" class="headerlink" title="只构建parent pom"></a>只构建parent pom</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd your-project</span><br><span class="line">mvn install -N</span><br></pre></td></tr></table></figure><p>note:</p><p><code>-N,--non-recursive Do not recurse into sub-projects</code></p><h3 id="构建多模块"><a href="#构建多模块" class="headerlink" title="构建多模块"></a>构建多模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     p</span><br><span class="line">     |</span><br><span class="line">     |</span><br><span class="line">-----------</span><br><span class="line">|         |</span><br><span class="line">a  -----&gt; b</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mvn install -pl a -am -amd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">note:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-pl, –projects<br>    构建指定的模块，模块间用逗号分隔；适合无依赖的项目<br>-am, –also-make (常用)<br>    同时构建所列模块的依赖模块，比如A依赖B，B依赖C，构建B，同时构建C<br>-amd, –also-make-dependents<br>        同时构建依赖于所列模块的模块，比如A依赖B，B依赖C,构建B，同时构建A</p><p>&#96;&#96;&#96;</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.csdn.net/xingbaozhen1210/article/details/89213789">Maven 单独构建多模块项目中的子模块</a></p><p><a href="https://stackoverflow.com/questions/9500480/install-parent-pom-without-building-child-modules">Install parent POM without building Child modules</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RD2 website.</title>
      <link href="/2021/01/04/RD2%20website/"/>
      <url>/2021/01/04/RD2%20website/</url>
      
        <content type="html"><![CDATA[<h1 id="how-it-works"><a href="#how-it-works" class="headerlink" title="how it works"></a>how it works</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create worker</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SharedWorkder</span>(<span class="string">&quot;https://socialclub.rockstargames.com/Home/SocketWorker&quot;</span>) <span class="comment">// </span></span><br><span class="line"><span class="comment">// self.importScripts(&#x27;https://s.rsg.sc/sc/js/20201212bfdb/build/socketWorker.js&#x27;);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="how-to-debug"><a href="#how-to-debug" class="headerlink" title="how to debug"></a>how to debug</h2><ol><li><p>Type <code>chrome://inspect/#workers</code> in chrome location bar;</p></li><li><p>You can find <code>https://socialclub.rockstargames.com/Home/SocketWorker</code> in the <code>Shared workers</code></p></li><li><p>Click inpect as you can debug like debug normal session;</p></li></ol><h1 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h1><p>&#x2F;&#x2F;<a href="https://www.right.com.cn/forum/thread-4052504-1-1.html">https://www.right.com.cn/forum/thread-4052504-1-1.html</a><br>&#x2F;&#x2F;<a href="https://www.jianshu.com/p/01262e314eab">https://www.jianshu.com/p/01262e314eab</a><br>&#x2F;&#x2F;<a href="http://alisdk-api-doc.oss-cn-hangzhou.aliyuncs.com/player/5.1.6/android/index.html?com/aliyun/player/VidPlayerConfigGen.EncryptType.html">http://alisdk-api-doc.oss-cn-hangzhou.aliyuncs.com/player/5.1.6/android/index.html?com/aliyun/player/VidPlayerConfigGen.EncryptType.html</a></p><ol><li><p>hidden the network request detail;</p></li><li><p>increase debugging difficulty;</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring aop 的一些记录</title>
      <link href="/2020/12/28/spring%20aop/"/>
      <url>/2020/12/28/spring%20aop/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="PointCut"><a href="#PointCut" class="headerlink" title="PointCut"></a>PointCut</h2><p>切入点</p><p>用于匹配符合某些特征的方法.</p><h2 id="JoinPoint"><a href="#JoinPoint" class="headerlink" title="JoinPoint"></a>JoinPoint</h2><p>连接点</p><p>程序执行过程中的一个点，如方法的执行或异常的处理。在Spring AOP中，连接点总是表示方法执行。</p><h2 id="advice"><a href="#advice" class="headerlink" title="advice"></a>advice</h2><h3 id="before"><a href="#before" class="headerlink" title="before"></a>before</h3><h2 id="beofore"><a href="#beofore" class="headerlink" title="beofore"></a>beofore</h2><p>目标<code>JoinPoint</code>执行之前执行</p><h2 id="afterReturing"><a href="#afterReturing" class="headerlink" title="afterReturing"></a>afterReturing</h2><p>目标<code>JoinPoint</code>正常执行返回.</p><h2 id="afterThrowing"><a href="#afterThrowing" class="headerlink" title="afterThrowing"></a>afterThrowing</h2><p>目标<code>JoinPoint</code> 执行时抛出异常</p><h2 id="after-finnaly"><a href="#after-finnaly" class="headerlink" title="after(finnaly)"></a>after(finnaly)</h2><p>目标<code>JoinPoint</code>方法执行结束</p><h2 id="around"><a href="#around" class="headerlink" title="around"></a>around</h2><p>需要手动的调用目标<code>JoinPoint</code>执行.</p><p>该通知的第一个参数是<code>ProceedingJoinPoint</code>类型.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AroundExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;com.xyz.myapp.CommonPointcuts.businessService()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doBasicProfiling</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// start stopwatch</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">retVal</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        <span class="comment">// stop stopwatch</span></span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="访问当前JoinPoint"><a href="#访问当前JoinPoint" class="headerlink" title="访问当前JoinPoint"></a>访问当前<code>JoinPoint</code></h1><p>任何通知可以定义该方法的第一个参数类型为（<code>org.aspectj.lang.JoinPoint</code>)类型，除@around通知外</p><ul><li><p><code>getArgs()</code> 返回方法参数</p></li><li><p><code>getThis()</code> 返回代理对象</p></li><li><p><code>getTarget</code> 返回目标对象</p></li><li><p><code>getSignature()</code> 返回被通知的方法的描述</p></li><li><p><code>toString()</code> 打印被通知的方法的有用描述</p></li></ul><h1 id="传递参数给Advice"><a href="#传递参数给Advice" class="headerlink" title="传递参数给Advice"></a>传递参数给Advice</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;com.xyz.myapp.CommonPointcuts.dataAccessOperation() &amp;&amp; args(account,..)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validateAccount</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Advice的顺序"><a href="#Advice的顺序" class="headerlink" title="Advice的顺序"></a>Advice的顺序</h1><p>从高到底</p><p><code>@Around, @Before, @After, @AfterReturning, @AfterThrowing</code></p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java reflection.</title>
      <link href="/2020/12/21/java%20reflection/"/>
      <url>/2020/12/21/java%20reflection/</url>
      
        <content type="html"><![CDATA[<h1 id="Method-invoke"><a href="#Method-invoke" class="headerlink" title="Method.invoke"></a>Method.invoke</h1><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">method.invoke()</span><br><span class="line">    -&gt;</span><br><span class="line">        MethodAccessor.invoke()</span><br><span class="line">            -&gt; ReflectionFactory.newMethodAccessor() -&gt; DelegatingMethodAccessorImpl</span><br><span class="line">            -&gt; invoke</span><br><span class="line">            -&gt; DelegatingMethodAccessorImpl.invoke</span><br><span class="line">                -- delegate = NativeMethodAccessorImpl</span><br><span class="line">                                    -&gt; invoke</span><br><span class="line">                                        if(numInvocations &gt; ReflectionFactory.inflationThreshold())</span><br><span class="line">                                            -&gt; acc = MethodAccessorGenerator.generateMethod</span><br><span class="line">                                            -&gt; parent.setDelegate(acc) </span><br><span class="line">                                        invoke0()//native invoke</span><br><span class="line">                -- deletegate = sun.reflect.GeneratedMethodAccessor1@101df177</span><br></pre></td></tr></table></figure><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ul><li><p>下文中<code>代理类</code>皆为<code>MethodAccessor</code>的子类</p></li><li><p>当<code>ReflectionFactory.noInflation = true</code> 会直接生成<code>代理类</code>          </p></li><li><p>反射调用方法执行次数大于<code>ReflectionFactory.inflationThreshold(默认15)</code>时，会生成代理类，用于提高反射执行效率,代理类反编译后源码大致如下(以<code>String#toCharArray</code>为例)</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sun.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratedMethodAccessor1</span> <span class="keyword">extends</span> <span class="title class_">MethodAccessorImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneratedMethodAccessor1</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//var1 为原object对象，var为方法参数数组</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object var1, Object[] var2)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">if</span> (var1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//生成字节码时已经自动处理了对象类型</span></span><br><span class="line">            String var10000;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                var10000 = (String)var1;</span><br><span class="line">                <span class="keyword">if</span> (var2 != <span class="literal">null</span> &amp;&amp; var2.length != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException | ClassCastException var4) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(var4.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//实际调用 等价于 strObj.toCharArray();所以开销很小</span></span><br><span class="line">                <span class="keyword">return</span> var10000.toCharArray();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvocationTargetException</span>(var3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>当系统中反射调用过多时会导致metaspace溢出，因为生成了过多的代理类</p></li><li><p><code>noInflation</code>可通过<code>sun.reflect.noInflation</code>配置</p></li><li><p><code>inflationThreshold</code>可通过<code>sun.reflect.inflationThreshold</code>配置</p></li></ul><h1 id="Constructor-newInstance"><a href="#Constructor-newInstance" class="headerlink" title="Constructor.newInstance"></a>Constructor.newInstance</h1><h2 id="调用链-1"><a href="#调用链-1" class="headerlink" title="调用链"></a>调用链</h2><p>和上文大致类似</p><h2 id="补充说明-1"><a href="#补充说明-1" class="headerlink" title="补充说明"></a>补充说明</h2><ul><li>生成代理类的代理类反编译后源码大致如下(以<code>new String(String)</code>为例)</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sun.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratedConstructorAccessor2</span> <span class="keyword">extends</span> <span class="title class_">ConstructorAccessorImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneratedConstructorAccessor2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">newInstance</span><span class="params">(Object[] var1)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line">        String var10000;</span><br><span class="line">        String var10001;</span><br><span class="line">        String var10002;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var10000 = <span class="keyword">new</span> <span class="title class_">String</span>;</span><br><span class="line">            var10001 = var10000;</span><br><span class="line">            <span class="keyword">if</span> (var1.length != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var10002 = (String)var1[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException | ClassCastException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(var3.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var10001.&lt;init&gt;(var10002);</span><br><span class="line">            <span class="keyword">return</span> var10000;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvocationTargetException</span>(var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven docker simple.</title>
      <link href="/2020/12/17/maven%20docker%20simple/"/>
      <url>/2020/12/17/maven%20docker%20simple/</url>
      
        <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>docker-build-local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">docker-maven-plugin.host</span>&gt;</span>http://192.168.2.210:2374<span class="tag">&lt;/<span class="name">docker-maven-plugin.host</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">docker-maven-plugin.registry.url</span>&gt;</span>registry.cn-hangzhou.aliyuncs.com<span class="tag">&lt;/<span class="name">docker-maven-plugin.registry.url</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">docker-maven-plugin.image.tag</span>&gt;</span>snapshot<span class="tag">&lt;/<span class="name">docker-maven-plugin.image.tag</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">docker-maven-plugin.skip.build</span>&gt;</span>false<span class="tag">&lt;/<span class="name">docker-maven-plugin.skip.build</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">docker-maven-plugin.skip.docker</span>&gt;</span>false<span class="tag">&lt;/<span class="name">docker-maven-plugin.skip.docker</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dockerBuild<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">value</span>&gt;</span>local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">env</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">LANG</span>&gt;</span>zh_CH.UTF-8<span class="tag">&lt;/<span class="name">LANG</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">runs</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">                           echo &quot;test something&quot;</span><br><span class="line">                       <span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">runs</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IP数据包结构</title>
      <link href="/2020/12/14/IP%20packet/"/>
      <url>/2020/12/14/IP%20packet/</url>
      
        <content type="html"><![CDATA[<h1 id="InternetProtocol"><a href="#InternetProtocol" class="headerlink" title="InternetProtocol"></a>InternetProtocol</h1><h2 id="数据包结构图"><a href="#数据包结构图" class="headerlink" title="数据包结构图"></a>数据包结构图</h2><p><img src="http://docs.52im.net/extend/docs/book/tcpip/vol1/3/images2/52im_1.png" alt="IP_DATAPACKET"></p><h2 id="各字段说明"><a href="#各字段说明" class="headerlink" title="各字段说明"></a>各字段说明</h2><table><thead><tr><th align="left">字段命</th><th align="center">位数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">version</td><td align="center">4bit</td><td align="left">版本号</td></tr><tr><td align="left">headerLength</td><td align="center">4bit</td><td align="left">表示首部长度占多少个<code>32bit</code>数量,所以，最大首部长度为<code>15*4byte(32bit) = 60</code> byte;</td></tr><tr><td align="left">typeOfService(TOS)</td><td align="center">8bit</td><td align="left">服务类型</td></tr><tr><td align="left">totalLength</td><td align="center">16bit</td><td align="left">整个ip数据报的长度，子节为单位，所以ip数据报最大长度为<code>0xFF</code>(65536)byte</td></tr><tr><td align="left">identification</td><td align="center">16bit</td><td align="left">16位标识</td></tr><tr><td align="left">fragmentOffset</td><td align="center">16bit</td><td align="left">片偏移 <code>3bit标识</code> + <code>13bit片偏移</code></td></tr><tr><td align="left">TTL</td><td align="center">8bit</td><td align="left">生存时间，数据包最多可以经过最多的路由数，TTL的初始值由源主机设置（通常为32或64），一旦经过一个处理它的路由器，它的值就减去1。当该字段的值为0时，数据报就被丢弃，并发送ICMP报文通知源主机</td></tr><tr><td align="left">protocol</td><td align="center">8bit</td><td align="left">协议</td></tr><tr><td align="left">checksum</td><td align="center">16bit</td><td align="left">首部校验和</td></tr><tr><td align="left">source</td><td align="center">32bit</td><td align="left">源地址</td></tr><tr><td align="left">destination</td><td align="center">32bit</td><td align="left">目的地址</td></tr></tbody></table><hr><p><strong>头部长度合计</strong>: <code>headerLength*4</code> <em>byte</em></p><hr><ul><li><p>version: <code>4bit</code></p></li><li><p>headerLength: <code>4bit(15)</code>,表示首部长度占多少个<code>32bit</code>数量,所以，最大首部长度为<code>15*4byte(32bit) = 60</code> byte;</p></li><li><p>typeOfService(TOS):<code>8bit</code>, 服务类型</p></li><li><p>totalLength:<code>16bit</code>,整个ip数据报的长度，子节为单位，所以ip数据报最大长度为<code>0xFF</code>(65536)byte</p></li><li><p>identification:<code>16bit</code>,16位标识，</p></li><li><p>fragmentOffset:<code>16bit</code>,片偏移 <code>3bit标识</code> + <code>13bit片偏移</code></p></li><li><p>TTL :<code>8bit</code>,生存时间，数据包最多可以经过最多的路由数，TTL的初始值由源主机设置（通常为32或64），一旦经过一个处理它的路由器，它的值就减去1。当该字段的值为0时，数据报就被丢弃，并发送ICMP报文通知源主机</p></li><li><p>protocol:<code>8bit</code>，协议</p></li><li><p>checksum: <code>16bit</code>,首部校验和</p></li><li><p>source:<code>32bit</code>,源地址</p></li><li><p>destination:<code>32bit</code>,目的地址</p><pre><code>----</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP &amp;&amp; IP.</title>
      <link href="/2020/12/14/TCP%20&amp;&amp;%20IP/"/>
      <url>/2020/12/14/TCP%20&amp;&amp;%20IP/</url>
      
        <content type="html"><![CDATA[<h1 id="InternetProtocol"><a href="#InternetProtocol" class="headerlink" title="InternetProtocol"></a>InternetProtocol</h1><h2 id="数据包结构图"><a href="#数据包结构图" class="headerlink" title="数据包结构图"></a>数据包结构图</h2><p><img src="http://docs.52im.net/extend/docs/book/tcpip/vol1/3/images2/52im_1.png" alt="IP_DATAPACKET"></p><h2 id="各字段说明"><a href="#各字段说明" class="headerlink" title="各字段说明"></a>各字段说明</h2><table><thead><tr><th align="left">字段命</th><th align="center">位数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">version</td><td align="center">4bit</td><td align="left">版本号</td></tr><tr><td align="left">headerLength</td><td align="center">4bit</td><td align="left">表示首部长度占多少个<code>32bit</code>数量,所以，最大首部长度为<code>15*4byte(32bit) = 60</code> byte;</td></tr><tr><td align="left">typeOfService(TOS)</td><td align="center">8bit</td><td align="left">服务类型</td></tr><tr><td align="left">totalLength</td><td align="center">16bit</td><td align="left">整个ip数据报的长度，子节为单位，所以ip数据报最大长度为<code>0xFF</code>(65536)byte</td></tr><tr><td align="left">identification</td><td align="center">16bit</td><td align="left">16位标识</td></tr><tr><td align="left">fragmentOffset</td><td align="center">16bit</td><td align="left">片偏移 <code>3bit标识</code> + <code>13bit片偏移</code></td></tr><tr><td align="left">TTL</td><td align="center">8bit</td><td align="left">生存时间，数据包最多可以经过最多的路由数，TTL的初始值由源主机设置（通常为32或64），一旦经过一个处理它的路由器，它的值就减去1。当该字段的值为0时，数据报就被丢弃，并发送ICMP报文通知源主机</td></tr><tr><td align="left">protocol</td><td align="center">8bit</td><td align="left">协议</td></tr><tr><td align="left">checksum</td><td align="center">16bit</td><td align="left">首部校验和</td></tr><tr><td align="left">source</td><td align="center">32bit</td><td align="left">源地址</td></tr><tr><td align="left">destination</td><td align="center">32bit</td><td align="left">目的地址</td></tr></tbody></table><hr><p><strong>头部长度合计</strong>: <code>headerLength*4</code> <em>byte</em></p><hr><ul><li><p>version: <code>4bit</code></p></li><li><p>headerLength: <code>4bit(15)</code>,表示首部长度占多少个<code>32bit</code>数量,所以，最大首部长度为<code>15*4byte(32bit) = 60</code> byte;</p></li><li><p>typeOfService(TOS):<code>8bit</code>, 服务类型</p></li><li><p>totalLength:<code>16bit</code>,整个ip数据报的长度，子节为单位，所以ip数据报最大长度为<code>0xFF</code>(65536)byte</p></li><li><p>identification:<code>16bit</code>,16位标识，</p></li><li><p>fragmentOffset:<code>16bit</code>,片偏移 <code>3bit标识</code> + <code>13bit片偏移</code></p></li><li><p>TTL :<code>8bit</code>,生存时间，数据包最多可以经过最多的路由数，TTL的初始值由源主机设置（通常为32或64），一旦经过一个处理它的路由器，它的值就减去1。当该字段的值为0时，数据报就被丢弃，并发送ICMP报文通知源主机</p></li><li><p>protocol:<code>8bit</code>，协议</p></li><li><p>checksum: <code>16bit</code>,首部校验和</p></li><li><p>source:<code>32bit</code>,源地址</p></li><li><p>destination:<code>32bit</code>,目的地址</p><pre><code>----</code></pre></li></ul><p>主动关闭的一方会进入TIME_WAIT,此时处于TIME_WAIT状态下的端口是不能用来LISTEN<br>SO_REUSEADDR 开启这个选项后，即使处于TIME_WAIT状态的peer（ip:port），也可以重新使用</p><p>TCP_NO_DELAY: 默认关闭<br>Nagle算法（拥塞控制算法）<br>发送方发送的数据大于等于MSS(Maximum segement size) &#x3D; MTU - IP_HDR - TCP_HDR(tcp双端建立连接后协商的每次传输可接收最大字节数)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jrebel-debug方式启动失败.</title>
      <link href="/2020/11/16/Jrebel-debug%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
      <url>/2020/11/16/Jrebel-debug%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>当已debug方式启动项目时，JVM进程直接就退出了 exit code 1</p><p>项目是spring-boot 2.3.6<br>spring-cloud Hxon-SR7<br>开始以为是spring 版本原因，因为启动之前的项目（spring-boot&#x2F;cloud 1.x)完全正常。</p><p>最终通过控制变量，排除法，找到了问题</p><p>IDEA自2019.3后增加了Reactor Stream debug</p><p>开启这个后，项目就无法以Jrebel -debug方式启动。真坑啊。</p><p>最后找到了Reactor stream debugger.这个插件位置:jb-idea install dir &#x2F;plugins&#x2F;reactivestreams-core</p><p>有时间了反编译下这个插件，看看啥原因</p><p><a href="https://www.jetbrains.com/help/idea/reactor.html#reactor-inspections">https://www.jetbrains.com/help/idea/reactor.html#reactor-inspections</a></p><p><a href="https://blog.jetbrains.com/idea/2019/10/whats-new-in-intellij-idea-2019-3-eap6-improved-reactor-support-and-a-huge-pack-of-fixes/">https://blog.jetbrains.com/idea/2019/10/whats-new-in-intellij-idea-2019-3-eap6-improved-reactor-support-and-a-huge-pack-of-fixes/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android音视频编码.</title>
      <link href="/2020/11/11/Android%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81/"/>
      <url>/2020/11/11/Android%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="MediaCodec"><a href="#MediaCodec" class="headerlink" title="MediaCodec"></a>MediaCodec</h1><h2 id="inputBuffer-用于解码"><a href="#inputBuffer-用于解码" class="headerlink" title="inputBuffer (用于解码)"></a>inputBuffer (用于解码)</h2><h2 id="outputBuffer-用于获取编码后的数据"><a href="#outputBuffer-用于获取编码后的数据" class="headerlink" title="outputBuffer(用于获取编码后的数据)"></a>outputBuffer(用于获取编码后的数据)</h2><p><a href="http://www.aoaoyi.com/?p=601">录屏暂停</a></p><p><a href="https://github.com/google/grafika/blob/master/app/src/main/java/com/android/grafika/VideoEncoderCore.java">VideoEncoderCore</a></p><p><a href="https://github.com/WangShuo1143368701/WSLiveDemo">WSLiveDemo</a></p><p><a href="https://bigflake.com/mediacodec/">编码相关</a></p><p><a href="https://www.jianshu.com/p/b785dde9c0f0">Libyuv</a></p><p><a href="https://github.com/RyanRQ/ScreenRecoder">https://github.com/RyanRQ/ScreenRecoder</a></p><p><a href="https://github.com/HelloHuDi/ScreenCapture">https://github.com/HelloHuDi/ScreenCapture</a></p><p><a href="https://www.twblogs.net/a/5b8dd29b2b7177188340d7da?lang=zh-cn">https://www.twblogs.net/a/5b8dd29b2b7177188340d7da?lang=zh-cn</a></p><p><a href="https://github.com/chienpm304/Zecorder">https://github.com/chienpm304/Zecorder</a></p><p><a href="https://zhuanlan.zhihu.com/p/268441151">https://zhuanlan.zhihu.com/p/268441151</a></p><p><a href="https://github.com/TakuSemba/RtmpPublisher">https://github.com/TakuSemba/RtmpPublisher</a></p><p><a href="https://www.coder.work/article/3500335">https://www.coder.work/article/3500335</a></p><p><a href="https://cloud.tencent.com/developer/article/1580199">https://cloud.tencent.com/developer/article/1580199</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> encoder = <span class="title class_">MediaCodec</span>.<span class="title function_">createEncoderByType</span>(<span class="string">&quot;video/aac&quot;</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> index =  encoder.<span class="title function_">dequeueOutputBuffer</span>(info,<span class="number">10000</span>);</span><br><span class="line">   <span class="keyword">if</span>(index == <span class="string">&quot;INFO_TRY_AGAIN_LATER&quot;</span>)&#123;</span><br><span class="line">       <span class="comment">//TODO</span></span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index == <span class="string">&quot;INFO_OUTPUT_FORMAT_CHANGED&quot;</span>)&#123;</span><br><span class="line">       <span class="comment">//TODO</span></span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index ==<span class="string">&quot;INFO_OUTPUT_BUFFERS_CHANGED&quot;</span>)&#123;</span><br><span class="line">       <span class="comment">//TODO</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>yuv -&gt; h.264</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>公众号强制用户关注研究.</title>
      <link href="/2020/11/06/%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%BA%E5%88%B6%E7%94%A8%E6%88%B7%E5%85%B3%E6%B3%A8%E7%A0%94%E7%A9%B6/"/>
      <url>/2020/11/06/%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%BA%E5%88%B6%E7%94%A8%E6%88%B7%E5%85%B3%E6%B3%A8%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="微信公众号h5页面"><a href="#微信公众号h5页面" class="headerlink" title="微信公众号h5页面"></a>微信公众号h5页面</h1><h2 id="关键知识"><a href="#关键知识" class="headerlink" title="关键知识"></a>关键知识</h2><ul><li><p><code>uin</code> : 微信公众号&#x2F;账户 唯一id</p></li><li><p><code>username</code> : 微信公众号&#x2F;账户的用户名 微信后端自动生成？</p></li><li><p><code>username</code> 的获取可以通过找到公众号页面，然后点击“举报”，这时候可以通过抓包的方式，或者<code>chrome-remote-debug</code>查看“举报”页面的<code>url</code>中的<code>username</code>参数.</p></li></ul><h2 id="公众号资料页"><a href="#公众号资料页" class="headerlink" title="公众号资料页"></a>公众号资料页</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//微信公众号的唯一数字码?</span></span><br><span class="line"><span class="keyword">var</span> uni = <span class="string">&#x27;123545&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> uniBase64 = <span class="title function_">b64</span>(uni);</span><br><span class="line"><span class="keyword">var</span> mpPforileUrl = <span class="string">`https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=<span class="subst">$&#123;uniBase64&#125;</span>#wechat_redirect`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/mp/profile_ext?action=report&uin=777&key=777&pass_ticket=fPx54kmr6jcYdnK8qI81wat4YVhJG3imtE6y2boI0KMfM+cLv5bZD7MdmM5YrSrI&username=&useraction=%5Bobject">https://mp.weixin.qq.com/mp/profile_ext?action=report&amp;uin=777&amp;key=777&amp;pass_ticket=fPx54kmr6jcYdnK8qI81wat4YVhJG3imtE6y2boI0KMfM+cLv5bZD7MdmM5YrSrI&amp;username=&amp;useraction=[object</a> Object]&amp;t&#x3D;0.8240767701548524&amp;scene&#x3D;&amp;__biz&#x3D;MzU0MzExMzIwOA&#x3D;&#x3D;&amp;is_ok&#x3D;1&amp;fromplatform&#x3D;3</p><h3 id="静默自动关注"><a href="#静默自动关注" class="headerlink" title="静默自动关注"></a>静默自动关注</h3><p>页面引入wx-js-sdk后</p><p>执行如下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> username= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//config</span></span><br><span class="line"><span class="comment">// 这里获取js签名参数.</span></span><br><span class="line"><span class="keyword">var</span> meta = &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">   <span class="variable language_">window</span>.<span class="property">wx</span> &amp;&amp; wx.<span class="title function_">config</span>(&#123;</span><br><span class="line">        <span class="attr">debug</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">beta</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">appId</span>: meta.<span class="property">appid</span>,</span><br><span class="line">        <span class="attr">timestamp</span>: meta.<span class="property">timestamp</span>,</span><br><span class="line">        <span class="attr">nonceStr</span>: meta.<span class="property">noncestr</span>,</span><br><span class="line">        <span class="attr">signature</span>: meta.<span class="property">signature</span>,</span><br><span class="line">        <span class="attr">jsApiList</span>: [<span class="string">&quot;quicklyAddBrandContact&quot;</span>]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">(wx.<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">invoke</span>(<span class="string">&quot;quicklyAddBrandContact&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">username</span>: username,</span><br><span class="line">        <span class="attr">scene</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">//&#123;&quot;err_msg&quot;:&quot;quickly_add_contact:ok&quot;&#125;</span></span><br><span class="line">        <span class="comment">//备注如果 e.err_msg 中包含ok则表示关注成功</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)<span class="comment">//这时候可能会失败，然后需要执行</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;),</span><br><span class="line">    wx.<span class="title function_">error</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 插件总结.</title>
      <link href="/2020/11/03/IDEA%20%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93/"/>
      <url>/2020/11/03/IDEA%20%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="插件开发相关资源"><a href="#插件开发相关资源" class="headerlink" title="插件开发相关资源"></a>插件开发相关资源</h1><h2 id="IDEA平台版本号"><a href="#IDEA平台版本号" class="headerlink" title="IDEA平台版本号"></a>IDEA平台版本号</h2><p><a href="https://plugins.jetbrains.com/docs/intellij/build-number-ranges.html#intellij-platform-based-products-of-recent-ide-versions">IntelliJ Platform Based Products of Recent IDE Versions</a></p><h2 id="API变更说明"><a href="#API变更说明" class="headerlink" title="API变更说明"></a>API变更说明</h2><p><a href="https://plugins.jetbrains.com/docs/intellij/api-changes-list.html">Api changes</a></p><h2 id="使用Gradle构建"><a href="#使用Gradle构建" class="headerlink" title="使用Gradle构建"></a>使用Gradle构建</h2><p><a href="https://plugins.jetbrains.com/docs/intellij/gradle-build-system.html?from=jetbrains.org">Building Plugins with Gradle</a></p><h1 id="插件的扩展点-amp-amp-组件说明"><a href="#插件的扩展点-amp-amp-组件说明" class="headerlink" title="插件的扩展点 &amp;&amp; 组件说明"></a>插件的扩展点 &amp;&amp; 组件说明</h1><h1 id="ApplicationComponent"><a href="#ApplicationComponent" class="headerlink" title="ApplicationComponent"></a>ApplicationComponent</h1><p> <code>initComponent</code>只会回调一次，无论打开多个Project窗口</p><h1 id="ToolWindowFactory"><a href="#ToolWindowFactory" class="headerlink" title="ToolWindowFactory"></a>ToolWindowFactory</h1><p> 只实例化一次</p><h1 id="AnAction"><a href="#AnAction" class="headerlink" title="AnAction"></a>AnAction</h1><p> action被点击后，可以通过回调获取当前Project</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(AnActionEvent e)</span>&#123;</span><br><span class="line">    <span class="type">Project</span> <span class="variable">project</span> <span class="operator">=</span> e.getDataContext().getData(PlatformDataKeys.PROJECT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="查询API使用方式"><a href="#查询API使用方式" class="headerlink" title="查询API使用方式"></a>查询API使用方式</h1><p> <a href="https://www.programcreek.com/java-api-examples/?api=com.intellij.execution.filters.TextConsoleBuilderFactory">https://www.programcreek.com/java-api-examples/?api=com.intellij.execution.filters.TextConsoleBuilderFactory</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h1 id="JRebel插件"><a href="#JRebel插件" class="headerlink" title="JRebel插件"></a>JRebel插件</h1><ol><li>jrebel-config-client.jar 包含jrebel扩展参数。</li></ol><p> RebelArgs</p><p> JrebelConfiguration</p><p> LunchingArgs</p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring gateway.</title>
      <link href="/2020/10/30/spring%20gateway/"/>
      <url>/2020/10/30/spring%20gateway/</url>
      
        <content type="html"><![CDATA[<h2 id="RouteDefination-路由定义，配置文件中的-convert-Route-实际使用的路由信息"><a href="#RouteDefination-路由定义，配置文件中的-convert-Route-实际使用的路由信息" class="headerlink" title="RouteDefination : 路由定义，配置文件中的    |    | convert    | Route : 实际使用的路由信息"></a>RouteDefination : 路由定义，配置文件中的<br>    |<br>    | convert<br>    |<br> Route : 实际使用的路由信息</h2><p>RouteDefinationLocator</p><p>RouteLocator</p><p>Request links</p><p>ReactorNetty<br>    |<br>HttpServerHandle<br>    |<br>ReactorHttpHandlerAdapter<br>    |<br>WebServerManager<br>    |<br>HttpWebHandlerAdapter<br>    |<br>ExceptionhandlingWebHandler<br>    |<br>FilteringWebHandler<br>    |<br>DefaultWebFilterChain<br>    |<br>DispatcherHandler<br>    |<br>RoutePredicateHandlerMapping<br>    |<br>SimpleHandlerAdapter<br>    |<br>FilteringWebHandler<br>    |<br>ReactiveLoadBalancerClientFilter<br>    |<br>ReactorLoadBalancer</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity.</title>
      <link href="/2020/10/28/SpringSecurity/"/>
      <url>/2020/10/28/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<h1 id="Architecture-Components"><a href="#Architecture-Components" class="headerlink" title="Architecture Components"></a>Architecture Components</h1><h2 id="SecurityContextHodler"><a href="#SecurityContextHodler" class="headerlink" title="SecurityContextHodler"></a>SecurityContextHodler</h2><p> ThreadLocal相关的安全上下文Holder</p><h2 id="SecurityContext"><a href="#SecurityContext" class="headerlink" title="SecurityContext"></a>SecurityContext</h2><p>包含 Authtication对象，用于获取当前已认证的用户信息</p><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><ol><li><p>未认证之前的包含用户提供凭证信息，交给 <code>AuthenticationManager</code> 处理</p></li><li><p>认证完成后的包含用户认证信息，通常托管在<code>SecurityContext</code>。</p></li></ol><h2 id="GrantedAuthority"><a href="#GrantedAuthority" class="headerlink" title="GrantedAuthority"></a>GrantedAuthority</h2><p>在用户认证中授予给用户的权限</p><h2 id="AuthenticationManager"><a href="#AuthenticationManager" class="headerlink" title="AuthenticationManager"></a>AuthenticationManager</h2><p>定义了<code>SpringSecurity</code>过滤器如何执行身份验证的API</p><h2 id="ProviderManager"><a href="#ProviderManager" class="headerlink" title="ProviderManager"></a>ProviderManager</h2><p><code>AuthenticationManager</code> 的一个实现</p><h2 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a>AuthenticationProvider</h2><p>由<code>ProviderManager</code>用于执行特定类型的身份验证</p><h2 id="Request-Credentials-with-AuthenticationEntryPoint"><a href="#Request-Credentials-with-AuthenticationEntryPoint" class="headerlink" title="Request Credentials with AuthenticationEntryPoint"></a>Request Credentials with AuthenticationEntryPoint</h2><p>用于从客户端请求凭证(即重定向到登录页面，发送一个WWW-Authenticate响应，等等)</p><h2 id="AbstractAuthenticationProcessingFilter"><a href="#AbstractAuthenticationProcessingFilter" class="headerlink" title="AbstractAuthenticationProcessingFilter"></a>AbstractAuthenticationProcessingFilter</h2><p>用于身份验证的基本过滤器。这还可以很好地了解身份验证的高级流程以及各个部分如何协同工作。</p><h1 id="Authentication-Mechanisms"><a href="#Authentication-Mechanisms" class="headerlink" title="Authentication Mechanisms"></a>Authentication Mechanisms</h1><p>用户身份验证机制</p><h2 id="Username-and-Password"><a href="#Username-and-Password" class="headerlink" title="Username and Password"></a>Username and Password</h2><p>如何通过用户名密码进行认证</p><h2 id="OAuth-2-0-Login"><a href="#OAuth-2-0-Login" class="headerlink" title="OAuth 2.0 Login"></a>OAuth 2.0 Login</h2><p>使用OpenID Connect和非标准OAuth 2.0登录进行OAuth 2.0登录（如Github等…）</p><h2 id="SAML-2-0-Login"><a href="#SAML-2-0-Login" class="headerlink" title="SAML 2.0 Login"></a>SAML 2.0 Login</h2><h2 id="Central-Authentication-Server-CAS"><a href="#Central-Authentication-Server-CAS" class="headerlink" title="Central Authentication Server (CAS)"></a>Central Authentication Server (CAS)</h2><h2 id="Remember-Me"><a href="#Remember-Me" class="headerlink" title="Remember Me"></a>Remember Me</h2><h2 id="JAAS-Authentication"><a href="#JAAS-Authentication" class="headerlink" title="JAAS Authentication"></a>JAAS Authentication</h2><h2 id="OpenID"><a href="#OpenID" class="headerlink" title="OpenID"></a>OpenID</h2><h2 id="Pre-Authentication-Scenarios"><a href="#Pre-Authentication-Scenarios" class="headerlink" title="Pre-Authentication Scenarios"></a>Pre-Authentication Scenarios</h2><h2 id="X509-Authentication"><a href="#X509-Authentication" class="headerlink" title="X509 Authentication"></a>X509 Authentication</h2><h1 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h1><p><img src="https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/images/servlet/authentication/architecture/securitycontextholder.png" alt="SecurityContextHolder"></p><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><p>Authentication-server</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TokenEndpoint </span><br><span class="line"></span><br><span class="line">`/oauth/token`</span><br><span class="line"></span><br><span class="line">incoming request</span><br><span class="line">     |</span><br><span class="line">SecurityFilterChain</span><br><span class="line">     |</span><br><span class="line">AbstractAuthenticationProcessingFilter</span><br><span class="line">     |</span><br><span class="line">ClientCredentialsTokenEndpointFilter</span><br><span class="line">     |</span><br><span class="line">AuthenticationManager</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line"> ProviderManager       </span><br><span class="line">-              -</span><br><span class="line">        | </span><br><span class="line">AuthenticationProvider</span><br><span class="line">        |</span><br><span class="line">AbstractUserDetailsAuthenticationProvider</span><br><span class="line">        |</span><br><span class="line">DaoAuthenticationProvider        </span><br><span class="line">        |</span><br><span class="line">TokenEndpoint</span><br><span class="line">        |</span><br><span class="line">    authenticate-&gt;tokenGrant-&gt;return</span><br><span class="line"></span><br><span class="line">ClientDetails</span><br><span class="line"> --&gt;</span><br><span class="line">    AuthorizedGrantTypes</span><br><span class="line">    -&gt; password,xxx,xxx,xxx</span><br></pre></td></tr></table></figure><h2 id="检查token"><a href="#检查token" class="headerlink" title="检查token"></a>检查token</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authentication-server</span><br><span class="line"></span><br><span class="line">CheckTokenEndpoint</span><br><span class="line"></span><br><span class="line">`/oauth/check_token`</span><br><span class="line"></span><br><span class="line">imcomping request</span><br><span class="line">        |</span><br><span class="line">OAuth2AuthenticationProcessingFilter</span><br><span class="line">        |</span><br><span class="line">OAuth2AuthenticationManager#loadAuthentication</span><br><span class="line">·       |        </span><br><span class="line">RemoteTokenServices 验证token正确性</span><br><span class="line">        |</span><br><span class="line">AccessTokenConverter </span><br><span class="line">        |</span><br><span class="line">UserAuthenticationConverter 从map中获取认证信息(principal，authorities)</span><br><span class="line"></span><br><span class="line">        -&gt; FixedAuthoritiesExtractor 获取权限列表</span><br><span class="line"></span><br><span class="line">        -&gt; UserDetailsService 获取principal认证信息（可以表示为用户信息）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis.</title>
      <link href="/2020/10/13/mybatis/"/>
      <url>/2020/10/13/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h1><p> MapperProxy<br>    MapperMethod<br>        -&gt;SqlCommand<br>              statementId: mapperInterface.getName() + “.” + methodName;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dva &amp;&amp; vuex.</title>
      <link href="/2020/09/22/dva%20&amp;&amp;%20vuex/"/>
      <url>/2020/09/22/dva%20&amp;&amp;%20vuex/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">DvaJs</th><th align="center">Vuex</th></tr></thead><tbody><tr><td align="left">Effect</td><td align="center">Action</td></tr><tr><td align="left">Reducer</td><td align="center">Mutation</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>network layer.</title>
      <link href="/2020/09/17/network%20layer/"/>
      <url>/2020/09/17/network%20layer/</url>
      
        <content type="html"><![CDATA[<p>Ethernet II (RFC 894)<br>    destination(6 byte)<br>    source (6 byte)<br>    type: (2 byte)(ARP,IPv4,IPv6)<br>Internet Protocol Version 4</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JPA总结.</title>
      <link href="/2020/09/15/JPA%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/15/JPA%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><code>@PersistenceContext</code></p><p>PersistenceAnnotationBeanPostProcessor</p><p>SharedEntityManagerInvocationHandler</p><p><code>@OneToOne</code></p><p><code>mappyedBy</code>:拥有关系的字段。此元素仅在关联的反向(非拥有)端指定。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line">User:</span><br><span class="line">    id</span><br><span class="line">    name</span><br><span class="line">    @OneToOne(mappedBy=&quot;user&quot;)</span><br><span class="line">    Config config</span><br><span class="line"></span><br><span class="line">Config:</span><br><span class="line">    key</span><br><span class="line">    value</span><br><span class="line">    @OneToOne</span><br><span class="line">    User user</span><br><span class="line">    </span><br><span class="line">config 表里会有个user_id的字段    </span><br></pre></td></tr></table></figure><p><code>@OntToMany</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line">User:</span><br><span class="line">    id</span><br><span class="line">    name</span><br><span class="line">    @OneToMany(mappedBy=&quot;user&quot;)</span><br><span class="line">    List&lt;Order&gt; orders;</span><br><span class="line"></span><br><span class="line">Order:</span><br><span class="line">    id:</span><br><span class="line">    @ManyToOne</span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">order 表到时候会有一个user_id的外键</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ顺序消费实现原理分析</title>
      <link href="/2020/06/30/RocketMQ%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2020/06/30/RocketMQ%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>RocketMQ顺序消费实现原理简要分析(基于最新的<code>4.7.1</code>)<br> <escape><span id="more"></span></escape></p><h1 id="顺序消费-VS-并发消费"><a href="#顺序消费-VS-并发消费" class="headerlink" title="顺序消费 VS 并发消费"></a>顺序消费 VS 并发消费</h1><p>假如生产者投递了三条消息(M1,M2,M3)到topicM</p><h2 id="并发消费"><a href="#并发消费" class="headerlink" title="并发消费"></a>并发消费</h2><p>并发消费时如下图所示</p><p><img src="https://static01.imgkr.com/temp/2dd45dc4a29c4dcf92ef1ae0ff67083b.png" alt="ConsumeConcurrently"></p><p>消费顺序是乱序的，可能是M1被先消费，或者M2…</p><p>因为消费者是多线程的，每个线程得到CPU调度的时序得不到保证，每个线程都有可能消费到队列中拉取到的任意消息.</p><h2 id="顺序消费"><a href="#顺序消费" class="headerlink" title="顺序消费"></a>顺序消费</h2><p>顺序消费时如下图</p><p><img src="https://static01.imgkr.com/temp/c6dd7e995c3a49748a9f22daa268a7d1.png" alt="ConsumeOrderly"></p><p>针对同一批次消息的不同状态，投递到同一队列.</p><p>拉取消息之前对队列加锁，保证同一消费组的多个消费实例，只能有一个实例能够拉取到消息.</p><p>拉取消息成功后，对消息队列使用<code>synchronized</code>关键字同步，消息只能由一个线程消费.</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>一段简短的消费端代码,摘抄自<a href="https://rocketmq.apache.org/docs/order-example/">rocketmq官网</a></p><p>生产者代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderedProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//Instantiate with a producer group name.</span></span><br><span class="line">        <span class="type">MQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;example_group_name&quot;</span>);</span><br><span class="line">        <span class="comment">//Launch the instance.</span></span><br><span class="line">        producer.start();</span><br><span class="line">        String[] tags = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;TagB&quot;</span>, <span class="string">&quot;TagC&quot;</span>, <span class="string">&quot;TagD&quot;</span>, <span class="string">&quot;TagE&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">orderId</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;TopicTestjjj&quot;</span>, tags[i % tags.length], <span class="string">&quot;KEY&quot;</span> + i,</span><br><span class="line">                    (<span class="string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">                    <span class="comment">//发消息时使用MessageQueueSelector,保证了相同订单id的消息发送到同一MessageQueue</span></span><br><span class="line">            <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg, <span class="keyword">new</span> <span class="title class_">MessageQueueSelector</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MessageQueue <span class="title function_">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) arg;</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> id % mqs.size();</span><br><span class="line">                <span class="keyword">return</span> mqs.get(index);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;, orderId);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//server shutdown</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderedConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;example_group_name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line"></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;TopicTest&quot;</span>, <span class="string">&quot;TagA || TagC || TagD&quot;</span>);</span><br><span class="line"></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerOrderly</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">AtomicLong</span> <span class="variable">consumeTimes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeOrderlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span><br><span class="line"><span class="params">                                                       ConsumeOrderlyContext context)</span> &#123;</span><br><span class="line">                context.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">                System.out.printf(Thread.currentThread().getName() + <span class="string">&quot; Receive New Messages: &quot;</span> + msgs + <span class="string">&quot;%n&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.consumeTimes.incrementAndGet();</span><br><span class="line">                <span class="keyword">if</span> ((<span class="built_in">this</span>.consumeTimes.get() % <span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">this</span>.consumeTimes.get() % <span class="number">3</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ConsumeOrderlyStatus.ROLLBACK;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">this</span>.consumeTimes.get() % <span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ConsumeOrderlyStatus.COMMIT;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">this</span>.consumeTimes.get() % <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    context.setSuspendCurrentQueueTimeMillis(<span class="number">3000</span>);</span><br><span class="line">                    <span class="keyword">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;Consumer Started.%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拉消息流程"><a href="#拉消息流程" class="headerlink" title="拉消息流程"></a>拉消息流程</h3><p>上述代码在给<code>consumer</code>注册消息监听器时，使用了<code>MessageListenerOrderly</code>(关键)</p><p><code>consumer#start()</code>启动逻辑</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">       setConsumerGroup(NamespaceUtil.wrapNamespace(<span class="built_in">this</span>.getNamespace(), <span class="built_in">this</span>.consumerGroup));</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">       <span class="built_in">this</span>.defaultMQPushConsumerImpl.start();</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> != traceDispatcher) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               traceDispatcher.start(<span class="built_in">this</span>.getNamesrvAddr(), <span class="built_in">this</span>.getAccessChannel());</span><br><span class="line">           &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">               log.warn(<span class="string">&quot;trace dispatcher start failed &quot;</span>, e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用<code>org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl#start</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.serviceState) &#123;</span><br><span class="line">            <span class="comment">//....</span></span><br><span class="line">            <span class="comment">//根据服务状态，做不同的逻辑处理</span></span><br><span class="line">            <span class="comment">//初始化 mqClientFactory</span></span><br><span class="line">            <span class="comment">//初始化RebalanceImpl(设置消费模型，设置消费组，设置消息队列分配策略)</span></span><br><span class="line">            <span class="comment">//根据消息监听器的实例类型确定是否顺序消费，然后初始化ConsumeMessageService</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.updateTopicSubscribeInfoWhenSubscriptionChanged();</span><br><span class="line">        <span class="built_in">this</span>.mQClientFactory.checkClientInBroker();</span><br><span class="line">        <span class="built_in">this</span>.mQClientFactory.sendHeartbeatToAllBrokerWithLock();</span><br><span class="line">        <span class="comment">//立即拉取消息</span></span><br><span class="line">        <span class="built_in">this</span>.mQClientFactory.rebalanceImmediately();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述RebalanceImpl的实现类为(RebalancePushImpl)</p><h3 id="rebalanceImmediately"><a href="#rebalanceImmediately" class="headerlink" title="rebalanceImmediately"></a>rebalanceImmediately</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rebalanceImmediately</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.rebalanceService.wakeup();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>唤醒RebalanceService</p><h3 id="RebalanceService-run"><a href="#RebalanceService-run" class="headerlink" title="RebalanceService#run"></a>RebalanceService#run</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 默认等待时间20秒</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">waitInterval</span> <span class="operator">=</span></span><br><span class="line">        Long.parseLong(System.getProperty(</span><br><span class="line">            <span class="string">&quot;rocketmq.client.rebalance.waitInterval&quot;</span>, <span class="string">&quot;20000&quot;</span>));</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service started&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">this</span>.isStopped()) &#123;</span><br><span class="line">            <span class="comment">//这里等待间隔为20s秒，内部使用了重写的ContdownLatch2</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.waitForRunning(waitInterval);</span><br><span class="line">            <span class="built_in">this</span>.mqClientFactory.doRebalance();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mqClientFactory-doRebalance"><a href="#mqClientFactory-doRebalance" class="headerlink" title="mqClientFactory.doRebalance()"></a>mqClientFactory.doRebalance()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRebalance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// key为consumerGroup,value为MQConsumer实例</span></span><br><span class="line">     <span class="keyword">for</span> (Map.Entry&lt;String, MQConsumerInner&gt; entry : <span class="built_in">this</span>.consumerTable.entrySet()) &#123;</span><br><span class="line">         <span class="type">MQConsumerInner</span> <span class="variable">impl</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">         <span class="keyword">if</span> (impl != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 impl.doRebalance();</span><br><span class="line">             &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                 log.error(<span class="string">&quot;doRebalance exception&quot;</span>, e);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="MQConsumerInner-doRebalance"><a href="#MQConsumerInner-doRebalance" class="headerlink" title="MQConsumerInner#doRebalance"></a>MQConsumerInner#doRebalance</h3><p>此处<code>MQConsumerInner</code>的实现类为<code>DefaultMqPushConsumerImpl</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRebalance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.pause) &#123;</span><br><span class="line">          <span class="built_in">this</span>.rebalanceImpl.doRebalance(<span class="built_in">this</span>.isConsumeOrderly());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="rebalanceImpl-doRebalance"><a href="#rebalanceImpl-doRebalance" class="headerlink" title="rebalanceImpl.doRebalance"></a>rebalanceImpl.doRebalance</h3><p>此处的<code>rebalanceImpl</code>实现类为<code>RebalancePushImpl</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRebalance</span><span class="params">(<span class="keyword">final</span> <span class="type">boolean</span> isOrder)</span> &#123;</span><br><span class="line">    <span class="comment">//key为topic,value为相关订阅配置信息</span></span><br><span class="line">       Map&lt;String, SubscriptionData&gt; subTable = <span class="built_in">this</span>.getSubscriptionInner();</span><br><span class="line">       <span class="keyword">if</span> (subTable != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//遍历每一个topic，拉取消息</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">final</span> Map.Entry&lt;String, SubscriptionData&gt; entry : subTable.entrySet()) &#123;</span><br><span class="line">               <span class="keyword">final</span> <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="built_in">this</span>.rebalanceByTopic(topic, isOrder);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">                       log.warn(<span class="string">&quot;rebalanceByTopic Exception&quot;</span>, e);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.truncateMessageQueueNotMyTopic();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="rebalanceImpl-rebalanceByTopic"><a href="#rebalanceImpl-rebalanceByTopic" class="headerlink" title="rebalanceImpl.rebalanceByTopic"></a>rebalanceImpl.rebalanceByTopic</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rebalanceByTopic</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="type">boolean</span> isOrder)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (messageModel) &#123;</span><br><span class="line">            <span class="comment">//广播模式下拉取对应topic所有队列的消息</span></span><br><span class="line">            <span class="comment">//也就是说同一消费组下的每个consumer都可以消费同一topic下的每条消息</span></span><br><span class="line">            <span class="keyword">case</span> BROADCASTING: &#123;</span><br><span class="line">                Set&lt;MessageQueue&gt; mqSet = <span class="built_in">this</span>.topicSubscribeInfoTable.get(topic);</span><br><span class="line">                <span class="keyword">if</span> (mqSet != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> <span class="built_in">this</span>.updateProcessQueueTableInRebalance(topic, mqSet, isOrder);</span><br><span class="line">                    <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.messageQueueChanged(topic, mqSet, mqSet);</span><br><span class="line">                        log.info(<span class="string">&quot;messageQueueChanged &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>,</span><br><span class="line">                            consumerGroup,</span><br><span class="line">                            topic,</span><br><span class="line">                            mqSet,</span><br><span class="line">                            mqSet);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;doRebalance, &#123;&#125;, but the topic[&#123;&#125;] not exist.&quot;</span>, consumerGroup, topic);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//集群模式下根据队列分配策略，拉取分配到的队列的消息</span></span><br><span class="line">            <span class="keyword">case</span> CLUSTERING: &#123;</span><br><span class="line">                Set&lt;MessageQueue&gt; mqSet = <span class="built_in">this</span>.topicSubscribeInfoTable.get(topic);</span><br><span class="line">                List&lt;String&gt; cidAll = <span class="built_in">this</span>.mQClientFactory.findConsumerIdList(topic, consumerGroup);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == mqSet) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">                        log.warn(<span class="string">&quot;doRebalance, &#123;&#125;, but the topic[&#123;&#125;] not exist.&quot;</span>, consumerGroup, topic);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == cidAll) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;doRebalance, &#123;&#125; &#123;&#125;, get consumer id list failed&quot;</span>, consumerGroup, topic);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mqSet != <span class="literal">null</span> &amp;&amp; cidAll != <span class="literal">null</span>) &#123;</span><br><span class="line">                    List&lt;MessageQueue&gt; mqAll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;MessageQueue&gt;();</span><br><span class="line">                    mqAll.addAll(mqSet);</span><br><span class="line"></span><br><span class="line">                    Collections.sort(mqAll);</span><br><span class="line">                    Collections.sort(cidAll);</span><br><span class="line"></span><br><span class="line">                    <span class="type">AllocateMessageQueueStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="built_in">this</span>.allocateMessageQueueStrategy;</span><br><span class="line"></span><br><span class="line">                    List&lt;MessageQueue&gt; allocateResult = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        allocateResult = strategy.allocate(</span><br><span class="line">                            <span class="built_in">this</span>.consumerGroup,</span><br><span class="line">                            <span class="built_in">this</span>.mQClientFactory.getClientId(),</span><br><span class="line">                            mqAll,</span><br><span class="line">                            cidAll);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;AllocateMessageQueueStrategy.allocate Exception. allocateMessageQueueStrategyName=&#123;&#125;&quot;</span>, strategy.getName(),</span><br><span class="line">                            e);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Set&lt;MessageQueue&gt; allocateResultSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;MessageQueue&gt;();</span><br><span class="line">                    <span class="keyword">if</span> (allocateResult != <span class="literal">null</span>) &#123;</span><br><span class="line">                        allocateResultSet.addAll(allocateResult);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> <span class="built_in">this</span>.updateProcessQueueTableInRebalance(topic, allocateResultSet, isOrder);</span><br><span class="line">                    <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">                        log.info(</span><br><span class="line">                            <span class="string">&quot;rebalanced result changed. allocateMessageQueueStrategyName=&#123;&#125;, group=&#123;&#125;, topic=&#123;&#125;, clientId=&#123;&#125;, mqAllSize=&#123;&#125;, cidAllSize=&#123;&#125;, rebalanceResultSize=&#123;&#125;, rebalanceResultSet=&#123;&#125;&quot;</span>,</span><br><span class="line">                            strategy.getName(), consumerGroup, topic, <span class="built_in">this</span>.mQClientFactory.getClientId(), mqSet.size(), cidAll.size(),</span><br><span class="line">                            allocateResultSet.size(), allocateResultSet);</span><br><span class="line">                        <span class="built_in">this</span>.messageQueueChanged(topic, mqSet, allocateResultSet);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="rebalanceImpl-updateProcessQueueTableInRebalance"><a href="#rebalanceImpl-updateProcessQueueTableInRebalance" class="headerlink" title="rebalanceImpl#updateProcessQueueTableInRebalance"></a>rebalanceImpl#updateProcessQueueTableInRebalance</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> topic 消息主题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mqSet 消息队列集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isOrder 是否顺序消费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">updateProcessQueueTableInRebalance</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> Set&lt;MessageQueue&gt; mqSet,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> <span class="type">boolean</span> isOrder)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每个MessageQueue对应一个ProcessQueue(mq的快照)</span></span><br><span class="line">        Iterator&lt;Entry&lt;MessageQueue, ProcessQueue&gt;&gt; it = <span class="built_in">this</span>.processQueueTable.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Entry&lt;MessageQueue, ProcessQueue&gt; next = it.next();</span><br><span class="line">            <span class="type">MessageQueue</span> <span class="variable">mq</span> <span class="operator">=</span> next.getKey();</span><br><span class="line">            <span class="type">ProcessQueue</span> <span class="variable">pq</span> <span class="operator">=</span> next.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mq.getTopic().equals(topic)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mqSet.contains(mq)) &#123;</span><br><span class="line">                    pq.setDropped(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.removeUnnecessaryMessageQueue(mq, pq)) &#123;</span><br><span class="line">                        it.remove();</span><br><span class="line">                        changed = <span class="literal">true</span>;</span><br><span class="line">                        log.info(<span class="string">&quot;doRebalance, &#123;&#125;, remove unnecessary mq, &#123;&#125;&quot;</span>, consumerGroup, mq);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//检查距离上次拉取消息的时间是否大于拉取的最大空闲时间（默认120s)</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pq.isPullExpired()) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (<span class="built_in">this</span>.consumeType()) &#123;</span><br><span class="line">                        <span class="keyword">case</span> CONSUME_ACTIVELY:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> CONSUME_PASSIVELY:</span><br><span class="line">                            pq.setDropped(<span class="literal">true</span>);</span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">this</span>.removeUnnecessaryMessageQueue(mq, pq)) &#123;</span><br><span class="line">                                it.remove();</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                log.error(<span class="string">&quot;[BUG]doRebalance, &#123;&#125;, remove unnecessary mq, &#123;&#125;, because pull is pause, so try to fixed it&quot;</span>,</span><br><span class="line">                                    consumerGroup, mq);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拉消息的requetTask</span></span><br><span class="line">        List&lt;PullRequest&gt; pullRequestList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;PullRequest&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MessageQueue mq : mqSet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.processQueueTable.containsKey(mq)) &#123;</span><br><span class="line">                <span class="comment">//客户端顺序消费，则锁定对应的mq</span></span><br><span class="line">                <span class="keyword">if</span> (isOrder &amp;&amp; !<span class="built_in">this</span>.lock(mq)) &#123;</span><br><span class="line">                    <span class="comment">//加锁失败的话，默认就忽略该mq</span></span><br><span class="line">                    log.warn(<span class="string">&quot;doRebalance, &#123;&#125;, add a new mq failed, &#123;&#125;, because lock failed&quot;</span>, consumerGroup, mq);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.removeDirtyOffset(mq);</span><br><span class="line">                <span class="type">ProcessQueue</span> <span class="variable">pq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessQueue</span>();</span><br><span class="line">                <span class="type">long</span> <span class="variable">nextOffset</span> <span class="operator">=</span> <span class="built_in">this</span>.computePullFromWhere(mq);</span><br><span class="line">                <span class="keyword">if</span> (nextOffset &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">ProcessQueue</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="built_in">this</span>.processQueueTable.putIfAbsent(mq, pq);</span><br><span class="line">                    <span class="keyword">if</span> (pre != <span class="literal">null</span>) &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;doRebalance, &#123;&#125;, mq already exists, &#123;&#125;&quot;</span>, consumerGroup, mq);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//创建PullRequest</span></span><br><span class="line">                        log.info(<span class="string">&quot;doRebalance, &#123;&#125;, add a new mq, &#123;&#125;&quot;</span>, consumerGroup, mq);</span><br><span class="line">                        <span class="type">PullRequest</span> <span class="variable">pullRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PullRequest</span>();</span><br><span class="line">                        pullRequest.setConsumerGroup(consumerGroup);</span><br><span class="line">                        pullRequest.setNextOffset(nextOffset);</span><br><span class="line">                        pullRequest.setMessageQueue(mq);</span><br><span class="line">                        pullRequest.setProcessQueue(pq);</span><br><span class="line">                        pullRequestList.add(pullRequest);</span><br><span class="line">                        changed = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;doRebalance, &#123;&#125;, add new mq failed, &#123;&#125;&quot;</span>, consumerGroup, mq);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把PullRequest提交到PullMessageServcie中的pullRequestQueue</span></span><br><span class="line">        <span class="built_in">this</span>.dispatchPullRequest(pullRequestList);</span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实际拉消息的逻辑DefaultMQPushConsumerImpl-pullMessage"><a href="#实际拉消息的逻辑DefaultMQPushConsumerImpl-pullMessage" class="headerlink" title="实际拉消息的逻辑DefaultMQPushConsumerImpl#pullMessage"></a>实际拉消息的逻辑DefaultMQPushConsumerImpl#pullMessage</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pullMessage</span><span class="params">(<span class="keyword">final</span> PullRequest pullRequest)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ProcessQueue</span> <span class="variable">processQueue</span> <span class="operator">=</span> pullRequest.getProcessQueue();</span><br><span class="line">       <span class="keyword">if</span> (processQueue.isDropped()) &#123;</span><br><span class="line">           log.info(<span class="string">&quot;the pull request[&#123;&#125;] is dropped.&quot;</span>, pullRequest.toString());</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//设置最新的拉取消息时间</span></span><br><span class="line">       processQueue.setLastPullTimestamp(System.currentTimeMillis());</span><br><span class="line">       <span class="comment">//...省略</span></span><br><span class="line">       <span class="comment">//拉取消息后的回调</span></span><br><span class="line">       <span class="type">PullCallback</span> <span class="variable">pullCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PullCallback</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(PullResult pullResult)</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (pullResult != <span class="literal">null</span>) &#123;</span><br><span class="line">                   pullResult = DefaultMQPushConsumerImpl.<span class="built_in">this</span>.pullAPIWrapper.processPullResult(pullRequest.getMessageQueue(), pullResult,</span><br><span class="line">                       subscriptionData);</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class="line">                       <span class="keyword">case</span> FOUND:</span><br><span class="line">                           <span class="type">long</span> <span class="variable">prevRequestOffset</span> <span class="operator">=</span> pullRequest.getNextOffset();</span><br><span class="line">                           pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line">                           <span class="type">long</span> <span class="variable">pullRT</span> <span class="operator">=</span> System.currentTimeMillis() - beginTimestamp;</span><br><span class="line">                           DefaultMQPushConsumerImpl.<span class="built_in">this</span>.getConsumerStatsManager().incPullRT(pullRequest.getConsumerGroup(),</span><br><span class="line">                               pullRequest.getMessageQueue().getTopic(), pullRT);</span><br><span class="line"></span><br><span class="line">                           <span class="type">long</span> <span class="variable">firstMsgOffset</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">                           <span class="comment">//拉取到的消息为空</span></span><br><span class="line">                           <span class="keyword">if</span> (pullResult.getMsgFoundList() == <span class="literal">null</span> || pullResult.getMsgFoundList().isEmpty()) &#123;</span><br><span class="line">                               <span class="comment">//把PullRequest再次提交到任务队列</span></span><br><span class="line">                               DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestImmediately(pullRequest);</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               firstMsgOffset = pullResult.getMsgFoundList().get(<span class="number">0</span>).getQueueOffset();</span><br><span class="line"></span><br><span class="line">                               DefaultMQPushConsumerImpl.<span class="built_in">this</span>.getConsumerStatsManager().incPullTPS(pullRequest.getConsumerGroup(),</span><br><span class="line">                                   pullRequest.getMessageQueue().getTopic(), pullResult.getMsgFoundList().size());</span><br><span class="line">                               <span class="comment">//把拉取到消息放入到processQueue中</span></span><br><span class="line">                               <span class="type">boolean</span> <span class="variable">dispatchToConsume</span> <span class="operator">=</span> processQueue.putMessage(pullResult.getMsgFoundList());</span><br><span class="line">                              <span class="comment">//提交消费消费请求到消费线程池</span></span><br><span class="line">                              <span class="comment">//这里的consumeMessageService实际类型为ConsumeMessageOrderlyService</span></span><br><span class="line">                               DefaultMQPushConsumerImpl.<span class="built_in">this</span>.consumeMessageService.submitConsumeRequest(</span><br><span class="line">                                   pullResult.getMsgFoundList(),</span><br><span class="line">                                   processQueue,</span><br><span class="line">                                   pullRequest.getMessageQueue(),</span><br><span class="line">                                   dispatchToConsume);</span><br><span class="line"></span><br><span class="line">                               <span class="keyword">if</span> (DefaultMQPushConsumerImpl.<span class="built_in">this</span>.defaultMQPushConsumer.getPullInterval() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                   DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestLater(pullRequest,</span><br><span class="line">                                       DefaultMQPushConsumerImpl.<span class="built_in">this</span>.defaultMQPushConsumer.getPullInterval());</span><br><span class="line">                               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                   DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestImmediately(pullRequest);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           <span class="keyword">if</span> (pullResult.getNextBeginOffset() &lt; prevRequestOffset</span><br><span class="line">                               || firstMsgOffset &lt; prevRequestOffset) &#123;</span><br><span class="line">                               log.warn(</span><br><span class="line">                                   <span class="string">&quot;[BUG] pull message result maybe data wrong, nextBeginOffset: &#123;&#125; firstMsgOffset: &#123;&#125; prevRequestOffset: &#123;&#125;&quot;</span>,</span><br><span class="line">                                   pullResult.getNextBeginOffset(),</span><br><span class="line">                                   firstMsgOffset,</span><br><span class="line">                                   prevRequestOffset);</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                           <span class="comment">//...其他省略</span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//实际拉取消息的请求</span></span><br><span class="line">           <span class="built_in">this</span>.pullAPIWrapper.pullKernelImpl(</span><br><span class="line">               pullRequest.getMessageQueue(),</span><br><span class="line">               subExpression,</span><br><span class="line">               subscriptionData.getExpressionType(),</span><br><span class="line">               subscriptionData.getSubVersion(),</span><br><span class="line">               pullRequest.getNextOffset(),</span><br><span class="line">               <span class="built_in">this</span>.defaultMQPushConsumer.getPullBatchSize(),</span><br><span class="line">               sysFlag,</span><br><span class="line">               commitOffsetValue,</span><br><span class="line">               BROKER_SUSPEND_MAX_TIME_MILLIS,</span><br><span class="line">               CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND,</span><br><span class="line">               CommunicationMode.ASYNC,</span><br><span class="line">               pullCallback</span><br><span class="line">           );</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           log.error(<span class="string">&quot;pullKernelImpl exception&quot;</span>, e);</span><br><span class="line">           <span class="built_in">this</span>.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="消息消费"><a href="#消息消费" class="headerlink" title="消息消费"></a>消息消费</h2><p>定位到<code>ConsumeMessageOrderlyService</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumeMessageConcurrentlyService</span> <span class="keyword">implements</span> <span class="title class_">ConsumeMessageService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">InternalLogger</span> <span class="variable">log</span> <span class="operator">=</span> ClientLogger.getLog();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DefaultMQPushConsumer defaultMQPushConsumer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MessageListenerConcurrently messageListener;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; consumeRequestQueue;</span><br><span class="line">     <span class="comment">//消息消费线程池，默认20个线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadPoolExecutor consumeExecutor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String consumerGroup;</span><br><span class="line">    <span class="comment">//用于消息消费阻塞后的，重新提交消费请求的任务调度线程池，默认单线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduledExecutorService;</span><br><span class="line">    <span class="comment">//清理因消息消费线程阻塞，导致消息积压的线程池,默认单线程，消息默认最大积压时间（15min）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService cleanExpireMsgExecutors;</span><br><span class="line">    <span class="comment">//...省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果消息消费模型是集群</span></span><br><span class="line">        <span class="keyword">if</span> (MessageModel.CLUSTERING.equals(ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.messageModel())) &#123;</span><br><span class="line">            <span class="comment">//每隔20秒会执行一次锁定消息队列的请求</span></span><br><span class="line">            <span class="built_in">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    ConsumeMessageOrderlyService.<span class="built_in">this</span>.lockMQPeriodically();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span> * <span class="number">1</span>, ProcessQueue.REBALANCE_LOCK_INTERVAL, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ConsumeRequest"><a href="#ConsumeRequest" class="headerlink" title="ConsumeRequest"></a>ConsumeRequest</h3><p>该类实现了<code>Runnable</code>接口,为实际的消息消费处理入口</p><p><code>run</code>方法逻辑</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.processQueue.isDropped()) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;run, the message queue not be able to consume, because it&#x27;s dropped. &#123;&#125;&quot;</span>, <span class="built_in">this</span>.messageQueue);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取对应队列的objLock</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objLock</span> <span class="operator">=</span> messageQueueLock.fetchLockObject(<span class="built_in">this</span>.messageQueue);</span><br><span class="line">            <span class="comment">//保证同一队列下只能由某个线程能够处理该队列下的消息</span></span><br><span class="line">            <span class="keyword">synchronized</span> (objLock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (MessageModel.BROADCASTING.equals(ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.messageModel())</span><br><span class="line">                    || (<span class="built_in">this</span>.processQueue.isLocked() &amp;&amp; !<span class="built_in">this</span>.processQueue.isLockExpired())) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">boolean</span> <span class="variable">continueConsume</span> <span class="operator">=</span> <span class="literal">true</span>; continueConsume; ) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">this</span>.processQueue.isDropped()) &#123;</span><br><span class="line">                            log.warn(<span class="string">&quot;the message queue not be able to consume, because it&#x27;s dropped. &#123;&#125;&quot;</span>, <span class="built_in">this</span>.messageQueue);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (MessageModel.CLUSTERING.equals(ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.messageModel())</span><br><span class="line">                            &amp;&amp; !<span class="built_in">this</span>.processQueue.isLocked()) &#123;</span><br><span class="line">                            log.warn(<span class="string">&quot;the message queue not locked, so consume later, &#123;&#125;&quot;</span>, <span class="built_in">this</span>.messageQueue);</span><br><span class="line">                            ConsumeMessageOrderlyService.<span class="built_in">this</span>.tryLockLaterAndReconsume(<span class="built_in">this</span>.messageQueue, <span class="built_in">this</span>.processQueue, <span class="number">10</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (MessageModel.CLUSTERING.equals(ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.messageModel())</span><br><span class="line">                            &amp;&amp; <span class="built_in">this</span>.processQueue.isLockExpired()) &#123;</span><br><span class="line">                            log.warn(<span class="string">&quot;the message queue lock expired, so consume later, &#123;&#125;&quot;</span>, <span class="built_in">this</span>.messageQueue);</span><br><span class="line">                            ConsumeMessageOrderlyService.<span class="built_in">this</span>.tryLockLaterAndReconsume(<span class="built_in">this</span>.messageQueue, <span class="built_in">this</span>.processQueue, <span class="number">10</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">long</span> <span class="variable">interval</span> <span class="operator">=</span> System.currentTimeMillis() - beginTime;</span><br><span class="line">                        <span class="keyword">if</span> (interval &gt; MAX_TIME_CONSUME_CONTINUOUSLY) &#123;</span><br><span class="line">                            ConsumeMessageOrderlyService.<span class="built_in">this</span>.submitConsumeRequestLater(processQueue, messageQueue, <span class="number">10</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">consumeBatchSize</span> <span class="operator">=</span></span><br><span class="line">                            ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();</span><br><span class="line"></span><br><span class="line">                        List&lt;MessageExt&gt; msgs = <span class="built_in">this</span>.processQueue.takeMessages(consumeBatchSize);</span><br><span class="line">                        defaultMQPushConsumerImpl.resetRetryAndNamespace(msgs, defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">                        <span class="keyword">if</span> (!msgs.isEmpty()) &#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="type">ConsumeOrderlyContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsumeOrderlyContext</span>(<span class="built_in">this</span>.messageQueue);</span><br><span class="line"></span><br><span class="line">                            <span class="type">ConsumeOrderlyStatus</span> <span class="variable">status</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="type">ConsumeMessageContext</span> <span class="variable">consumeMessageContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                            <span class="keyword">if</span> (ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.hasHook()) &#123;</span><br><span class="line">                                consumeMessageContext = <span class="keyword">new</span> <span class="title class_">ConsumeMessageContext</span>();</span><br><span class="line">                                consumeMessageContext</span><br><span class="line">                                    .setConsumerGroup(ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">                                consumeMessageContext.setNamespace(defaultMQPushConsumer.getNamespace());</span><br><span class="line">                                consumeMessageContext.setMq(messageQueue);</span><br><span class="line">                                consumeMessageContext.setMsgList(msgs);</span><br><span class="line">                                consumeMessageContext.setSuccess(<span class="literal">false</span>);</span><br><span class="line">                                <span class="comment">// init the consume context type</span></span><br><span class="line">                                consumeMessageContext.setProps(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;());</span><br><span class="line">                                ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.executeHookBefore(consumeMessageContext);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="type">long</span> <span class="variable">beginTimestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                            <span class="type">ConsumeReturnType</span> <span class="variable">returnType</span> <span class="operator">=</span> ConsumeReturnType.SUCCESS;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">hasException</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">//这里还需要加锁，因为消费过程中，有可能在创建拉消息的请求时该ProceessQueue对应的MessageQueue被移除掉,或者距离上次拉消息的时间超过最大空闲时间（120）</span></span><br><span class="line">                                <span class="built_in">this</span>.processQueue.getLockConsume().lock();</span><br><span class="line">                                <span class="comment">//上述情况发生后，processQueue被标记为dropped</span></span><br><span class="line">                                <span class="keyword">if</span> (<span class="built_in">this</span>.processQueue.isDropped()) &#123;</span><br><span class="line">                                    <span class="comment">//消息不作处理</span></span><br><span class="line">                                    log.warn(<span class="string">&quot;consumeMessage, the message queue not be able to consume, because it&#x27;s dropped. &#123;&#125;&quot;</span>,</span><br><span class="line">                                        <span class="built_in">this</span>.messageQueue);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">//调用业务代码设置的的消息监听器的回调方法</span></span><br><span class="line">                                status = messageListener.consumeMessage(Collections.unmodifiableList(msgs), context);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                                log.warn(<span class="string">&quot;consumeMessage exception: &#123;&#125; Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;&quot;</span>,</span><br><span class="line">                                    RemotingHelper.exceptionSimpleDesc(e),</span><br><span class="line">                                    ConsumeMessageOrderlyService.<span class="built_in">this</span>.consumerGroup,</span><br><span class="line">                                    msgs,</span><br><span class="line">                                    messageQueue);</span><br><span class="line">                                hasException = <span class="literal">true</span>;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                <span class="built_in">this</span>.processQueue.getLockConsume().unlock();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (<span class="literal">null</span> == status</span><br><span class="line">                                || ConsumeOrderlyStatus.ROLLBACK == status</span><br><span class="line">                                || ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT == status) &#123;</span><br><span class="line">                                log.warn(<span class="string">&quot;consumeMessage Orderly return not OK, Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;&quot;</span>,</span><br><span class="line">                                    ConsumeMessageOrderlyService.<span class="built_in">this</span>.consumerGroup,</span><br><span class="line">                                    msgs,</span><br><span class="line">                                    messageQueue);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="type">long</span> <span class="variable">consumeRT</span> <span class="operator">=</span> System.currentTimeMillis() - beginTimestamp;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="literal">null</span> == status) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hasException) &#123;</span><br><span class="line">                                    returnType = ConsumeReturnType.EXCEPTION;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    returnType = ConsumeReturnType.RETURNNULL;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (consumeRT &gt;= defaultMQPushConsumer.getConsumeTimeout() * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line">                                returnType = ConsumeReturnType.TIME_OUT;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT == status) &#123;</span><br><span class="line">                                returnType = ConsumeReturnType.FAILED;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ConsumeOrderlyStatus.SUCCESS == status) &#123;</span><br><span class="line">                                returnType = ConsumeReturnType.SUCCESS;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.hasHook()) &#123;</span><br><span class="line">                                consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, returnType.name());</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (<span class="literal">null</span> == status) &#123;</span><br><span class="line">                                status = ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.hasHook()) &#123;</span><br><span class="line">                                consumeMessageContext.setStatus(status.toString());</span><br><span class="line">                                consumeMessageContext</span><br><span class="line">                                    .setSuccess(ConsumeOrderlyStatus.SUCCESS == status || ConsumeOrderlyStatus.COMMIT == status);</span><br><span class="line">                                ConsumeMessageOrderlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.executeHookAfter(consumeMessageContext);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            ConsumeMessageOrderlyService.<span class="built_in">this</span>.getConsumerStatsManager()</span><br><span class="line">                                .incConsumeRT(ConsumeMessageOrderlyService.<span class="built_in">this</span>.consumerGroup, messageQueue.getTopic(), consumeRT);</span><br><span class="line"></span><br><span class="line">                            continueConsume = ConsumeMessageOrderlyService.<span class="built_in">this</span>.processConsumeResult(msgs, status, context, <span class="built_in">this</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            continueConsume = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.processQueue.isDropped()) &#123;</span><br><span class="line">                        log.warn(<span class="string">&quot;the message queue not be able to consume, because it&#x27;s dropped. &#123;&#125;&quot;</span>, <span class="built_in">this</span>.messageQueue);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ConsumeMessageOrderlyService.<span class="built_in">this</span>.tryLockLaterAndReconsume(<span class="built_in">this</span>.messageQueue, <span class="built_in">this</span>.processQueue, <span class="number">100</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>大致流程图</p><p><img src="https://static01.imgkr.com/temp/26ba08dc8dab4b309f5a9fbf0c390f07.png"></p><p>值得注意的是，<code>Consumer</code>在对<code>broker</code>端的消息队列加锁时，在<code>Consumer</code>实际发出拉取消息的请求后，<code>broker</code>此时收到请求后，并未对请求的消息队列做是否加锁验证.</p><p>所以，总体而言，rocketmq为了保证消息的局部消费有序，做了以下工作</p><ol><li><p>首先<code>Producer</code>得保证同一批次的不同状态的消息得投递到相同的MessageQueue</p></li><li><p><code>Consumer</code>在拉取消息之前对要拉取的<code>MessageQueue</code>加锁，成功后才拉取消息</p></li><li><p><code>Consumer</code>在拉取消息成功后，保证同一<code>MessageQueue</code>的消息只能由线程池中的某个线程处理.</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://rocketmq.apache.org/docs/quick-start/">RocketMq documentaion</a></p><p><a href="https://blog.csdn.net/hosaos/article/details/90675978">RocketMQ-顺序消息Demo及实现原理分析</a></p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> debug </tag>
            
            <tag> rocketmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次Gradle插件下载异常的分析</title>
      <link href="/2020/06/16/%E8%AE%B0%E4%B8%80%E6%AC%A1Gradle%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E6%9E%90/"/>
      <url>/2020/06/16/%E8%AE%B0%E4%B8%80%E6%AC%A1Gradle%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在微信读书上翻到一本关于Spring源码分析的书《Spring源码深度解析》，于是想着动手调试下Spring的源码，想起一年前下载的<code>Spring-framework-5.1.5RELEASE</code>源码，于是导入IDEA，果不其然，报错了.</p><p> <escape><span id="more"></span></escape></p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>下面是IDEA console输出的错误日志</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Task :buildSrc:compileJava NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:compileGroovy UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:processResources UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:classes UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:jar UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:assemble UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:compileTestJava NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:compileTestGroovy NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:processTestResources NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:testClasses UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:test NO-SOURCE</span><br><span class="line">&gt; Task :buildSrc:check UP-TO-DATE</span><br><span class="line">&gt; Task :buildSrc:build UP-TO-DATE</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* Where:</span><br><span class="line">Build file &#x27;D:\Դ�����\spring-framework-5.1.5.RELEASE\build.gradle&#x27; line: 16</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">Plugin [id: &#x27;io.spring.dependency-management&#x27;, version: &#x27;1.0.5.RELEASE&#x27;, apply: false] was not found in any of the following sources:</span><br><span class="line"></span><br><span class="line">- Gradle Core Plugins (plugin is not in &#x27;org.gradle&#x27; namespace)</span><br><span class="line">- Plugin Repositories (could not resolve plugin artifact &#x27;io.spring.dependency-management:io.spring.dependency-management.gradle.plugin:1.0.5.RELEASE&#x27;)</span><br><span class="line">  Searched in the following repositories:</span><br><span class="line">    Gradle Central Plugin Repository</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span><br><span class="line"></span><br><span class="line">* Exception is:</span><br><span class="line">org.gradle.api.plugins.UnknownPluginException: Plugin [id: &#x27;io.spring.dependency-management&#x27;, version: &#x27;1.0.5.RELEASE&#x27;, apply: false] was not found in any of the following sources:</span><br><span class="line"></span><br><span class="line">- Gradle Core Plugins (plugin is not in &#x27;org.gradle&#x27; namespace)</span><br><span class="line">- Plugin Repositories (could not resolve plugin artifact &#x27;io.spring.dependency-management:io.spring.dependency-management.gradle.plugin:1.0.5.RELEASE&#x27;)</span><br><span class="line">  Searched in the following repositories:</span><br><span class="line">    Gradle Central Plugin Repository</span><br><span class="line">at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolveToFoundResult(DefaultPluginRequestApplicator.java:262)</span><br><span class="line">at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.access$100(DefaultPluginRequestApplicator.java:63)</span><br><span class="line">...省略</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* Get more help at https://help.gradle.org</span><br><span class="line"></span><br><span class="line">BUILD FAILED in 4s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>找到<code>build.gradle</code>文件，查看第16行，如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 3rd party plugin repositories can be configured in settings.gradle</span><br><span class="line">plugins &#123;</span><br><span class="line">    //配置spring依赖管理插件</span><br><span class="line">id &quot;io.spring.dependency-management&quot; version &quot;1.0.5.RELEASE&quot; apply false</span><br><span class="line">id &quot;org.jetbrains.kotlin.jvm&quot; version &quot;1.2.71&quot; apply false</span><br><span class="line">id &quot;org.jetbrains.dokka&quot; version &quot;0.9.17&quot;</span><br><span class="line">id &quot;org.asciidoctor.convert&quot; version &quot;1.5.8&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是很普通的插件配置</p><p>上面的错误日志意思大概就是无法从插件仓库中找到该插件</p><h1 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h1><p>因为一开始用的IDEA里的Gradle插件同步整个Project,不知道从哪入手调试，后面想到还有gradle-wrapper可以试着看能不能DEBUG.</p><h2 id="添加gradlew-amp-amp-gradlew-api依赖"><a href="#添加gradlew-amp-amp-gradlew-api依赖" class="headerlink" title="添加gradlew &amp;&amp; gradlew-api依赖"></a>添加gradlew &amp;&amp; gradlew-api依赖</h2><p><img src="https://imgkr.cn-bj.ufileos.com/b7b6da7a-b951-4d0f-ade8-2ca32ec1cca3.png"></p><h2 id="配置IDEA-REMOTE-DEBUG"><a href="#配置IDEA-REMOTE-DEBUG" class="headerlink" title="配置IDEA REMOTE DEBUG"></a>配置IDEA REMOTE DEBUG</h2><p>在IDEA的Toolbar找到 <code>Select Run/Debug Configuration</code>-&gt;<code>Edit Configurations...</code>,</p><p><img src="https://imgkr.cn-bj.ufileos.com/82f96356-16a3-460a-bc6c-f7404bd46657.png" alt="Remote Debug Configuration"></p><h2 id="修改gradlew-bat"><a href="#修改gradlew-bat" class="headerlink" title="修改gradlew.bat"></a>修改gradlew.bat</h2><p>到项目根目录下，找到gradlew.bat文件(window的批处理文件)。</p><p>修改如下</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> REMOTE_DEBUG=&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=<span class="number">5005</span>&quot;</span><br><span class="line"><span class="built_in">set</span> PROXY=-Dhttp.proxyHost=localhost -Dhttp.proxyPort=<span class="number">58707</span> -Dhttps.proxyHost=localhost -Dhttps.proxyPort=<span class="number">58707</span> -Djava.<span class="built_in">net</span>.useSystemProxies=true -DAtestValue=FuCK</span><br><span class="line"><span class="built_in">set</span> CLASSPATH=<span class="variable">%APP_HOME%</span>\gradle\wrapper\gradle-wrapper.jar</span><br><span class="line"><span class="built_in">echo</span> &quot;<span class="variable">%JAVA_EXE%</span>&quot; <span class="variable">%DEFAULT_JVM_OPTS%</span> <span class="variable">%JAVA_OPTS%</span> <span class="variable">%REMOTE_DEBUG%</span> <span class="variable">%PROXY%</span> <span class="variable">%GRADLE_OPTS%</span> &quot;-Dorg.gradle.appname=<span class="variable">%APP_BASE_NAME%</span>&quot; -classpath &quot;<span class="variable">%CLASSPATH%</span>&quot; org.gradle.wrapper.GradleWrapperMain <span class="variable">%CMD_LINE_ARGS%</span></span><br><span class="line"><span class="comment">@rem Execute Gradle</span></span><br><span class="line">&quot;<span class="variable">%JAVA_EXE%</span>&quot; <span class="variable">%DEFAULT_JVM_OPTS%</span> <span class="variable">%JAVA_OPTS%</span> <span class="variable">%REMOTE_DEBUG%</span> <span class="variable">%PROXY%</span> <span class="variable">%GRADLE_OPTS%</span> &quot;-Dorg.gradle.appname=<span class="variable">%APP_BASE_NAME%</span>&quot; -classpath &quot;<span class="variable">%CLASSPATH%</span>&quot; org.gradle.wrapper.GradleWrapperMain <span class="variable">%CMD_LINE_ARGS%</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的远程调试参数中的<code>suspend</code>值要为<code>y</code>，表示在远程调试器未连接上之前等待.</p><p>同时上面还给JVM配置了http代理，因为gradle下载需要<code>翻墙</code>.</p><p>为了保险起见,在项目根目录中的<code>gradle.properties</code>增加如下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemProp.http.proxyHost=127.0.0.1</span><br><span class="line">systemProp.http.proxyPort=58707</span><br><span class="line">systemProp.https.proxyHost=127.0.0.1</span><br><span class="line">systemProp.https.proxyPort=58707</span><br></pre></td></tr></table></figure><h2 id="开始调试-1"><a href="#开始调试-1" class="headerlink" title="开始调试"></a>开始调试</h2><p>打开IDEA底部<code>Terminal</code>或者<code>windows</code>的命令行工具，这里以前者为例</p><p>因为IDEA的<code>Terminal</code>打开后，默认的目录为当前项目的根目录</p><p>输入如下命令</p><p><code>gradlew.bat clean --stacktrace --no-daemon</code></p><p>按下回车后，如果上述配置没错，会得到如下输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.8.0_191/bin/java.exe&quot;   &quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005&quot; -Dhttp.proxyHost=localhost -D</span><br><span class="line">http.proxyPort=58707 -Dhttps.proxyHost=localhost -Dhttps.proxyPort=58707 -Djava.net.useSystemProxies=true -XX:MaxMetaspaceSize=1024m</span><br><span class="line"> -Xmx1024m -XX:MaxHeapSize=256m  &quot;-Dorg.gradle.appname=gradlew&quot; -classpath &quot;D:\源码分析\spring-framework-5.1.5.RELEASE\\gradle\wrapper\gradle-wrapper.</span><br><span class="line">jar&quot; org.gradle.wrapper.GradleWrapperMain clean --stacktrace --no-daemon</span><br><span class="line">Listening for transport dt_socket at address: 5005</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的命令只是启动了GradleWrapper,我们还得知道IDEA能不能调试</p><ol><li><p>在IDEA中打开<code>org.gradle.wrapper.GradleWrapperMain</code>这个类，添加一个断点</p></li><li><p>以<code>DEBUG</code>方式启动上面配置好后的<code>debug-gradlew</code></p></li></ol><p>最后断点成功触发</p><p><img src="https://imgkr.cn-bj.ufileos.com/f486dc2b-d6aa-408e-b5ab-036294fdd365.png"></p><p>因为上述我们配置了代理，Gradle下载插件的话应该会用到<code>Http(s)URLConnection</code>。</p><p>那么我们可以在<code>sun.net.spi.DefaultProxySelector#select</code>方法中下断点</p><p>断点触发后发现得到的代理信息和上面配置的不一样.</p><p><img src="https://imgkr.cn-bj.ufileos.com/9556e3b3-168a-43b8-992b-06947a488ea1.png"></p><p>上面我们的代理端口号<code>58707</code>,而实际得到的端口号为<code>1080</code>,在IDEA中通过全文搜索也未发现关键字<code>1080</code>,同时<code>System#Properties</code>内存中的值也确实如此</p><p>那么会不会是系统属性后面被覆盖了呢，带着这个疑问,在<code>System#setProperties</code>增加条件断点</p><p><img src="https://imgkr.cn-bj.ufileos.com/99d48e3c-bd7d-4f1f-84d2-19645ce13127.png"></p><p>和上文一样，启动调试，该断点被触发了两次.顺着调用栈找到<code>https.proxyHost</code>属性被覆盖的原因</p><p>定位到<code>org.gradle.initialization.DefaultGradlePropertiesLoader#loadProperties</code>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">loadProperties</span><span class="params">(File settingsDir, StartParameter startParameter, Map&lt;String, String&gt; systemProperties, Map&lt;String, String&gt; envProperties)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里的settingDir值为当前项目的路径</span></span><br><span class="line">      <span class="built_in">this</span>.defaultProperties.clear();</span><br><span class="line">      <span class="built_in">this</span>.overrideProperties.clear();</span><br><span class="line">      <span class="comment">//把项目根目录下的gradle.properties中的配置添加到Gradle属性中</span></span><br><span class="line">      <span class="built_in">this</span>.addGradleProperties(<span class="built_in">this</span>.defaultProperties, <span class="keyword">new</span> <span class="title class_">File</span>(settingsDir, <span class="string">&quot;gradle.properties&quot;</span>));</span><br><span class="line">       <span class="comment">//把用户目录下的gradle.properties中的配置添加到Gradle属性中</span></span><br><span class="line">      <span class="built_in">this</span>.addGradleProperties(<span class="built_in">this</span>.overrideProperties, <span class="keyword">new</span> <span class="title class_">File</span>(startParameter.getGradleUserHomeDir(), <span class="string">&quot;gradle.properties&quot;</span>));</span><br><span class="line">      <span class="built_in">this</span>.setSystemProperties(startParameter.getSystemPropertiesArgs());</span><br><span class="line">      <span class="built_in">this</span>.overrideProperties.putAll(<span class="built_in">this</span>.getEnvProjectProperties(envProperties));</span><br><span class="line">      <span class="built_in">this</span>.overrideProperties.putAll(<span class="built_in">this</span>.getSystemProjectProperties(systemProperties));</span><br><span class="line">      <span class="built_in">this</span>.overrideProperties.putAll(startParameter.getProjectProperties());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgkr.cn-bj.ufileos.com/3e409267-ac10-41ef-b365-a611e2bdc0e0.png"></p><p>在来到<code>org.gradle.initialization.DefaultGradlePropertiesLoader#setSystemProperties</code>这个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setSystemProperties</span><span class="params">(Map&lt;String, String&gt; properties)</span> &#123;</span><br><span class="line">       <span class="comment">//把项目目录下获取的配置添加到系统属性</span></span><br><span class="line">       <span class="built_in">this</span>.addSystemPropertiesFromGradleProperties(<span class="built_in">this</span>.defaultProperties);</span><br><span class="line">       <span class="comment">//把用户目录下获取到的配置添加到系统属性</span></span><br><span class="line">       <span class="built_in">this</span>.addSystemPropertiesFromGradleProperties(<span class="built_in">this</span>.overrideProperties);</span><br><span class="line">       System.getProperties().putAll(properties);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以我们之前配置代理信息被用户目录下<code>gradle.properties</code>中的配置给覆盖了。</p><p>找到用户目录下的<code>gradle.properties</code>，打开后如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## For more details on how to configure your build environment visit</span><br><span class="line"># http://www.gradle.org/docs/current/userguide/build_environment.html</span><br><span class="line">#</span><br><span class="line"># Specifies the JVM arguments used for the daemon process.</span><br><span class="line"># The setting is particularly useful for tweaking memory settings.</span><br><span class="line"># Default value: -Xmx1024m -XX:MaxPermSize=256m</span><br><span class="line"># org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span><br><span class="line">#</span><br><span class="line"># When configured, Gradle will run in incubating parallel mode.</span><br><span class="line"># This option should only be used with decoupled projects. More details, visit</span><br><span class="line"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</span><br><span class="line"># org.gradle.parallel=true</span><br><span class="line">#Thu Mar 26 15:36:05 CST 2020</span><br><span class="line">systemProp.http.proxyHost=localhost</span><br><span class="line">systemProp.https.proxyPort=1080</span><br><span class="line">systemProp.https.proxyHost=localhost</span><br><span class="line">systemProp.http.proxyPort=1080</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我也忘了啥时候添加的这个配置，真是坑啊</p><p>将用户目录下中配置的代理删除掉后，重新构建项目，没有报错.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>上述gradle下载插件的异常就是代理问题导致的,但是提示也太坑爹了，没有提示网络相关的东西</p></li><li><p>gradle中配置文件中系统属性的优先级 <code>gradle程序命令行参数</code> &gt; <code>USER_HOME/gradle.properties</code> &gt; <code>PROJECT_DIR/gradle.properties</code> &gt; <code>SystemProperties</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK1.8 LinkedHashMap和LinkedHashSet有序分析</title>
      <link href="/2020/06/14/LinkedHashMap%E5%92%8CLinkedHashSet%E6%9C%89%E5%BA%8F%E5%88%86%E6%9E%90/"/>
      <url>/2020/06/14/LinkedHashMap%E5%92%8CLinkedHashSet%E6%9C%89%E5%BA%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>基于JDK1.8的源码分析</p><p><escape><span id="more"></span></escape></p><h1 id="LinkedHashMap-有序原理分析"><a href="#LinkedHashMap-有序原理分析" class="headerlink" title="LinkedHashMap 有序原理分析"></a>LinkedHashMap 有序原理分析</h1><p><code>LinkedHashMap</code>中的<code>Entry</code>重写了.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">HashMap</span>.Node&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//每个Entry增加了before,after,双向链表</span></span><br><span class="line">       Entry&lt;K,V&gt; before, after;</span><br><span class="line">       Entry(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">           <span class="built_in">super</span>(hash, key, value, next);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="putVal方法"><a href="#putVal方法" class="headerlink" title="putVal方法"></a>putVal方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//重点是newNode这个方法</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 后续省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="newNode方法"><a href="#newNode方法" class="headerlink" title="newNode方法"></a>newNode方法</h2><p>LinkedHashMap重写了该方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node&lt;K,V&gt; <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">        <span class="comment">//把新建的节点放入Entry链表尾部</span></span><br><span class="line">        linkNodeLast(p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="linkNodeLast方法"><a href="#linkNodeLast方法" class="headerlink" title="linkNodeLast方法"></a>linkNodeLast方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里会把Entry按照insert顺序插入到链表尾部，所以实现了访问的有序性</span></span><br><span class="line">  <span class="comment">// link at the end of list</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">linkNodeLast</span><span class="params">(LinkedHashMap.Entry&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">      LinkedHashMap.Entry&lt;K,V&gt; last = tail;</span><br><span class="line">      tail = p;</span><br><span class="line">      <span class="comment">//如果第一次put元素</span></span><br><span class="line">      <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">      <span class="comment">// head = tail;</span></span><br><span class="line">          head = p;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 新插入的节点的前驱节点指向之前的tail</span></span><br><span class="line">          p.before = last;</span><br><span class="line">          <span class="comment">//之前的tail的后继节点指向新节点</span></span><br><span class="line">          <span class="comment">// oldTail-&gt;after = p;</span></span><br><span class="line">          <span class="comment">// p-&gt;before = oldTail</span></span><br><span class="line">          <span class="comment">// tail-&gt; p</span></span><br><span class="line">          last.after = p;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="按照节点访问顺序来排序"><a href="#按照节点访问顺序来排序" class="headerlink" title="按照节点访问顺序来排序"></a>按照节点访问顺序来排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// move node to last</span></span><br><span class="line"></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    <span class="comment">// accessOrder 默认为false，按插入顺序来访问，否则把访问过的元素放在链表后面</span></span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="literal">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认 put(k,v) evict(剔除)为false</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="literal">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> first.key;</span><br><span class="line">        removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LinkedHashSet-有序原理分析"><a href="#LinkedHashSet-有序原理分析" class="headerlink" title="LinkedHashSet 有序原理分析"></a>LinkedHashSet 有序原理分析</h1><p>首先<code>LinkedHashSet</code>继承自<code>HashSet</code></p><p>查看<code>LinkedHash</code>构造器源码</p><h2 id="LinkedHashSet构造器"><a href="#LinkedHashSet构造器" class="headerlink" title="LinkedHashSet构造器"></a>LinkedHashSet构造器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Constructs a new, empty linked hash set with the default initial</span></span><br><span class="line"><span class="comment">  * capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 调用父类Haset构造器</span></span><br><span class="line">     <span class="built_in">super</span>(<span class="number">16</span>, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="HashSet构造器"><a href="#HashSet构造器" class="headerlink" title="HashSet构造器"></a>HashSet构造器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">        <span class="comment">// map的实现使用了LinkedHashMap</span></span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>LinkedHashSet</code>中使用的map实现是<code>LinkedHashMap</code>，所以天然有序</p><p>具体见上文分析</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC随笔</title>
      <link href="/2020/05/08/JUC%E9%9A%8F%E7%AC%94/"/>
      <url>/2020/05/08/JUC%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<h1 id="RenentrantReadWriteLock"><a href="#RenentrantReadWriteLock" class="headerlink" title="RenentrantReadWriteLock"></a>RenentrantReadWriteLock</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       16 bit          16 bit</span><br><span class="line"></span><br><span class="line">+------------------------------------+</span><br><span class="line">|ReadLockCounts  |  WriteLockCounts  |</span><br><span class="line">+------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><escape><span id="more"></span></escape></p><h1 id="CountDownLatch-和-CyclicBarrier-区别"><a href="#CountDownLatch-和-CyclicBarrier-区别" class="headerlink" title="CountDownLatch 和 CyclicBarrier 区别"></a>CountDownLatch 和 CyclicBarrier 区别</h1><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p><code>CountDownLatch</code> 通过 <code>共享锁实现</code></p></li><li><p><code>CyclicBarrier</code> 通过 <code>ReentrantLock</code> + <code>条件等待队列</code> 实现;</p></li></ol><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><p><code>CountDownLatch</code> 一般用于某个线程等待多个线程到达某个执行点后，然后再接着执行。</p></li><li><p><code>CyclicBarrier</code> 则是<code>多个线程相互等待</code>直至<code>所有线程都到达执行点</code>，然后再接着执行.</p></li><li><p><code>CountDownLatch</code>不可以重用,而<code>CyclicBarrier</code>可以重用</p></li></ol><h1 id="AbstractQueuedSynchronizer"><a href="#AbstractQueuedSynchronizer" class="headerlink" title="AbstractQueuedSynchronizer"></a>AbstractQueuedSynchronizer</h1><h2 id="Node中的waitStatus说明"><a href="#Node中的waitStatus说明" class="headerlink" title="Node中的waitStatus说明"></a>Node中的waitStatus说明</h2><ul><li><code>CANCELLED (1)</code>:</li></ul><p>由于超时，导致节点被取消，或者节点中的线程被中断。<br>节点永远不会离开此状态。具体地说，具有已取消节点的线程永远不会再阻塞。</p><ul><li><code>SIGNAL (-1)</code>:</li></ul><p>此节点的后继节点被(或将很快)阻塞(通过<code>park</code>)，因此当前节点在释放或取消时必须<code>unpark</code>其后继节点。为了避免竞争，<code>acquire</code>方法必须首先指示它们需要一个信号，然后重试原子<code>acquire </code>，然后在失败时阻塞。</p><ul><li><code>CONDITION (-2)</code>:</li></ul><p>此节点当前处于条件队列中。在传输之前（Conditon被唤醒，重新加入同步队列），它不会用作同步队列节点，此时状态将设置为0。(此处使用此值与该字段的其他用途无关，但简化了机制。)</p><ul><li><code>PROPAGATE (-3)</code>:</li></ul><p>“releaseShared”应该传播到其他节点。这是在“doReleaseShared”中设置的(仅针对头节点)，以确保传播继续，即使其他操作已经介入。</p><p>–</p><p>对于普通同步节点，该字段被初始化为0，对于条件节点，该字段被初始化为<code>CONDITION</code>。使用CAS修改它(或者在可能的情况下，无条件的volatile写操作)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于创建同步等待队列节点</span></span><br><span class="line">  Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">           <span class="built_in">this</span>.nextWaiter = mode;</span><br><span class="line">           <span class="built_in">this</span>.thread = thread;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 用于创建条件队列节点</span></span><br><span class="line"> Node(Thread thread, <span class="type">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">         <span class="built_in">this</span>.waitStatus = waitStatus;</span><br><span class="line">         <span class="built_in">this</span>.thread = thread;</span><br><span class="line">     &#125;     </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>节点入队列操作</em> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Node <span class="title function_">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> &#123;</span><br><span class="line">     <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">         <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">         <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">         <span class="comment">//假如这里设置失败说明已存在tail节点，下次循环获取到tail</span></span><br><span class="line">             <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> <span class="title class_">Node</span>()))</span><br><span class="line">                 tail = head;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 先设置当前入队列节点的前继节点为&quot;Tail&quot;节点</span></span><br><span class="line">             node.prev = t;</span><br><span class="line">             <span class="comment">//假如这里tail节点设置失败，说明，tail节点被其他线程更新了，所有继续循环直到成功为止.</span></span><br><span class="line">             <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                 <span class="comment">//设置之前的tail节点的后继节点为新的tail节点</span></span><br><span class="line">                 t.next = node;</span><br><span class="line">                 <span class="keyword">return</span> t;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><em>为当前线程和给定模式创建节点并将其入队。</em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 为当前线程和给定模式创建节点并将其入队。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * Creates and enqueues node for current thread and given mode.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * EXCLUSIVE:独占模式，SHARED:共享模式</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> the new node</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line">     <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">     <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">     <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">     <span class="comment">//已存在tail节点</span></span><br><span class="line">     <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">//设置当前节点的前继节点为tail节点</span></span><br><span class="line">         node.prev = pred;</span><br><span class="line">         <span class="comment">//设置tail节点为当前入队列节点，假如这里设置失败如何处理</span></span><br><span class="line">         <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">             pred.next = node;</span><br><span class="line">             <span class="keyword">return</span> node;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 用于上述快速入队列失败的后备操作，下面这个方法通过自旋，保证入队列成功</span></span><br><span class="line">     enq(node);</span><br><span class="line">     <span class="keyword">return</span> node;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>设置头节点</em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//将队列头设置为节点，从而出队。仅由acquire方法调用。为了GC和抑制不必要的信号和遍历，还会清空未使用的字段。</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets head of queue to be node, thus dequeuing. Called only by</span></span><br><span class="line"><span class="comment">     * acquire methods.  Also nulls out unused fields for sake of GC</span></span><br><span class="line"><span class="comment">     * and to suppress unnecessary signals and traversals.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node the node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        head = node;</span><br><span class="line">        node.thread = <span class="literal">null</span>;</span><br><span class="line">        node.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><em>唤醒后继节点</em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Wakes up node&#x27;s successor, if one exists.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node the node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unparkSuccessor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">         * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">         * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> node.waitStatus;</span><br><span class="line">        <span class="comment">//当前节点状态小于0，则把当前节点状态置为0</span></span><br><span class="line">        <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">            compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">         * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">         * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">         * non-cancelled successor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//找到实际的未被取消不为空的后继节点.从tail向head遍历</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.next;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            s = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; t != <span class="literal">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">                <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                    s = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">            LockSupport.unpark(s.thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>取消Acquire</em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Cancels an ongoing attempt to acquire.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> node the node</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cancelAcquire</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">      <span class="comment">// Ignore if node doesn&#x27;t exist</span></span><br><span class="line">      <span class="comment">// 节点为空，不执行操作</span></span><br><span class="line">      <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Help for GC</span></span><br><span class="line">      node.thread = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Skip cancelled predecessors</span></span><br><span class="line">      <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> node.prev;</span><br><span class="line">      <span class="comment">//找到未取消的前置节点</span></span><br><span class="line">      <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="comment">// pre = pred.prev;</span></span><br><span class="line">         <span class="comment">// node.prev = pred;</span></span><br><span class="line">          node.prev = pred = pred.prev;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// predNext is the apparent node to unsplice. CASes below will</span></span><br><span class="line">      <span class="comment">// fail if not, in which case, we lost race vs another cancel</span></span><br><span class="line">      <span class="comment">// or signal, so no further action is necessary.</span></span><br><span class="line">      <span class="type">Node</span> <span class="variable">predNext</span> <span class="operator">=</span> pred.next;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Can use unconditional write instead of CAS here.</span></span><br><span class="line">      <span class="comment">// After this atomic step, other Nodes can skip past us.</span></span><br><span class="line">      <span class="comment">// Before, we are free of interference from other threads.</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置当前节点为已取消</span></span><br><span class="line">      node.waitStatus = Node.CANCELLED;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If we are the tail, remove ourselves.</span></span><br><span class="line">      <span class="keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class="line">          compareAndSetNext(pred, predNext, <span class="literal">null</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// If successor needs signal, try to set pred&#x27;s next-link</span></span><br><span class="line">          <span class="comment">// so it will get one. Otherwise wake it up to propagate.</span></span><br><span class="line">          <span class="type">int</span> ws;</span><br><span class="line">          <span class="keyword">if</span> (pred != head &amp;&amp;</span><br><span class="line">              ((ws = pred.waitStatus) == Node.SIGNAL ||</span><br><span class="line">               (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class="line">              pred.thread != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> node.next;</span><br><span class="line">              <span class="keyword">if</span> (next != <span class="literal">null</span> &amp;&amp; next.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                  compareAndSetNext(pred, predNext, next);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              unparkSuccessor(node);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 上面的unparkSuccessor 为什么向前遍历，估计就是因为这个,node.next=node. 如果正向遍历，可能就是死循环了</span></span><br><span class="line">          node.next = node; <span class="comment">// help GC</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Java中http(s)代理的问题探究</title>
      <link href="/2020/05/06/%E5%85%B3%E4%BA%8EJava%E4%B8%ADhttp-s-%E4%BB%A3%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/"/>
      <url>/2020/05/06/%E5%85%B3%E4%BA%8EJava%E4%B8%ADhttp-s-%E4%BB%A3%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在Chrome上发现一个免费的VPN插件<code>AVSTAR VPN</code>，本着学习研究的精神，获取到了代理服务器的地址和端口.于是就想能不能把这个代理服务器的地址配置用于<code>IDEA</code>的<code>HTTP Proxy</code><br><escape><span id="more"></span></escape></p><h1 id="尝试配置"><a href="#尝试配置" class="headerlink" title="尝试配置"></a>尝试配置</h1><p>通过调试上述的<code>AVSTAR VPN</code>插件，成功的获取到了代理配置如下，一段PAC脚本:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function FindProxyForURL (url, host) &#123;</span><br><span class="line">    var blackList = new Array(&#x27;192.168.*&#x27;, &#x27;127.0.0.1&#x27;, &#x27;134.209.63.251&#x27;, &#x27;astarvpn.center&#x27;, &#x27;*.douyu.com&#x27;);</span><br><span class="line">    for (var i = 0; i &lt; blackList.length; i++) &#123;</span><br><span class="line">        if (shExpMatch(host, blackList[i])) return &#x27;DIRECT&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#x27;HTTPS usa1.cn-cloudflare.com:443&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h2><p>把这段代码保存为<code>test.pac</code>，再把它<code>Deploy</code>到本地的一个<code>HTTP Server</code>,然后配置系统代理的脚本地址，配置成功后，能够通过浏览器访问诸如<code>Google</code>等网站.</p><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p>打开<code>IDEA</code>后,找到代理设置 <code>File | Settings | Appearance &amp; Behavior | System Settings | HTTP Proxy</code></p><p>选择 <code>Manual proxy configuration</code>,配置内容如下</p><p><code>Host name</code>: <code>usa1.cn-cloudflare.com</code></p><p><code>Port number</code>: <code>443</code></p><p>配置好后,点击<code>check connection</code>，输入<code>https://www.google.com</code>，发现无法访问.</p><h1 id="问题探究"><a href="#问题探究" class="headerlink" title="问题探究"></a>问题探究</h1><h2 id="分析IDEA中HTTP-S-代理源码"><a href="#分析IDEA中HTTP-S-代理源码" class="headerlink" title="分析IDEA中HTTP(S)代理源码"></a>分析IDEA中HTTP(S)代理源码</h2><p>把<code>IDEA-community</code>源码下载下来，分析<code>IDEA</code>的代理是如何工作，发现<code>IDEA</code>里发起的所有<code>HTTP(S)</code>请求都是通过<code>com.intellij.util.io.HttpRequests</code>这个类完成的.</p><p>那么配置代理如何应用的呢.</p><p>创建connection</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> URLConnection <span class="title function_">openConnection</span><span class="params">(RequestBuilderImpl builder, RequestImpl request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (builder.myForceHttps &amp;&amp; StringUtil.startsWith(request.myUrl, <span class="string">&quot;http:&quot;</span>)) &#123;</span><br><span class="line">      request.myUrl = <span class="string">&quot;https:&quot;</span> + request.myUrl.substring(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; builder.myRedirectLimit; i++) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.myUrl;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> URLConnection connection;</span><br><span class="line">      <span class="keyword">if</span> (!builder.myUseProxy) &#123;</span><br><span class="line">        connection = <span class="keyword">new</span> <span class="title class_">URL</span>(url).openConnection(Proxy.NO_PROXY);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (ApplicationManager.getApplication() == <span class="literal">null</span>) &#123;</span><br><span class="line">        connection = <span class="keyword">new</span> <span class="title class_">URL</span>(url).openConnection();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//这里就是设置代理</span></span><br><span class="line">        connection = HttpConfigurable.getInstance().openConnection(url);</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> (connection <span class="keyword">instanceof</span> HttpsURLConnection) &#123;</span><br><span class="line">        configureSslConnection(url, (HttpsURLConnection)connection);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//...省略</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>com.intellij.util.net.HttpConfigurable</code> 源码</p><p>设置代理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> URLConnection <span class="title function_">openConnection</span><span class="params">(<span class="meta">@NotNull</span> String location)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(location);</span><br><span class="line">  <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//这里会读取配置的代理信息</span></span><br><span class="line">  <span class="keyword">final</span> List&lt;Proxy&gt; proxies = CommonProxy.getInstance().select(url);</span><br><span class="line">  <span class="keyword">if</span> (ContainerUtil.isEmpty(proxies)) &#123;</span><br><span class="line">    urlConnection = url.openConnection();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">IOException</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Proxy proxy : proxies) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//给URLConnection 设置代理</span></span><br><span class="line">        urlConnection = url.openConnection(proxy);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// continue iteration</span></span><br><span class="line">        exception = e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (urlConnection == <span class="literal">null</span> &amp;&amp; exception != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码片段展示了创建连接，并设置代理，最终还是调用的JDK提供的API.</p><h2 id="分析JDK中创建URLConnection的源码"><a href="#分析JDK中创建URLConnection的源码" class="headerlink" title="分析JDK中创建URLConnection的源码"></a>分析JDK中创建URLConnection的源码</h2><p>JDK中创建连接源码在<code>sun.net.NetworkClient</code>中.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//var1 是host，var2是port</span></span><br><span class="line"><span class="keyword">protected</span> Socket <span class="title function_">doConnect</span><span class="params">(String var1, <span class="type">int</span> var2)</span> <span class="keyword">throws</span> IOException, UnknownHostException &#123;</span><br><span class="line">        Socket var3;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.proxy != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.proxy.type() == Type.SOCKS) &#123;</span><br><span class="line">                var3 = (Socket)AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Socket&gt;() &#123;</span><br><span class="line">                    <span class="keyword">public</span> Socket <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(NetworkClient.<span class="built_in">this</span>.proxy);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.proxy.type() == Type.DIRECT) &#123;</span><br><span class="line">                var3 = <span class="built_in">this</span>.createSocket();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//这里创建的普通的套接字</span></span><br><span class="line">                var3 = <span class="keyword">new</span> <span class="title class_">Socket</span>(Proxy.NO_PROXY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//创建套接字</span></span><br><span class="line">            var3 = <span class="built_in">this</span>.createSocket();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.connectTimeout &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            var3.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(var1, var2), <span class="built_in">this</span>.connectTimeout);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (defaultConnectTimeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            var3.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(var1, var2), defaultConnectTimeout);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            var3.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(var1, var2));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.readTimeout &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            var3.setSoTimeout(<span class="built_in">this</span>.readTimeout);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (defaultSoTimeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            var3.setSoTimeout(defaultSoTimeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题就在于这个<code>Socket</code>,假如代理服务器的协议是HTTP，那么一切都将正常工作,但是如果代理服务器的协议是<code>HTTPS</code>,普通套接字是能够连接，但是整个连接建立后是无法正确通讯的，因为<code>HTTPS</code>协议会进行如下工作:</p><ol><li><p>客户端向服务器发起SSL通信，报文中包含客户端支持的SSL的指定版本，加密组件列表（所使用的加密算法及密钥长度）</p></li><li><p>服务器的响应报文中，包含SSL版本以及加密组件，服务器的加密组件内容是从客户端发来的加密组件列表中筛选出来的，服务器还会发一个公开密钥并且带有公钥证书</p></li><li><p>客户端拿到服务器的公开密钥，并验证其公钥证书（使用浏览器中已经植入的CA公开密钥）</p></li><li><p>如果验证成功，客户端生成一个Pre-master secret随机密码串，这个随机密码串其实就是之后通信要用的对称密钥，并用服务器的公开密钥进行加密，发送给服务器，以此通知服务器，之后的报文都会通过这个对称密钥来加密</p></li><li><p>同时，客户端用约定好的hash算法计算握手消息，然后用生成的密钥进行加密，一起发送给服务器</p></li><li><p>服务器收到客户端发来的的公开密钥加密的对称密钥，用自己的私钥对其解密拿到对称密钥，再用对称密钥解析握手消息，验证hash值是否与客户端发来的一致。如果一致，则通知客户端SSL握手成功</p></li><li><p>之后的数据交互都是HTTP通信（当然通信会获得SSL保护），且数据都是通过对称密钥来加密（这个密钥不会每次都发，在握手的过程中，服务器已经知道了这个对称密钥，再有数据来时，服务器知道这些数据就是通过对称密钥加密的，于是就直接解密了）</p></li></ol><blockquote><p>版权声明：本文为CSDN博主「TLpigff」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/lvyibin890/article/details/82462041">https://blog.csdn.net/lvyibin890/article/details/82462041</a></p></blockquote><p>要完成上述的步骤，显然是需要<code>SSLSocket</code>,但是JDK中创建连接时直接就没有考虑代理服务器是<code>HTTPS</code>的情况</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我在<code>百度</code>,<code>Google</code>,<code>StackOverflow</code>上面找了很多文章，关于设置<code>java https 代理</code>,很多文章都没提到代理服务器是<code>https</code>协议的情况，于是就有了这篇分析.</p><p>然后动手简单的实现了下假如代理服务器的协议是<code>HTTPS</code>,该如何实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, KeyManagementException &#123;</span><br><span class="line">        SSLSocketFactory sslsf ;</span><br><span class="line">        <span class="type">X509TrustManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrustM</span>();</span><br><span class="line">        TrustManager mytm[] = &#123; manager &#125;;</span><br><span class="line">        <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;SSL&quot;</span>);</span><br><span class="line">        sslContext.init(<span class="literal">null</span>, mytm, <span class="literal">null</span>);</span><br><span class="line">        sslsf = sslContext.getSocketFactory();</span><br><span class="line">        <span class="type">SSLSocket</span> <span class="variable">socket</span> <span class="operator">=</span> (SSLSocket) sslsf.createSocket();</span><br><span class="line">        socket.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;jp1.cn-cloudflare.com&quot;</span>, <span class="number">443</span>),<span class="number">16</span>*<span class="number">1000</span>);</span><br><span class="line">        socket.startHandshake();</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        writer.write(<span class="string">&quot;GET https://www.google.com HTTP/1.0\r\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;host: www.google.com\r\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;Connection: close\r\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine() )!= <span class="literal">null</span>)&#123;</span><br><span class="line">            stringBuffer.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writer.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        System.out.println(stringBuffer.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TrustM</span> <span class="keyword">implements</span> <span class="title class_">X509TrustManager</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(X509Certificate[] x509Certificates, String s)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;checkClientTrusted:&quot;</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509Certificate[] x509Certificates, String s)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;checkServerTrusted:&quot;</span>+s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">X509Certificate</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码是能够通过<code>HTTPS代理服务器</code>正确的请求到Google的内容</p><p>所以目前结论如下:</p><ol><li><p>JDK提供的代理仅支持<code>SOCK</code>,<code>HTTP</code></p></li><li><p>假如代理服务器是<code>HTTPS</code>协议，那么设置代理后将无法完成请求</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol start="0"><li><p><a href="https://blog.csdn.net/sbc1232123321/article/details/79334130">JAVA设置代理的两种方式（HTTP和HTTPS）</a></p></li><li><p><a href="https://blog.csdn.net/lvyibin890/article/details/82462041">HTTPS协议的工作原理</a></p></li><li><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html">Java Networking and Proxies</a></p></li><li><p><a href="https://cr.openjdk.java.net/~iris/se/11/latestSpec/api/java.base/java/net/doc-files/net-properties.html">Networking Properties</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在使用spring-cloud-gateway和nacos中遇到的ConcurrentModification异常分析</title>
      <link href="/2019/05/30/%E5%9C%A8%E4%BD%BF%E7%94%A8spring-cloud-gateway%E5%92%8Cnacos%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84ConcurrentModification%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/"/>
      <url>/2019/05/30/%E5%9C%A8%E4%BD%BF%E7%94%A8spring-cloud-gateway%E5%92%8Cnacos%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84ConcurrentModification%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>最近项目中升级了spring-boot版本(2.1.3.RELEASE)，同时也把之前的Zuul替换成了spring-gate-way(2.1.1.RELEASE),并且集成了nacos(1.0.0)..</p><p>发布到测试环境的时候，出现了如下异常<br> <escape><span id="more"></span></escape></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">reactor.core.Exceptions$ErrorCallbackNotImplemented: java.util.ConcurrentModificationException</span><br><span class="line">Caused by: java.util.ConcurrentModificationException: <span class="literal">null</span></span><br><span class="line">        at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">909</span>)</span><br><span class="line">        at java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">859</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable$IterableSubscription.poll(FluxIterable.java:<span class="number">389</span>)</span><br><span class="line">        at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:<span class="number">634</span>)</span><br><span class="line">        at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:<span class="number">540</span>)</span><br><span class="line">        at reactor.core.publisher.FluxFlatMap$FlatMapInner.onSubscribe(FluxFlatMap.java:<span class="number">924</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:<span class="number">139</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:<span class="number">63</span>)</span><br><span class="line">        at reactor.core.publisher.Flux.subscribe(Flux.java:<span class="number">7777</span>)</span><br><span class="line">        at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:<span class="number">389</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:<span class="number">243</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:<span class="number">201</span>)</span><br><span class="line">        at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:<span class="number">335</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:<span class="number">139</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:<span class="number">63</span>)</span><br><span class="line">        at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:<span class="number">97</span>)</span><br><span class="line">        at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:<span class="number">62</span>)</span><br><span class="line">        at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:<span class="number">62</span>)</span><br><span class="line">        at reactor.core.publisher.Flux.subscribe(Flux.java:<span class="number">7777</span>)</span><br><span class="line">        at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:<span class="number">389</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:<span class="number">243</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:<span class="number">201</span>)</span><br><span class="line">        at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:<span class="number">335</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:<span class="number">139</span>)</span><br><span class="line">        at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:<span class="number">63</span>)</span><br><span class="line">        at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:<span class="number">97</span>)</span><br><span class="line">        at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:<span class="number">59</span>)</span><br><span class="line">        at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:<span class="number">59</span>)</span><br><span class="line">        at reactor.core.publisher.MonoFlattenIterable.subscribe(MonoFlattenIterable.java:<span class="number">101</span>)</span><br><span class="line">        at reactor.core.publisher.FluxMaterialize.subscribe(FluxMaterialize.java:<span class="number">40</span>)</span><br><span class="line">        at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:<span class="number">59</span>)</span><br><span class="line">        at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:<span class="number">74</span>)</span><br><span class="line">        at reactor.core.publisher.MonoFlattenIterable.subscribe(MonoFlattenIterable.java:<span class="number">101</span>)</span><br><span class="line">        at reactor.core.publisher.FluxDematerialize.subscribe(FluxDematerialize.java:<span class="number">39</span>)</span><br><span class="line">        at reactor.core.publisher.FluxDefer.subscribe(FluxDefer.java:<span class="number">54</span>)</span><br><span class="line">        at reactor.core.publisher.Flux.subscribe(Flux.java:<span class="number">7777</span>)</span><br><span class="line">        at reactor.core.publisher.Flux.subscribeWith(Flux.java:<span class="number">7941</span>)</span><br><span class="line">        at reactor.core.publisher.Flux.subscribe(Flux.java:<span class="number">7770</span>)</span><br><span class="line">        at reactor.core.publisher.Flux.subscribe(Flux.java:<span class="number">7734</span>)</span><br><span class="line">        at reactor.core.publisher.Flux.subscribe(Flux.java:<span class="number">7652</span>)</span><br><span class="line">        at org.springframework.cloud.gateway.filter.WeightCalculatorWebFilter.lambda$onApplicationEvent$<span class="number">0</span>(WeightCalculatorWebFilter.java:<span class="number">133</span>)</span><br><span class="line">        at org.springframework.beans.factory.ObjectProvider.ifAvailable(ObjectProvider.java:<span class="number">93</span>)</span><br><span class="line">        at org.springframework.cloud.gateway.filter.WeightCalculatorWebFilter.onApplicationEvent(WeightCalculatorWebFilter.java:<span class="number">133</span>)</span><br><span class="line">        at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:<span class="number">172</span>)</span><br><span class="line">        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:<span class="number">165</span>)</span><br><span class="line">        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:<span class="number">139</span>)</span><br><span class="line">        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:<span class="number">402</span>)</span><br><span class="line">        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:<span class="number">359</span>)</span><br><span class="line">        at org.springframework.cloud.gateway.route.RouteRefreshListener.reset(RouteRefreshListener.java:<span class="number">68</span>)</span><br><span class="line">        at org.springframework.cloud.gateway.route.RouteRefreshListener.resetIfNeeded(RouteRefreshListener.java:<span class="number">63</span>)</span><br><span class="line">        at org.springframework.cloud.gateway.route.RouteRefreshListener.onApplicationEvent(RouteRefreshListener.java:<span class="number">57</span>)</span><br><span class="line">        at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:<span class="number">172</span>)</span><br><span class="line">        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:<span class="number">165</span>)</span><br><span class="line">        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:<span class="number">139</span>)</span><br><span class="line">        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:<span class="number">402</span>)</span><br><span class="line">        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:<span class="number">359</span>)</span><br><span class="line">        at org.springframework.cloud.alibaba.nacos.discovery.NacosWatch.lambda$nacosServicesWatch$<span class="number">0</span>(NacosWatch.java:<span class="number">156</span>)</span><br><span class="line">        at com.alibaba.nacos.client.naming.core.EventDispatcher$Notifier.run(EventDispatcher.java:<span class="number">128</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>上述异常是<code>spring-cloud-gateway</code>的<code>WeightCalculatorWebFilter</code>在监听到RefreshRouteEvent时回调<code>onApplicationEvent</code>抛出的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (event <span class="keyword">instanceof</span> PredicateArgsEvent) &#123;</span><br><span class="line">handle((PredicateArgsEvent) event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> WeightDefinedEvent) &#123;</span><br><span class="line">addWeightConfig(((WeightDefinedEvent) event).getWeightConfig());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> RefreshRoutesEvent &amp;&amp; routeLocator != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//这里的locator.getRoutes().subscribe()会迭代GatewayProperties中routes的元素</span></span><br><span class="line">routeLocator.ifAvailable(locator -&gt; locator.getRoutes().subscribe()); <span class="comment">// forces</span></span><br><span class="line"><span class="comment">// initialization</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现了ConcurrentModification这个异常，那就说明了routes中的元素肯定被修改了，话不多说，直接debug</p><p>首先在GatewayProperties中的setRoutes()方法中打一个断点，当断点被触发的时候，记下List<RouteDefinition> routes的实例id</p><p>然后到AbstractList中找到modCount字段，设置断点</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303160026672.jpg"></p><p>下面就静静的等待断点触发</p><p>大概就十几秒吧</p><p>当断点被触发时，顺着堆栈，找到源头</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303160027156.jpg"></p><p>上面的截图中的方法属于<code>NacosContextRefresher</code> 这个类,这个方法发布了一个RefreshEvent</p><p><code>RefreshEventListener</code> 监听了这个事件回调后，会执行下面这个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(RefreshEvent event)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.ready.get()) &#123; <span class="comment">// don&#x27;t handle events before app is ready</span></span><br><span class="line">log.debug(<span class="string">&quot;Event received &quot;</span> + event.getEventDesc());</span><br><span class="line">Set&lt;String&gt; keys = <span class="built_in">this</span>.refresh.refresh();</span><br><span class="line">log.info(<span class="string">&quot;Refresh keys changed: &quot;</span> + keys);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个方法会调用<code>ContextRefresher</code>中的<code>refresh</code>方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public synchronized <span class="title class_">Set</span>&lt;<span class="title class_">String</span>&gt; <span class="title function_">refresh</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Set</span>&lt;<span class="title class_">String</span>&gt; keys = <span class="title function_">refreshEnvironment</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">scope</span>.<span class="title function_">refreshAll</span>();</span><br><span class="line"><span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法会使<code>Environment</code>中的配置属性刷新，重新加载，同时一些<code>ConfigurationPropertie</code> 类的属性会被重新绑定（这个时候<code>GatewayProperties</code>中之前的<code>routes</code>中的元素会被清除，然后设置新的路由信息，进而modCount这个值也被修改了），然后发布<code>RefreshScopeRefreshedEvent</code></p><p><code>RouteRefreshListener</code> 监听了 <code>RefreshScopeRefreshedEvent</code>这个事件，当回调时，发布<code>RefreshRoutesEvent</code>事件</p><p><code>spring-cloud-gateway</code> 中的<code>CachingRouteLocator</code>和上面提到的<code>WeightCalculatorWebFilter</code> 都监听了RefreshRoutesEvent&#96;事件</p><p>然后触发各个监听器的回调方法</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303160027013.jpg"></p><p>由于上述的<code>GatewayProperties</code>中之前的routes集合已被修改过，当<code>WeightCalculatorWebFilter</code>中的方法回调时，会调用<code>CachingRouteLocator</code>中<code>getRoutes</code>方法，然后的迭代routes中的元素</p><p>再来看<code>CachingRouteLocator</code>中的代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachingRouteLocator</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">RouteLocator</span>, ApplicationListener&lt;RefreshRoutesEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RouteLocator delegate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//Routes</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Flux&lt;Route&gt; routes;</span><br><span class="line"></span><br><span class="line"><span class="comment">//routes缓存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CachingRouteLocator</span><span class="params">(RouteLocator delegate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.delegate = delegate;</span><br><span class="line"><span class="comment">//当调用Flux&lt;Route&gt;相关方法时，会先从cache中获取（key为routes,value为List&lt;Route&gt;)，当cache中有对应route时，直接从缓存中获取，否则从GatewayProperties中获取</span></span><br><span class="line">routes = CacheFlux.lookup(cache, <span class="string">&quot;routes&quot;</span>, Route.class)</span><br><span class="line">.onCacheMissResume(() -&gt; <span class="built_in">this</span>.delegate.getRoutes()</span><br><span class="line">.sort(AnnotationAwareOrderComparator.INSTANCE));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回Flux&lt;Route&gt;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;Route&gt; <span class="title function_">getRoutes</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.routes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Clears the routes cache.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> routes flux</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;Route&gt; <span class="title function_">refresh</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.cache.clear();</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.routes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(RefreshRoutesEvent event)</span> &#123;</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="comment">/* for testing */</span> <span class="keyword">void</span> <span class="title function_">handleRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>Map&lt;String,List&gt; cache</code>中有routes的缓存，所以<code>getRoutes</code>获取到的是被修改过的<code>List&lt;Route&gt; routes</code>,所以这个时候100%触发<code>ConcurrentModificationException</code> </p><p>下面上一张简要的流程图，来看整个流程(图画得丑)</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303160027493.jpg"></p><h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h1><ol><li><p>要想解决上述问题，需要让<code>CachingRouteLocator</code>先于<code>WeightCalculatorWebFilter</code> 触发<code>RefreshRouteEvent</code>事件回调</p><p> 但是spring事件广播器在获取对应事件的监听器时会对listener做排序(升序)，由于<code>WeightCalculatorWebFilter</code>实现了<code>Ordered</code>,而<code>CachingRouteLocator</code>没有(优先级排最后)，这是似乎有点难搞啊</p><p> 好在我们有AOP,可以对<code>CachingRouteLocator</code>做“增强”，代理<code>CachingRouteLocator</code>并且让他实现<code>Ordered</code>接口。相关代码如下</p>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AopProxyUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.ProxyFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.CachingRouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Enhance the CachingRouteLocator </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suchu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachingRouteLocatorHook</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        Class&lt;?&gt; targetClass = AopProxyUtils.ultimateTargetClass(bean);</span><br><span class="line">        <span class="keyword">if</span> (targetClass.getName().equals(CachingRouteLocator.class.getName())) &#123;</span><br><span class="line">            <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">            factory.addInterface(Ordered.class);</span><br><span class="line">            factory.setTarget(bean);</span><br><span class="line">            factory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">            factory.addAdvice((MethodInterceptor) methodInvocation -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;getOrder&quot;</span>.equals(methodInvocation.getMethod().getName())) &#123;</span><br><span class="line">                    <span class="comment">//这里就简单返回1吧，只要比WeightCalculator的order小就行了.</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> methodInvocation.proceed();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> factory.getProxy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>等spring-cloud-gateway后面修复吧，或者换成其他网关(2333)</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>学到新的debug技巧(只触发指定实例id的断点)</p></li><li><p>了解nacos的一些基本原理</p></li><li><p>了解了reactor的一些基本概念，和基本操作</p></li><li><p>自己太菜了,还得多学习</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> debug </tag>
            
            <tag> spring-cloud-gateway </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次 UnzipError: incorrect header check...错误分析</title>
      <link href="/2019/05/27/%E8%AE%B0%E4%B8%80%E6%AC%A1-UnzipError-incorrect-header-check-%E9%94%99%E8%AF%AF%E5%88%86%E6%9E%90/"/>
      <url>/2019/05/27/%E8%AE%B0%E4%B8%80%E6%AC%A1-UnzipError-incorrect-header-check-%E9%94%99%E8%AF%AF%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p> 今天前端小伙伴在调试前端项目遇到一个问题，简单分析记录下.<br> <escape><span id="more"></span></escape></p><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><ol><li><p>前端项目基于Alibaba 的<a href="https://eggjs.org/">eggjs</a>  构建的SSR项目.</p></li><li><p>Api请求通过<code>Nginx</code> 反向代理到<code>Gateway(Zuul v2.1.1RELEASE + nacos 1.0)</code></p></li></ol><p> 相关js<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Service</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;beidou&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">SimpleService</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Service</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">curl</span>(<span class="string">&#x27;http://service.demo.com/api/querySomething&#x27;</span>, &#123;</span><br><span class="line">              <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">              <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">              <span class="attr">data</span>: &#123;<span class="attr">id</span>:<span class="number">1</span>&#125;       </span><br><span class="line">            &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>访问页面时NodeJs server 抛出如下异常</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &#123; UnzipError: incorrect header check, GET http://service.demo.com/api/querySomething 200 (connected: true, keepalive socket: false, agent status: &#123;&quot;createSocketCount&quot;:1,&quot;createSocketErrorCount&quot;:0,&quot;closeSocketCount&quot;:0,&quot;errorSocketCount&quot;:0,&quot;timeoutSocketCount&quot;:0,&quot;requestCount&quot;:0,&quot;freeSockets&quot;:&#123;&#125;,&quot;sockets&quot;:&#123;&quot;testgate.feewee.cn:443::::::::::::::::&quot;:1&#125;,&quot;requests&quot;:&#123;&#125;&#125;, socketHandledRequests: 1, socketHandledResponses: 1)</span><br><span class="line">headers: &#123;&quot;date&quot;:&quot;Mon, 27 May 2019 01:52:46 GMT&quot;,&quot;content-type&quot;:&quot;application/json;charset=UTF-8&quot;,&quot;transfer-encoding&quot;:&quot;chunked&quot;,&quot;connection&quot;:&quot;close&quot;,&quot;vary&quot;:&quot;accept-encoding&quot;,&quot;content-encoding&quot;:&quot;gzip&quot;,&quot;access-control-allow-origin&quot;:&quot;*&quot;,&quot;access-control-allow-credentials&quot;:&quot;true&quot;,&quot;access-control-allow-methods&quot;:&quot;GET, POST, OPTIONS&quot;&#125;</span><br><span class="line">    at Zlib.zlibOnError [as onerror] (zlib.js:153:17)</span><br><span class="line">  errno: -3,</span><br><span class="line">  code: &#x27;Z_DATA_ERROR&#x27;,</span><br><span class="line">  name: &#x27;UnzipError&#x27;,</span><br><span class="line">  data:</span><br><span class="line">   &lt;Buffer 7b 22 63 6f 64 65 22 3a 30 2c 22 72 65 73 75 6c 74 22 3a 22 e6 93 8d e4 bd 9c e6 88 90 e5 8a 9f 21 22 2c 22 64 61 74 61 22 3a 7b 22 61 63 74 69 76 69 ... &gt;,</span><br><span class="line">  path:</span><br><span class="line">   &#x27;/api/querySomething?id=1&#x27;,</span><br><span class="line">  status: 200,</span><br><span class="line">  headers:</span><br><span class="line">   &#123; date: &#x27;Mon, 27 May 2019 01:52:46 GMT&#x27;,</span><br><span class="line">     &#x27;content-type&#x27;: &#x27;application/json;charset=UTF-8&#x27;,</span><br><span class="line">     &#x27;transfer-encoding&#x27;: &#x27;chunked&#x27;,</span><br><span class="line">     connection: &#x27;close&#x27;,</span><br><span class="line">     vary: &#x27;accept-encoding&#x27;,</span><br><span class="line">     &#x27;content-encoding&#x27;: &#x27;gzip&#x27;,</span><br><span class="line">     &#x27;access-control-allow-origin&#x27;: &#x27;*&#x27;,</span><br><span class="line">     &#x27;access-control-allow-credentials&#x27;: &#x27;true&#x27;,</span><br><span class="line">     &#x27;access-control-allow-methods&#x27;: &#x27;GET, POST, OPTIONS&#x27; &#125;,</span><br><span class="line">  res:</span><br><span class="line">   &#123; status: 200,</span><br><span class="line">     statusCode: 200,</span><br><span class="line">     statusMessage: &#x27;&#x27;,</span><br><span class="line">     headers:</span><br><span class="line">      &#123; date: &#x27;Mon, 27 May 2019 01:52:46 GMT&#x27;,</span><br><span class="line">        &#x27;content-type&#x27;: &#x27;application/json;charset=UTF-8&#x27;,</span><br><span class="line">        &#x27;transfer-encoding&#x27;: &#x27;chunked&#x27;,</span><br><span class="line">        connection: &#x27;close&#x27;,</span><br><span class="line">        vary: &#x27;accept-encoding&#x27;,</span><br><span class="line">        &#x27;content-encoding&#x27;: &#x27;gzip&#x27;,</span><br><span class="line">        &#x27;access-control-allow-origin&#x27;: &#x27;*&#x27;,</span><br><span class="line">        &#x27;access-control-allow-credentials&#x27;: &#x27;true&#x27;,</span><br><span class="line">        &#x27;access-control-allow-methods&#x27;: &#x27;GET, POST, OPTIONS&#x27; &#125;,</span><br><span class="line">     size: 528,</span><br><span class="line">     aborted: false,</span><br><span class="line">     rt: 433,</span><br><span class="line">     keepAliveSocket: false,</span><br><span class="line">     data:</span><br><span class="line">      &lt;Buffer 7b 22 63 6f 64 65 22 3a 30 2c 22 72 65 73 75 6c 74 22 3a 22 e6 93 8d e4 bd 9c e6 88 90 e5 8a 9f 21 22 2c 22 64 61 74 61 22 3a 7b 22 61 63 74 69 76 69 ... &gt;,</span><br><span class="line">     requestUrls: [ &#x27;http://service.demo.com/api/querySomething&#x27; ],</span><br><span class="line">     timing: null,</span><br><span class="line">     remoteAddress: &#x27;192.168.0.251&#x27;,</span><br><span class="line">     remotePort: 443,</span><br><span class="line">     socketHandledRequests: 1,</span><br><span class="line">     socketHandledResponses: 1 &#125; &#125;</span><br></pre></td></tr></table></figure><p> 上述异常是在请求<code>/api/querySomething</code>这个接口，处理响应内容时，出现gzip 解压错误.在浏览器里测试了下这个接口，接口是有正确返回。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><code>Gzip</code>的文件头的前两个字节是<code>1F 8B</code>,上述响应头出现了<code>content-encoding: gzip</code>,表示内容使用了<code>gzip</code>压缩,但是上述接口返回的内容体 并不是<code>gzip</code>格式的。所以导致了<code>gzip解压</code>失败。</p><p> 为了知道请求时具体发生了什么，使用java 模拟了下这个接口调用</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="comment">//为了防止HttpURLConnection 可能带来其他请求头的干扰，所以直接用socket 模拟 http 请求协议</span></span><br><span class="line">       <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;192.168.0.122&quot;</span>,<span class="number">80</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">request</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;GET /api/querySomething HTTP/1.1\r\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;Host: service.demo.com\r\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;Cache-Control: max-age=0\r\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;DNT: 1\r\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;Accept-Language: zh-CN,zh;q=0.9\r\n\r\n&quot;</span>);</span><br><span class="line">       socket.getOutputStream().write(request.getBytes());</span><br><span class="line">       socket.getOutputStream().flush();</span><br><span class="line">       System.out.println(inputStreamToString2(socket.getInputStream()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">inputStreamToString2</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="type">byte</span> [] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">       <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">       <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.read(buffer);</span><br><span class="line">       <span class="keyword">while</span>(len != -<span class="number">1</span>)&#123;</span><br><span class="line">           os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            len = inputStream.read(buffer);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(os.toByteArray());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>测试输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 27 May 2019 14:48:32 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Content-Length: 103</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Allow-Headers: Authorization,DNT,User-Agent,Keep-Alive,Content-Type,accept,origin,X-Requested-With</span><br><span class="line">Access-Control-Allow-Methods: GET,OPTIONS,PUT,DELETE</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line"></span><br><span class="line">&#123;&quot;code&quot;:1001,&quot;result&quot;:&quot;test result&quot;,&quot;data&quot;:null,&quot;success&quot;:false&#125;   </span><br></pre></td></tr></table></figure><p>再次测试,把请求头加上<code>Accept-encoding:gzip</code></p><p>测试输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 27 May 2019 14:48:32 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Content-Length: 103</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Allow-Headers: Authorization,DNT,User-Agent,Keep-Alive,Content-Type,accept,origin,X-Requested-With</span><br><span class="line">Access-Control-Allow-Methods: GET,OPTIONS,PUT,DELETE</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line"></span><br><span class="line">�        I ��&#123;&quot;code&quot;:1001,&quot;result&quot;:&quot;test result&quot;,&quot;data&quot;:null,&quot;success&quot;:false&#125;   �� ��UI     </span><br></pre></td></tr></table></figure><p>第一次请求返回的内容非gzip,第二次的请求返回内容已被gzip压缩过（上述乱码部分是 gzip 的相关标识字节序)</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ol><li><p>nginx server 每次的响应头都返回了 <code>Content-Encoding: gzip</code> </p></li><li><p>只对请求头中出现了<code>Accept-encoding:gzip</code>的请求才会压缩响应内容.</p></li></ol><p>通过<a href="https://www.wireshark.org/">Wireshark</a> 抓包发现，前端node server 发起的请求的头中没有 <code>Accept-encoding:gzip</code> .</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303160033796.jpg" alt="capture"></p><p>备注: </p><blockquote><ol><li>nginx 已开启<code>gzip</code> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip on;</span><br></pre></td></tr></table></figure></li><li>wireshark 过滤指定ip的数据包 <code>ip.addr == target ip address</code></li></ol></blockquote><p><del>至于为啥请求头中没有<code>Accept-encoding:gzip</code>,nginx 还是返回 <code>Content-Encoding: gzip</code> ,只有研究下nginx的gzip模块源码才知道了(有机会补充)</del></p><p><strong>!!! 上面的锅，Nginx 不背 !!!</strong></p><h1 id="补充-2019年5月28日"><a href="#补充-2019年5月28日" class="headerlink" title="补充(2019年5月28日)"></a>补充(2019年5月28日)</h1><p>研究了下发现，最终问题出在Zuul 网关。</p><p>分析Zuul网关源码发现,Zuul会把upstream服务器的响应头全部返回给客户端，即使内容非GZIP.</p><p>相关代码在 <a href="https://github.com/spring-cloud/spring-cloud-netflix/blob/v2.1.1.RELEASE/spring-cloud-netflix-zuul/src/main/java/org/springframework/cloud/netflix/zuul/filters/post/SendResponseFilter.java#L258">SendResponseFilter#addResponseHeader</a></p><p>这个类做了两件事 </p><ol><li><p>添加响应头</p></li><li><p>写响应内容</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    addResponseHeaders();</span><br><span class="line">    writeResponse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加响应头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addResponseHeaders</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">RequestContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line"><span class="comment">//....省略</span></span><br><span class="line"><span class="comment">//获取代理请求返回的响应头</span></span><br><span class="line">List&lt;Pair&lt;String, String&gt;&gt; zuulResponseHeaders = context.getZuulResponseHeaders();</span><br><span class="line"><span class="keyword">if</span> (zuulResponseHeaders != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Pair&lt;String, String&gt; it : zuulResponseHeaders) &#123;</span><br><span class="line">    <span class="comment">///写入到ServletResponse中（实际返回给客户端)</span></span><br><span class="line">servletResponse.addHeader(it.first(), it.second());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .... 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeResponse</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">RequestContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">//...省略</span></span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">servletResponse</span> <span class="operator">=</span> context.getResponse();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">outStream</span> <span class="operator">=</span> servletResponse.getOutputStream();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (context.getResponseBody() != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> context.getResponseBody();</span><br><span class="line">is = <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(</span><br><span class="line">body.getBytes(servletResponse.getCharacterEncoding()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 获取响应内容输入流</span></span><br><span class="line">is = context.getResponseDataStream();</span><br><span class="line"><span class="comment">//判断是否响应内容是Gzip编码</span></span><br><span class="line"><span class="keyword">if</span> (is != <span class="literal">null</span> &amp;&amp; context.getResponseGZipped()) &#123;</span><br><span class="line"><span class="comment">// if origin response is gzipped, and client has not requested gzip,</span></span><br><span class="line"><span class="comment">// decompress stream before sending to client</span></span><br><span class="line"><span class="comment">// else, stream gzip directly to client</span></span><br><span class="line"><span class="keyword">if</span> (isGzipRequested(context)) &#123;</span><br><span class="line">servletResponse.setHeader(ZuulHeaders.CONTENT_ENCODING, <span class="string">&quot;gzip&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//问题就出在这里，虽然这里做了解压，但是没有去掉之前添加的&quot;Content-encoding: gzip&quot;.</span></span><br><span class="line">is = handleGzipStream(is);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">writeResponse(is, outStream);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最新的master分支已经修复这个问题了.</p><p>相关Issue：<a href="https://github.com/spring-cloud/spring-cloud-netflix/pull/3421">Don’t set content-encoding header when un-gzipping</a></p><p>吐槽下：这个问题至最近才被人发现解决，去年在项目实际开发中就遇到了这个隐藏的bug（处理鹰眼围栏通知回调），迫于没有仔细研究,当时采用了其他方法解决，真是应了那句话 <strong>“天道好轮回，苍天饶过谁”</strong></p><h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h1><ol><li><p>前端在访问api时加上如下配置</p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">curl</span>(<span class="string">&#x27;http://service.demo.com/api/querySomething&#x27;</span>, &#123;</span><br><span class="line">             <span class="attr">gzip</span>: <span class="literal">true</span>,<span class="comment">//当开启改选项时，请求头会自动添加`Accept-encoding:gzip`,默认关闭</span></span><br><span class="line">             <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">             <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">             <span class="attr">data</span>: &#123;<span class="attr">id</span>:<span class="number">1</span>&#125;       </span><br><span class="line">           &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><p> 上述curl使用的js库为<a href="https://github.com/node-modules/urllib">urllib</a></p></li><li><p>等spring-cloud-neflix 发布最新release，或者拉取最新的master分支源码本地install.</p></li><li><p>使用spring-cloud-gateway</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/jison_r_wang/article/details/52068607">GZIP压缩原理分析（04）——第三章 gzip文件格式详解（三02） gzip文件头</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Schedule不生效问题分析</title>
      <link href="/2019/05/14/Spring-Schedule%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/2019/05/14/Spring-Schedule%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p> 本文记录使用Spring @Schedule 配置不生效的问题分析.<br> <escape><span id="more"></span></escape></p><h1 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h1><p>  先说下项目环境,项目中使用的spring版本是<code>4.3.8</code>.</p><p>  启用Spring schedule.<br>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br> Task 类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * job</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 3000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// actualBizLogic();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目启动后任务并没有按照预期执行.</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>spring通过<code>@Scheduled</code> 配置job，通过<code>@EnableScheduling</code> 启用计划任务调度</p><p><code>@EnableScheduling</code>源码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(SchedulingConfiguration.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableScheduling &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该注解通过<code>@Import</code>导入<code>SchedulingConfiguration</code> 配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulingConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">public</span> ScheduledAnnotationBeanPostProcessor <span class="title function_">scheduledAnnotationProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//这里配置了用于处理@Scheduled 注解的BeanPostProcessor (bean后置处理器)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledAnnotationBeanPostProcessor</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BeanPostProcessor</code> 是Spring的中的扩展点，可以对bean初始化后做一些增强操作(eg:声明式事务的实现)</p><p><code>ScheduledAnnotationBeanPostProcessor</code> 的关键代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> &#123;</span><br><span class="line">   <span class="comment">//获取bean的目标类型 ，注意: 因为bean可能会被其他BeanPostProcessor 增强生成代理的bean,所以这里需要获取bean的实际类型</span></span><br><span class="line">Class&lt;?&gt; targetClass = AopUtils.getTargetClass(bean);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.nonAnnotatedClasses.contains(targetClass)) &#123;</span><br><span class="line">    <span class="comment">//获取目标类中所有带有@Scheduled 注解的方法</span></span><br><span class="line">Map&lt;Method, Set&lt;Scheduled&gt;&gt; annotatedMethods = MethodIntrospector.selectMethods(targetClass,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MethodIntrospector</span>.MetadataLookup&lt;Set&lt;Scheduled&gt;&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Scheduled&gt; <span class="title function_">inspect</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">Set&lt;Scheduled&gt; scheduledMethods = AnnotatedElementUtils.getMergedRepeatableAnnotations(</span><br><span class="line">method, Scheduled.class, Schedules.class);</span><br><span class="line"><span class="keyword">return</span> (!scheduledMethods.isEmpty() ? scheduledMethods : <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (annotatedMethods.isEmpty()) &#123;</span><br><span class="line"><span class="built_in">this</span>.nonAnnotatedClasses.add(targetClass);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">&quot;No @Scheduled annotations found on bean class: &quot;</span> + bean.getClass());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Non-empty set of methods</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Method, Set&lt;Scheduled&gt;&gt; entry : annotatedMethods.entrySet()) &#123;</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line"><span class="keyword">for</span> (Scheduled scheduled : entry.getValue()) &#123;</span><br><span class="line">processScheduled(scheduled, method, bean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(annotatedMethods.size() + <span class="string">&quot; @Scheduled methods processed on bean &#x27;&quot;</span> + beanName +</span><br><span class="line"><span class="string">&quot;&#x27;: &quot;</span> + annotatedMethods);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题就出现在上述代码中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; targetClass = AopUtils.getTargetClass(bean);</span><br></pre></td></tr></table></figure><p>我们查看<code>AopUtils#getTargetClass</code> 源码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getTargetClass(Object candidate) &#123;</span><br><span class="line">Assert.notNull(candidate, <span class="string">&quot;Candidate object must not be null&quot;</span>);</span><br><span class="line">Class&lt;?&gt; result = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//如果目标对象是对代理过的对象</span></span><br><span class="line"><span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> TargetClassAware) &#123;</span><br><span class="line">    <span class="comment">//获取targetClass</span></span><br><span class="line">result = ((TargetClassAware) candidate).getTargetClass();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">result = (isCglibProxy(candidate) ? candidate.getClass().getSuperclass() : candidate.getClass());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下这里不会有问题，但是当我们的<code>bean</code> 被多重代理后，获取到target并不是真正的目标对象，因此获取到的targetClass并不是实际的class</p><p>最终 <code>MethodIntrospector.selectMethods</code>  去获取 带有<code>@Scheduled</code> 的方法自然获取不到，我们的方法也不会加入任务调度.</p><p>这个问题在 spring <code>4.3.14</code> 版本中被修复了</p><p>修复后的<a href="https://github.com/spring-projects/spring-framework/blob/v4.3.14.RELEASE/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java#L310">源码</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个方法可以获取到被多重代理的bean的实际类</span></span><br><span class="line">Class&lt;?&gt; targetClass = AopProxyUtils.ultimateTargetClass(bean);</span><br></pre></td></tr></table></figure><p>相关Issue <a href="https://github.com/spring-projects/spring-framework/issues/20744">Combining @Retryable and @Scheduled&#x2F;@JmsListener doesn’t work [SPR-16196] </a>   </p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于JRebel开发的MybatisPlus热加载插件</title>
      <link href="/2019/05/11/%E5%9F%BA%E4%BA%8EJRebel%E5%BC%80%E5%8F%91%E7%9A%84MybatisPlus%E7%83%AD%E5%8A%A0%E8%BD%BD%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/05/11/%E5%9F%BA%E4%BA%8EJRebel%E5%BC%80%E5%8F%91%E7%9A%84MybatisPlus%E7%83%AD%E5%8A%A0%E8%BD%BD%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>   前天项目中使用了mybatis-plus,但是搭配Jrebel开发项目时，发现修改mapper的xml，或者mapper方法中的注解，Jrebel并没有能够reload mapper.于是就有了本篇文章</p><p><escape><span id="more"></span></escape></p><h1 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h1><p>  为了解决这个问题，首先想到的是到mybatis-plus官网查看配置方法，官网中的文档<a href="https://mp.baomidou.com/guide/hot-loading.html">热加载</a>很清楚说明了</p><p>  <code>3.0.6版本上移除了该功能,不过最新快照版已加回来并打上废弃标识,3.1.0版本上已完全移除</code></p><p>  按照官网配置<br>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span> <span class="comment">// </span></span><br><span class="line"><span class="keyword">public</span> MybatisMapperRefresh <span class="title function_">mybatisMapperRefresh</span> <span class="params">(MybatisPlusProperties properties, SqlSessionFactory sessionFactory)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MybatisMapperRefresh</span>(properties.resolveMapperLocations(), sessionFactory, <span class="literal">true</span>);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><br>上述配置后重新运行项目，修改mapper，发现并没有生效，于是开始研究他的源码。<br>通过查看<code>MybatisMapperRefresh</code>源码发现他的实现方式：重建mapper来实现<code>热加载</code>的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">XMLMapperBuilder</span> <span class="variable">xmlMapperBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLMapperBuilder</span>(resource.getInputStream(),</span><br><span class="line">             sqlSessionFactory.getConfiguration(),</span><br><span class="line">             resource.toString(), sqlSessionFactory.getConfiguration().getSqlFragments());</span><br><span class="line">         xmlMapperBuilder.parse();</span><br></pre></td></tr></table></figure><p>最终定位到关键代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * MybatisPlus 加载 SQL 顺序：</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;1、加载XML中的SQL&lt;/p&gt;</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;2、加载sqlProvider中的SQL&lt;/p&gt;</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;3、xmlSql 与 sqlProvider不能包含相同的SQL&lt;/p&gt;</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;调整后的SQL优先级：xmlSql &gt; sqlProvider &gt; curdSql&lt;/p&gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMappedStatement</span><span class="params">(MappedStatement ms)</span> &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;addMappedStatement: &quot;</span> + ms.getId());</span><br><span class="line">      <span class="keyword">if</span> (mappedStatements.containsKey(ms.getId())) &#123;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">           * 说明已加载了xml中的节点； 忽略mapper中的SqlProvider数据</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          logger.error(<span class="string">&quot;mapper[&quot;</span> + ms.getId() + <span class="string">&quot;] is ignored, because it exists, maybe from xml file&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">super</span>.addMappedStatement(ms);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注:Mybatisplus重写了mybatis的<code>Configuration</code>类(这也是Jrebel 无法热加载SQL maps)的原因之一</p><p>上面添加<code>MappedStatement</code>到<code>Configuration</code>时先判断了是否已经加载过,但是项目启动时,<code>Configuration</code>已加载了所有的<code>MappedStatement</code>,所以<code>MybatisMapperRefresh</code> 这个后台线程后面reload完全没有作用.</p><h1 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h1><p> 先来个滑稽压压惊</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303160034217.gif"></p><p> 为了弄清楚JRebel是如何实现mybatis热加载。</p><p> 我把jrebel的插件作为libary，添加到工程里.</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303160035011.jpg"></p><p>利用IDEA 天然的反编译功能，顺利成章的看到了源码<br>下面是mybatis热加载插件的主入口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preinit</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> MyBatisPlugin.class.getClassLoader();</span><br><span class="line">    <span class="type">Integration</span> <span class="variable">integration</span> <span class="operator">=</span> IntegrationFactory.getInstance();</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.io.Resources&quot;</span>, <span class="keyword">new</span> <span class="title class_">ResourcesCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;org.apache.ibatis.builder.xml.XMLConfigBuilder&quot;</span>, <span class="string">&quot;pl.atena.ibatisbaf.core.config.ConfigBuilder&quot;</span>&#125;, <span class="keyword">new</span> <span class="title class_">XMLConfigBuilderCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.session.defaults.DefaultSqlSessionFactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">DefaultSqlSessionFactoryCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.session.Configuration&quot;</span>, <span class="keyword">new</span> <span class="title class_">ConfigurationCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.session.Configuration$StrictMap&quot;</span>, <span class="keyword">new</span> <span class="title class_">StrictMapCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.binding.MapperRegistry&quot;</span>, <span class="keyword">new</span> <span class="title class_">MapperRegistryCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.reflection.Reflector&quot;</span>, <span class="keyword">new</span> <span class="title class_">ReflectorCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.reflection.DefaultReflectorFactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">DefaultReflectorFactoryCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>, <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBeanCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.builder.annotation.MapperAnnotationBuilder&quot;</span>, <span class="keyword">new</span> <span class="title class_">MapperAnnotationBuilderCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.type.TypeAliasRegistry&quot;</span>, <span class="keyword">new</span> <span class="title class_">TypeAliasRegistryCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.plugin.InterceptorChain&quot;</span>, <span class="keyword">new</span> <span class="title class_">InterceptorChainCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span>, <span class="keyword">new</span> <span class="title class_">MapperFactoryBeanCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.mybatis.spring.annotation.MapperScannerRegistrar&quot;</span>, <span class="keyword">new</span> <span class="title class_">MapperScannerRegistrarCBP</span>());</span><br><span class="line">    integration.addIntegrationProcessor(cl, <span class="string">&quot;org.apache.ibatis.binding.MapperProxy&quot;</span>, <span class="keyword">new</span> <span class="title class_">MapperProxyCBP</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JRebel在应用启动时对mybatis的某些类做了Hook（利用Javaassit)</p><p>上述的类都是和Mapper相关的（Mapper文件解析,Mapper 注解解析…)</p><p>由于<code>mybatis-plus</code>重写了<code>mybatis</code>的一些核心类(而JRebel的插件对mybatis中的关键类做了HOOK)，所以导致项目中整合mybatis-plus时，修改了mapper没有被热加载.</p><p>为了使mybatis-plus也能够热加载，我想到了hook Mybatis-plus中的关键类，于是阅读了mybatis-plus的源码，整理出如下mp重写的mybatis类。</p><ul><li>MybatisConfiguration.java</li><li>MybatisMapperAnnotationBuilder.java</li><li>MybatisSqlSessionFactoryBean.java</li><li>MybatisMapperProxy.java</li></ul><p>然后趁IDEA不注意的时候，去Jrebel的官网找到了开发自定义插件的文档<a href="http://manuals.zeroturnaround.com/jrebel/advanced/custom.html#jrebelcustom">Custom JRebel plugins</a>.<br>最终写了这个插件。</p><p> PS:其中大部分的代码来自原插件反编译后代码，同时结合Mybatis-plus重写的源码，做了相应适配.</p><p> 下面是插件源码地址：</p><p> <a href="https://github.com/SweetInk/jrebel-mybatisplus">jrebel-mybatisplus</a></p><p> 如何使用请阅读<code>README.md</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>学习了<code>javaassit</code>的使用.</p></li><li><p>阅读了<code>mybatis</code> &amp;&amp; <code>mybatis-plus</code> 的源码，了解到<code>mybatis</code>的实现原理，以及<code>mybatis-plus</code>的相关原理.</p></li><li><p>学习了JRebel的插件开发方式以及它的<code>Hot Reloading</code>原理.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo执行generate时的奇怪问题</title>
      <link href="/2019/05/06/hexo%E6%89%A7%E8%A1%8Cgenerate%E6%97%B6%E7%9A%84%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
      <url>/2019/05/06/hexo%E6%89%A7%E8%A1%8Cgenerate%E6%97%B6%E7%9A%84%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于把blog的源文件copy到家里的电脑，主要方便临时记录。<br>在执行 <code>hexo g</code> 时遇到了一些奇怪的问题，这里简单记录下。<br><escape><span id="more"></span></escape><br>hexo 的 post文件内容结构如下</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">;---</span><br><span class="line">title: my test title</span><br><span class="line">date: 2019‎-05‎-06 23:24:30</span><br><span class="line">tags:</span><br><span class="line">;---</span><br><span class="line">content</span><br></pre></td></tr></table></figure><p>上面<code>date</code>为 post的创建日期.假如为空的话，hexo的post生成器会取文件的创建时间;<br>相关代码为</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (data.<span class="property">date</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timezone) data.<span class="property">date</span> = common.<span class="title function_">timezone</span>(data.<span class="property">date</span>, timezone);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        data.<span class="property">date</span> = stats.<span class="property">birthtime</span>;<span class="comment">//文件的创建日期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h1><p>回到问题本身</p><p>我的其中一篇post，是2017时候，第一次玩hexo，hexo自动为我创建的<code>hello-world</code>;<br>下面展示部分片段</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">;---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2017‎-0‎1‎-‎22‎ 11:24:30</span><br><span class="line">tags:</span><br><span class="line">;---</span><br><span class="line">Welcome to [<span class="string">Hexo</span>](<span class="link">https://hexo.io/</span>)!...</span><br></pre></td></tr></table></figure><p>date:<code>2017‎-0‎1‎-‎22‎ 11:24:30</code>;<br>当hexo生成post静态页面时却并没有正确解析出日期。</p><p>为了弄清楚为什么，下面开始debug源码.</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303142357150.jpg"><br>上图为有问题的post的调试图.</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303142357006.jpg"><br>本图为正常post的调试图.</p><p>通过上图比较，发现date对应的日期字符串基本没啥差别，符合<code>yyyy-MM-dd HH:mm:ss</code>格式，但是 <code>hello-word</code>的post日期却并没有正确解析处理。</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303142358868.gif" alt="zhiyin"></p><p>上面通过调试发现并没有找到原因，我觉得可能是我的眼睛欺骗了我，只看到了表面，于是通过<code>EditPlus</code>直接查看文件的十六进制的内容;</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303142358725.jpg"></p><p>图中第二个文件的日期字节序中多了 <code>E2 80 8E</code> 这个三个字节(Left-to-right mark) ,最终导致日期没有解析处理（ps:这三个字节如何出现的，我也不知道)</p><h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h1><p>最终解决方法，把日期整行删掉，通过普通文本编辑器重新录入日期。</p><h2 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h2><p>操作系统: <code>window 10 professional</code></p><p>调试工具: <code>WebStorm 2019.1.1</code></p><p>hexo版本: <code>3.8.0</code></p><p>调试脚本</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hexo =  <span class="built_in">require</span>(<span class="string">&quot;hexo/node_modules/hexo-cli/lib/hexo&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> blogPath=<span class="string">&quot;这里填写你的blog目录路径&quot;</span></span><br><span class="line"><span class="title function_">hexo</span>(blogPath);</span><br></pre></td></tr></table></figure><p>上述js需要在<code>你的blog根目录</code>下执行;</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303142358981.jpg"></p><p>调试配置参数</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://en.wikipedia.org/wiki/Left-to-right_mark">Wiki::Left-to-right_mark</a></p><p><a href="https://www.cnblogs.com/ZDPPU/articles/5779386.html">解决URL出现%E2%80%8E（Zero-Width Space）</a></p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitment评论初始化失败问题分析</title>
      <link href="/2019/04/19/Gitment%E8%AF%84%E8%AE%BA%E5%88%9D%E5%A7%8B%E5%8C%96%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/2019/04/19/Gitment%E8%AF%84%E8%AE%BA%E5%88%9D%E5%A7%8B%E5%8C%96%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="问题场景回顾"><a href="#问题场景回顾" class="headerlink" title="问题场景回顾"></a>问题场景回顾</h2><p>首先在hexo next主题配置文件中启用了gitment.<br><escape><span id="more"></span></escape><br>当打开某篇blog文章时，点击初始化评论按钮<br><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303142353564.jpg"><br>然而并没有初始化成功.<br>于是打开 开发者调试工具-&gt;Network 一栏中看到该插件调用了github提供的<code>创建issues</code> api<br><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303142353583.jpg"><br>这个请求的响应结果<br><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303142354439.jpg"><br>大概意思就是请求体中label数组中某项元素数据格式错误.<br>于是在<a href="https://github.com/gitalk/gitalk/issues/102">隔壁仓库gitalk</a>，找到了某些答案，label中字符数超过限制.</p><p>查看gitment源码<br><a href="https://github.com/imsun/gitment/blob/master/src/gitment.js#L157">createIssue</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">createIssue() &#123;</span><br><span class="line">   const &#123; id, owner, repo, title, link, desc, labels &#125; = this</span><br><span class="line"></span><br><span class="line">   return http.post(`/repos/$&#123;owner&#125;/$&#123;repo&#125;/issues`, &#123;</span><br><span class="line">     title,</span><br><span class="line">     labels: labels.concat([&#x27;gitment&#x27;, id]),</span><br><span class="line">     body: `$&#123;link&#125;\n\n$&#123;desc&#125;`,</span><br><span class="line">   &#125;)</span><br><span class="line">     .then((meta) =&gt; &#123;</span><br><span class="line">       this.state.meta = meta</span><br><span class="line">       return meta</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中用到了id。即我们的post title; </p><p>而<code>id</code>在哪儿初始化呢？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function renderGitment() &#123;</span><br><span class="line">  var gitment = new &#123;&#123; CommentsClass &#125;&#125;(&#123;</span><br><span class="line">    id: window.location.pathname,</span><br><span class="line">    owner: &#x27;&#123;&#123; theme.gitment.github_user &#125;&#125;&#x27;,</span><br><span class="line">    repo: &#x27;&#123;&#123; theme.gitment.github_repo &#125;&#125;&#x27;,</span><br><span class="line">    &#123;% if theme.gitment.mint %&#125;</span><br><span class="line">      lang: &#x27;&#123;&#123; theme.gitment.language &#125;&#125;&#x27; || navigator.language || navigator.systemLanguage || navigator.userLanguage,</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    oauth: &#123;</span><br><span class="line">    &#123;% if theme.gitment.mint and theme.gitment.redirect_protocol %&#125;</span><br><span class="line">      redirect_protocol: &#x27;&#123;&#123; theme.gitment.redirect_protocol &#125;&#125;&#x27;,</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% if theme.gitment.mint and theme.gitment.proxy_gateway %&#125;</span><br><span class="line">      proxy_gateway: &#x27;&#123;&#123; theme.gitment.proxy_gateway &#125;&#125;&#x27;,</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">      client_secret: &#x27;&#123;&#123; theme.gitment.client_secret &#125;&#125;&#x27;,</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">      client_id: &#x27;&#123;&#123; theme.gitment.client_id &#125;&#125;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  gitment.render(&#x27;gitment-container&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在 <code>你的博客目录\themes\next\layout\_third-party\comments\gitment.swig</code> 中找到</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p><strong>2020年4月30日更新</strong></p><p><a href="https://github.com/gitalk/gitalk/issues/102">隔壁仓库gitalk</a> 中提到了问题可能原因（label标签字符数超过限制)</p><p>上面初始化<code>Gitment</code>时 <code>id</code>的值获取自 <code>window.location.pathname</code>，我们的<code>pathname</code>中是纯英文字符（且没有超过50个字符）。<code>Gitment</code>可以正常工作，但是如果我们<code>URL</code>中的<code>pathname</code>含有其他字符，这个时候，<code>pathname</code>会被编码<br><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303142354183.jpg">.<br>上图展示了编码后的字符串长度，可以看到字符串长度大大的超出了原始的字符串长度.</p><p>为了解决这个问题，<code>id</code>的值可以取当前page创建时间戳，即使后续文章的<code>Title</code>改了，还能找到评论</p><p>最终修改后的代码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function renderGitment() &#123;</span><br><span class="line">   var gitment = new &#123;&#123; CommentsClass &#125;&#125;(&#123;</span><br><span class="line">     id: &#x27;&#123;&#123;page.date&#125;&#125;&#x27;,</span><br><span class="line">     owner: &#x27;&#123;&#123; theme.gitment.github_user &#125;&#125;&#x27;,</span><br><span class="line">     repo: &#x27;&#123;&#123; theme.gitment.github_repo &#125;&#125;&#x27;,</span><br><span class="line">     &#123;% if theme.gitment.mint %&#125;</span><br><span class="line">       lang: &#x27;&#123;&#123; theme.gitment.language &#125;&#125;&#x27; || navigator.language || navigator.systemLanguage || navigator.userLanguage,</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">     oauth: &#123;</span><br><span class="line">     &#123;% if theme.gitment.mint and theme.gitment.redirect_protocol %&#125;</span><br><span class="line">       redirect_protocol: &#x27;&#123;&#123; theme.gitment.redirect_protocol &#125;&#125;&#x27;,</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">     &#123;% if theme.gitment.mint and theme.gitment.proxy_gateway %&#125;</span><br><span class="line">       proxy_gateway: &#x27;&#123;&#123; theme.gitment.proxy_gateway &#125;&#125;&#x27;,</span><br><span class="line">     &#123;% else %&#125;</span><br><span class="line">       client_secret: &#x27;&#123;&#123; theme.gitment.client_secret &#125;&#125;&#x27;,</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">       client_id: &#x27;&#123;&#123; theme.gitment.client_id &#125;&#125;&#x27;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   gitment.render(&#x27;gitment-container&#x27;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候,你需要重新执行如下操作才能生效.<br>到你的blog工作目录，执行如下shell。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>最后over ~.</p>]]></content>
      
      
      <categories>
          
          <category> log </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东扫码登陆分析</title>
      <link href="/2019/03/27/%E4%BA%AC%E4%B8%9C%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/"/>
      <url>/2019/03/27/%E4%BA%AC%E4%B8%9C%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>图片</p><p><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303160033382.jpg" alt="loginFlow"></p>]]></content>
      
      
      <categories>
          
          <category> log </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;work-log-2018年9月20日&#39;</title>
      <link href="/2018/09/20/work-log-2018%E5%B9%B49%E6%9C%8820%E6%97%A5/"/>
      <url>/2018/09/20/work-log-2018%E5%B9%B49%E6%9C%8820%E6%97%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="npm使用总结"><a href="#npm使用总结" class="headerlink" title="npm使用总结"></a>npm使用总结</h1><ol><li>当你准备发布你的包到npmjs时，首先得<code>npm login</code>(只需一次).<escape><span id="more"></span></escape></li><li>当你执行<code>npm publish</code> 时,不妨先执行 <code>npm pack</code> ，看看打包出来的dist文件是否和预期一样。</li><li>当你因为某个错误的操作，导致把一些错误的东西发布到npmjs（比如说我)，这个时候你莫慌.只需把错误的版本设置为<code>deprecate</code>,使用命令 <code>npm deprecate &lt;pkg&gt;[@&lt;version&gt;] &lt;message&gt;</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm deprecate <span class="built_in">test</span>@0.0.1 <span class="string">&quot;此版本作废&quot;</span></span><br></pre></td></tr></table></figure><h1 id="nginx配置Websocket代理-SSL"><a href="#nginx配置Websocket代理-SSL" class="headerlink" title="nginx配置Websocket代理 + SSL"></a>nginx配置Websocket代理 + SSL</h1><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">  </span><br><span class="line">  server&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">     <span class="attribute">server_name</span> ws.yourdomain.com;</span><br><span class="line">     <span class="attribute">ssl_certificate</span>      /opt/cert/s.crt;//<span class="attribute">RSA</span> public key</span><br><span class="line">     ssl_certificate_key  /opt/cert/s.key;//<span class="attribute">RSA</span> private key</span><br><span class="line">     ssl_session_cache    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">     <span class="attribute">ssl_protocols</span>  SSLv2 SSLv3 TLSv1;</span><br><span class="line">     <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">     <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">     <span class="attribute">ssl_ciphers</span>  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;</span><br><span class="line">     <span class="attribute">ssl_prefer_server_ciphers</span>   <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /websocket &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://127.0.0.1:8081;</span><br><span class="line">      <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;Upgrade&quot;</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/penghuwan/p/6973702.html">https://www.cnblogs.com/penghuwan/p/6973702.html</a></p><p><a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_certificate">http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_certificate</a></p><p><a href="http://nginx.org/en/docs/http/websocket.html">http://nginx.org/en/docs/http/websocket.html</a></p>]]></content>
      
      
      <categories>
          
          <category> logs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>brainfuck</title>
      <link href="/2018/09/05/brainfuck/"/>
      <url>/2018/09/05/brainfuck/</url>
      
        <content type="html"><![CDATA[<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><blockquote><p>维基百科</p></blockquote><p><strong>Brainfuck</strong>，是一种极小化的<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80">计算机语言</a>，它是由<a href="https://zh.wikipedia.org/w/index.php?title=Urban_M%C3%BCller&action=edit&redlink=1">Urban Müller</a>在1993年创造的。由于<a href="https://zh.wikipedia.org/wiki/Fuck">fuck</a>在<a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E8%AA%9E">英语</a>中是<a href="https://zh.wikipedia.org/wiki/%E9%AB%92%E8%A9%B1">脏话</a>，这种语言有时被称为<strong>Brainf*ck</strong>或**Brainf**<em><strong>，或被简称为</strong>BF</em>*。</p><p><escape><span id="more"></span></escape></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>主要逻辑如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>(src not eof)&#123;</span><br><span class="line"> opcode  = <span class="title function_">fetchCode</span>();<span class="comment">//从source读入单个字符</span></span><br><span class="line"> <span class="title function_">interprete</span>(opcode);<span class="comment">//根据opcode的语言翻译</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//switch case....</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">interprete</span>(<span class="params">opcode</span>)&#123;</span><br><span class="line">  <span class="keyword">switch</span>(opcode)&#123;</span><br><span class="line">      <span class="keyword">case</span> ....</span><br><span class="line">       ....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后java实现的<a href="https://github.com/SweetInk/brainfuck">brainfuck</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5b7d14ef51882543025acdfd">然并卵系列：来写个 Brainfuck 解释器吧</a></p><p><a href="https://zh.wikipedia.org/wiki/Brainfuck">维基百科</a></p><p><a href="https://gist.github.com/roachhd/dce54bec8ba55fb17d3a">Basics of BrainFuck</a></p>]]></content>
      
      
      <categories>
          
          <category> brainfuck </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Douyu Live corenormal.swf decrypt</title>
      <link href="/2018/05/10/Douyu-Live-corenormal-swf-decrypt/"/>
      <url>/2018/05/10/Douyu-Live-corenormal-swf-decrypt/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-申明"><a href="#0x01-申明" class="headerlink" title="0x01  申明"></a>0x01  申明</h1><p>本文内容仅供学习交流使用<br><escape><span id="more"></span></escape></p><h1 id="0x02-开始"><a href="#0x02-开始" class="headerlink" title="0x02 开始"></a>0x02 开始</h1><p>先上代码吧，后续分析。</p><p><a href="https://github.com/SweetInk/Douyu-Analysis" title="https://github.com/SweetInk/Douyu-Analysis">Douyu-Analysis</a></p><h1 id="0xFF-参考文章"><a href="#0xFF-参考文章" class="headerlink" title="0xFF 参考文章"></a>0xFF 参考文章</h1><p><a href="https://help.adobe.com/zh_CN/ActionScript/3.0_ProgrammingAS3/WS5b3ccc516d4fbf351e63e3d118a9b8cf79-8000.html" title="ActionScript3 快速入门">https://help.adobe.com/zh_CN&#x2F;ActionScript&#x2F;3.0_ProgrammingAS3&#x2F;WS5b3ccc516d4fbf351e63e3d118a9b8cf79-8000.html</a></p><p><a href="http://gslab.qq.com/article-467-1.html" title="http://gslab.qq.com/article-467-1.html">http://gslab.qq.com/article-467-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> f4ck </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> study </tag>
            
            <tag> actionscript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native中使用SockJs和StompJs</title>
      <link href="/2018/03/21/react-native%E4%B8%AD%E4%BD%BF%E7%94%A8SockJs%E5%92%8CStompJs/"/>
      <url>/2018/03/21/react-native%E4%B8%AD%E4%BD%BF%E7%94%A8SockJs%E5%92%8CStompJs/</url>
      
        <content type="html"><![CDATA[<p><strong>本文梳理在使用过程中遇到的坑点（Android）</strong><br><escape><span id="more"></span></escape></p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p><code>package.json</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;websocketDemo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node node_modules/react-native/local-cli/cli.js start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;16.3.0-alpha.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-native&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.54.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sockjs-client&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stompjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.3.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;babel-jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;23.0.0-alpha.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-preset-react-native&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22.4.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-test-renderer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;16.3.0-alpha.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;preset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-native&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在App.js中使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入SockJs和 Stompjs</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SockJs</span> <span class="keyword">from</span> <span class="string">&#x27;sockjs-client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Stomp</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;stompjs/lib/stomp&#x27;</span></span><br><span class="line"><span class="comment">//此处省略</span></span><br><span class="line"><span class="keyword">var</span> host = <span class="string">&#x27;&#x27;</span>;<span class="comment">//ws服务器ip:port</span></span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&#x27;&#x27;</span>;<span class="comment">//提供ws服务的端点名称</span></span><br><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">SockJs</span>(<span class="string">`<span class="subst">$&#123;host&#125;</span>/<span class="subst">$&#123;endpoint&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">var</span> stompClient = <span class="title class_">Stomp</span>.<span class="title function_">over</span>(socket);</span><br><span class="line"><span class="comment">//此处继续省略</span></span><br><span class="line"><span class="comment">//然后你满心欢喜的去连接</span></span><br><span class="line"> stompClient.<span class="title function_">connect</span>(<span class="string">&#x27;guest&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>, <span class="function">(<span class="params">frame</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;frame&#x27;</span>,frame);</span><br><span class="line">   <span class="comment">//TOOD 处理的逻辑eg.subscribe topic</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="产生问题"><a href="#产生问题" class="headerlink" title="产生问题"></a>产生问题</h1><p>然后在android设备中调试 <code>react-native run-android</code><br> 不出意外启动你的App后你会看到以下场景<br><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303150001859.jpg" alt="ERROR"></p><p>**根据出错信息推断，应该是js的参数映射到java方法的形参上出现了类型转换错误 **</p><p>接着跟着App提示的信息调试代码<br><img src="https://blog-statics1.oss-cn-beijing.aliyuncs.com/imgs/202303150001745.jpg"></p><p>从图中我们可以看出，该方法的参数列表应该使我们实例化SockJs传入的url</p><p>再观察图中的traceName 映射到<code>ReactNative</code> <code>Networking</code>模块中的<code>sendRequet</code>方法</p><p>查看<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java#L238" title="NetworkingModule">NetworkingModule</a>(该模块实现了js中的<code>XMLHttpRequest</code>接口)源码发现，最后一个参数的类型为<code>boolean</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ReactMethod</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> timeout value of 0 results in no timeout</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">     String method,</span></span><br><span class="line"><span class="params">     String url,</span></span><br><span class="line"><span class="params">     <span class="keyword">final</span> <span class="type">int</span> requestId,</span></span><br><span class="line"><span class="params">     ReadableArray headers,</span></span><br><span class="line"><span class="params">     ReadableMap data,</span></span><br><span class="line"><span class="params">     <span class="keyword">final</span> String responseType,</span></span><br><span class="line"><span class="params">     <span class="keyword">final</span> <span class="type">boolean</span> useIncrementalUpdates,</span></span><br><span class="line"><span class="params">     <span class="type">int</span> timeout,</span></span><br><span class="line"><span class="params">     <span class="type">boolean</span> withCredentials)</span></span><br></pre></td></tr></table></figure><p>然而我们实际参数为<br><code>[&quot;GET&quot;,&quot;http://192.168.0.101:8080/wechat-custom-msg/info?t=1521610071602&quot;,1,[],&#123;&quot;trackingName&quot;:&quot;unknown&quot;&#125;,&quot;text&quot;,true,0,&quot;true&quot;]</code></p><p>很明显最后一个参数是一个字符串,所以导致了解析参数时</p><p><img src="http://ww1.sinaimg.cn/large/005ViNx8gy1g27oeezt4oj318o0klmz1.jpg"><br>出现的<code>java.lang.String cannot be cast to java.lang.Boolean</code></p><p>可以推断是SockJs发起了XHR请求导致App出现了这个问题<br>最后找到SockJs中的abstract-xhr.js源码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((!opts || !opts.<span class="property">noCredentials</span>) &amp;&amp; <span class="title class_">AbstractXHRObject</span>.<span class="property">supportsCORS</span>) &#123;</span><br><span class="line">   <span class="title function_">debug</span>(<span class="string">&#x27;withCredentials&#x27;</span>);</span><br><span class="line">   <span class="comment">// Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :</span></span><br><span class="line">   <span class="comment">// &quot;This never affects same-site requests.&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">xhr</span>.<span class="property">withCredentials</span> = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>很明显问题就出在这儿。<br>查看mozilla官网中对XMLHttpRequest的[API][b409798c]描述</p><p><code>The XMLHttpRequest.withCredentials property is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates. Setting withCredentials has no effect on same-site requests.</code></p><h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">xhr</span>.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ol><li>将<code>&quot;true&quot;</code>改为Boolean类型的<code>true</code></li><li>或者到<code>你的项目路径/node_modules/sockjs-client</code> 目录中使用<code>gulp</code>重新编译<br>找到sockjs<br>  [b409798c]: <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials">https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials</a> “API”</li></ol>]]></content>
      
      
      <categories>
          
          <category> react-native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> study </tag>
            
            <tag> React-native </tag>
            
            <tag> sockjs-client </tag>
            
            <tag> StompJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-native 采坑记</title>
      <link href="/2018/02/02/React-native-%E9%87%87%E5%9D%91%E8%AE%B0/"/>
      <url>/2018/02/02/React-native-%E9%87%87%E5%9D%91%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="调试时出现错误，找不到index-js-bundle"><a href="#调试时出现错误，找不到index-js-bundle" class="headerlink" title="调试时出现错误，找不到index.js.bundle"></a>调试时出现错误，找不到index.js.bundle</h3><p><code>react-native run-android</code> 当你输入这个命令调试App时候，出现找不到index.js.bundle 文件.</p><p>如何解决呢？打开你的App，Menu-&gt;Dev Settings-&gt;Debugging-&gt;Debug Server host &amp; port for devices</p><p>然后输入你的服务ip和端口，端口通常是8081。</p><p>然后返回到App主界面，Menu-&gt;Reload .这时候App应该能正常显示了</p><h3 id="android-studio-下不执行-gradle中的bundleReleaseJsAndAssets任务"><a href="#android-studio-下不执行-gradle中的bundleReleaseJsAndAssets任务" class="headerlink" title="android studio 下不执行 gradle中的bundleReleaseJsAndAssets任务"></a>android studio 下不执行 gradle中的bundleReleaseJsAndAssets任务</h3><p>导致打包出来的apk启动后出现错误。这是因为没有生成index.js.bundle文件到asset目录</p><p>如何解决:<a href="https://github.com/facebook/react-native/issues/7258">https://github.com/facebook/react-native/issues/7258</a></p><h3 id="暂时就这些了，后续补充"><a href="#暂时就这些了，后续补充" class="headerlink" title="暂时就这些了，后续补充"></a>暂时就这些了，后续补充</h3>]]></content>
      
      
      <categories>
          
          <category> react-native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
            <tag> study </tag>
            
            <tag> React-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jsoup简易教程</title>
      <link href="/2018/01/11/Jsoup%E6%95%99%E7%A8%8B/"/>
      <url>/2018/01/11/Jsoup%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/docker/dockercraft/raw/master/docs/img/contribute.png?raw=true" alt="img-source-from-https://github.com/docker/dockercraft"></p><p>本文是关于<strong>Jsoup</strong>的简单教程<br><escape><span id="more"></span></escape></p><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li>Jsoup 简述</li><li>选择器语法</li><li><a href="#jump" title="jump">如何使用</a></li><li><a href="https://try.jsoup.org/">在线练习</a></li></ul><h1 id="Jsoup-简述"><a href="#Jsoup-简述" class="headerlink" title="Jsoup 简述"></a>Jsoup 简述</h1><h2 id="关于Jsoup："><a href="#关于Jsoup：" class="headerlink" title="关于Jsoup："></a>关于Jsoup：</h2><p><code>jsoup</code>是一个用于处理HTML的Java库。它提供了一种非常方便的API，用于提取和操作数据，使用DOM、CSS和类jquery方法。</p><ul><li>从URL、文件或字符串中提取和解析HTML</li><li>使用DOM遍历或CSS选择器查找和提取数据</li><li>操作HTML元素、属性和文本</li><li>清除用户提交的非安全代码内容，以防止XSS攻击</li><li>输出整洁的HTML</li></ul><p><img src="http://ww3.sinaimg.cn/bmiddle/6af89bc8gw1f8pv18g35rj208z0buaan.jpg" alt="img1"></p><p>获取获取<a href="https://www.qiushibaike.com/text/">糗事百科</a>最新的段子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> Jsoup.connect(<span class="string">&quot;https://www.qiushibaike.com/text/&quot;</span>).get();</span><br><span class="line">   <span class="type">Elements</span> <span class="variable">contentList</span> <span class="operator">=</span> doc.select(<span class="string">&quot;div#content-left.col1 a.contentHerf&quot;</span>);<span class="comment">//content area selector</span></span><br><span class="line">   contentList.forEach(content-&gt;&#123;</span><br><span class="line">     System.out.println(content.attr(<span class="string">&quot;href&quot;</span>)+<span class="string">&quot;:&quot;</span>+content.text());<span class="comment">//parse href attribute and content</span></span><br><span class="line">   &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>OpenSource</strong></p><p>jsoup是一个开放源码项目，在<a href="https://github.com/racaljk/hosts/blob/master/LICENSE">MIT</a>的协议许可下发布。源代码托管在<a href="https://github.com/jhy/jsoup/">GitHub</a>上</p><h1 id="选择器语法"><a href="#选择器语法" class="headerlink" title="选择器语法"></a>选择器语法</h1><p>使用选择器语法查找元素</p><p>jsoup支持类似于CSS(或JQuery)的选择器方式</p><h2 id="选择器概览"><a href="#选择器概览" class="headerlink" title="选择器概览"></a>选择器概览</h2><ul><li><code>tagname</code>: 通过标签名称查找元素，e.g. <code>a、div、p、span</code>等标签…</li><li><code>ns|tag</code>: 通过命名空间标签查找元素 e.g. <code>fb|name </code>查找<code>&lt;fb:name&gt;</code> 元素</li><li><code>#id </code>: 通过id查找元素, e.g. <code>#logo</code></li><li><code>.class</code>:通过类名查找元素, e.g. <code>.masthead</code></li><li><code>[attribute]</code>: 属性选择器, e.g. <code>[href]</code> 查找属性名为<code>href</code>的元素</li><li><code>[^attr]</code>: 查找已该属性开头的元素, e.g. <code>[^data-]</code> 查找HTML5 <code>dataset</code>属性</li><li><code>[attr=value]</code>: 元素有该属性和值, e.g. <code>[width=500]</code> (或者带分号 <code>[data-name=&#39;launch sequence&#39;]</code>)</li><li><code>[attr^=value], [attr$=value], [attr*=value]</code>: 以元素的属性 开头、结尾、或者属性包含某值e, e.g. <code>[href*=/path/]</code></li><li><code>[attr~=regex]</code>: 属性中包含正则表达式; e.g. <code>img[src~=(?i)\.(png|jpe?g)]</code> 获取所有的img标签，并且图片地址包含(<code>png,jpeg</code>)</li><li><code>*</code>: all elements, e.g. *</li></ul><p><strong>选择器组合</strong></p><ul><li><code>el#id</code>: 某元素有该ID, e.g. <code>div#logo</code></li><li><code>el.class</code>: 某元素有该类, e.g. <code>div.masthead</code></li><li><code>el[attr]</code>: 某元素有该属性, e.g. <code>a[href]</code></li></ul><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a><a name="jump">如何使用</a></h1><ol><li>下载<a href="https://jsoup.org/download">Jsoup</a>jar包 (1.11.2)</li><li>阅读官方<a href="https://jsoup.org/cookbook/">Cookbook</a></li></ol><p><img src="http://ww2.sinaimg.cn/bmiddle/9150e4e5ly1fnci898c4lj2064064mx6.jpg" alt="img2"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取开发者头条当日文章</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://toutiao.io/prev/&quot;</span>+sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">  System.out.println(<span class="string">&quot;fetch url:&quot;</span>+url);</span><br><span class="line">  <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> Jsoup.connect(url).get();</span><br><span class="line">  <span class="type">Elements</span> <span class="variable">list</span> <span class="operator">=</span> doc.select(<span class="string">&quot;div.daily div.post&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;点赞\t\t标题\t\t\t\t\t\t\t\t作者&quot;</span>);</span><br><span class="line">  list.forEach(post-&gt;&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">upVote</span> <span class="operator">=</span> post.select(<span class="string">&quot;a.btn.btn-default.like-button&quot;</span>).text();</span><br><span class="line">    <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> post.select(<span class="string">&quot;h3.title&quot;</span>).text();</span><br><span class="line">    <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> post.select(<span class="string">&quot;div.subject-name&quot;</span>).text();</span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;%-4s%-60s%s&quot;</span>,upVote,title,author));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.开始搞事吧</p><p><img src="http://ww2.sinaimg.cn/bmiddle/9150e4e5gw1fb5is9va1pj208c08c3yh.jpg" alt="img"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://jsoup.org/">Jsoup官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> jsoup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Compile openssl on win10</title>
      <link href="/2017/11/26/compile-openssl-on-win10/"/>
      <url>/2017/11/26/compile-openssl-on-win10/</url>
      
        <content type="html"><![CDATA[<h1 id="本次编译环境"><a href="#本次编译环境" class="headerlink" title="本次编译环境"></a>本次编译环境</h1><ol><li>os version:windows 10 professional x64</li><li>JDK1.8</li><li>Perl 5.24.2</li><li>Visual Studio 2017</li><li>NASM 2.12.0.2<br><escape><span id="more"></span></escape></li></ol><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="下载perl"><a href="#下载perl" class="headerlink" title="下载perl"></a>下载perl</h2><p>到<a href="https://www.activestate.com/activeperl">ActiveState.com</a>下载perl并安装<br>如果一切顺利的话</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Perl64\eg&gt;cd C:\Perl64\eg</span><br><span class="line">C:\Perl64\eg&gt;perl example.pl</span><br><span class="line">Hello from ActivePerl!</span><br><span class="line">C:\Perl64\eg&gt;</span><br></pre></td></tr></table></figure><h2 id="下载openssl"><a href="#下载openssl" class="headerlink" title="下载openssl"></a>下载openssl</h2><p>下载<a href="https://www.openssl.org/source/">openssl</a><br>解压至：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\openssl-1.0.2m</span><br></pre></td></tr></table></figure><h2 id="下载NASM"><a href="#下载NASM" class="headerlink" title="下载NASM"></a>下载NASM</h2><p>下载[<a href="http://www.nasm.us/pub/nasm/releasebuilds/2.12.02/win64/">NASM</a>]，安装后，需要配置path环境变量</p><h1 id="编译openssl"><a href="#编译openssl" class="headerlink" title="编译openssl"></a>编译openssl</h1><ol><li>打开vs Command Prompt</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**********************************************************************</span><br><span class="line">** Visual Studio 2017 Developer Command Prompt v15.0.26430.15</span><br><span class="line">** Copyright (c) 2017 Microsoft Corporation</span><br><span class="line">**********************************************************************</span><br><span class="line">[vcvarsall.bat] Environment initialized for: &#x27;x64&#x27;</span><br><span class="line"></span><br><span class="line">C:\Program Files (x86)\Microsoft Visual Studio\2017\Community&gt;cd C:\openssl-1.0.2m</span><br><span class="line">C:\openssl-1.0.2m&gt;perl Configure VC-WIN64A no-asm --prefix=d:\openssl_lib</span><br><span class="line">Configuring for VC-WIN64A</span><br><span class="line">    no-asm          [option]   OPENSSL_NO_ASM</span><br><span class="line">    no-ec_nistp_64_gcc_128 [default]  OPENSSL_NO_EC_NISTP_64_GCC_128 (skip dir)</span><br><span class="line">    no-gmp          [default]  OPENSSL_NO_GMP (skip dir)</span><br><span class="line">    no-jpake        [experimental] OPENSSL_NO_JPAKE (skip dir)</span><br><span class="line">    no-krb5         [krb5-flavor not specified] OPENSSL_NO_KRB5</span><br><span class="line">    no-libunbound   [experimental] OPENSSL_NO_LIBUNBOUND (skip dir)</span><br><span class="line">    no-md2          [default]  OPENSSL_NO_MD2 (skip dir)</span><br><span class="line">    no-rc5          [default]  OPENSSL_NO_RC5 (skip dir)</span><br><span class="line">    no-rfc3779      [default]  OPENSSL_NO_RFC3779 (skip dir)</span><br><span class="line">    no-sctp         [default]  OPENSSL_NO_SCTP (skip dir)</span><br><span class="line">    no-shared       [default]</span><br><span class="line">    no-ssl-trace    [default]  OPENSSL_NO_SSL_TRACE (skip dir)</span><br><span class="line">    no-ssl2         [default]  OPENSSL_NO_SSL2 (skip dir)</span><br><span class="line">    no-store        [experimental] OPENSSL_NO_STORE (skip dir)</span><br><span class="line">    no-unit-test    [default]  OPENSSL_NO_UNIT_TEST (skip dir)</span><br><span class="line">    no-weak-ssl-ciphers [default]  OPENSSL_NO_WEAK_SSL_CIPHERS (skip dir)</span><br><span class="line">    no-zlib         [default]</span><br><span class="line">    no-zlib-dynamic [default]</span><br><span class="line">IsMK1MF=1</span><br><span class="line">CC            =cl</span><br><span class="line">CFLAG         =-DOPENSSL_THREADS  -DDSO_WIN32 -W3 -Gs0 -Gy -nologo -DOPENSSL_SYSNAME_WIN32 -DWIN32_LEAN_AND_MEAN -DL_ENDIAN -DUNICODE -D_UNICODE -D_CRT_SECURE_NO_DEPRECATE</span><br><span class="line">EX_LIBS       =</span><br><span class="line">CPUID_OBJ     =mem_clr.o</span><br><span class="line">BN_ASM        =bn_asm.o</span><br><span class="line">EC_ASM        =</span><br><span class="line">DES_ENC       =des_enc.o fcrypt_b.o</span><br><span class="line">AES_ENC       =aes_core.o aes_cbc.o</span><br><span class="line">BF_ENC        =bf_enc.o</span><br><span class="line">CAST_ENC      =c_enc.o</span><br><span class="line">RC4_ENC       =rc4_enc.o rc4_skey.o</span><br><span class="line">RC5_ENC       =rc5_enc.o</span><br><span class="line">MD5_OBJ_ASM   =</span><br><span class="line">SHA1_OBJ_ASM  =</span><br><span class="line">RMD160_OBJ_ASM=</span><br><span class="line">CMLL_ENC      =camellia.o cmll_misc.o cmll_cbc.o</span><br><span class="line">MODES_OBJ     =</span><br><span class="line">ENGINES_OBJ   =</span><br><span class="line">PROCESSOR     =</span><br><span class="line">RANLIB        =true</span><br><span class="line">ARFLAGS       =</span><br><span class="line">PERL          =perl</span><br><span class="line">SIXTY_FOUR_BIT mode</span><br><span class="line">DES_INT used</span><br><span class="line">RC4_CHUNK is unsigned long long</span><br><span class="line"></span><br><span class="line">Configured for VC-WIN64A.</span><br><span class="line"></span><br><span class="line">C:\openssl-1.0.2m&gt;ms\do_win64a</span><br><span class="line"></span><br><span class="line">C:\openssl-1.0.2m&gt;goto proceed</span><br><span class="line"></span><br><span class="line">C:\openssl-1.0.2m&gt;perl util\mk1mf.pl VC-WIN64A  1&gt;ms\nt.mak</span><br><span class="line"></span><br><span class="line">C:\openssl-1.0.2m&gt;perl util\mk1mf.pl dll VC-WIN64A  \1&gt;ms\ntdll.mak</span><br><span class="line"></span><br><span class="line">C:\openssl-1.0.2m&gt;perl util\mkdef.pl 32 libeay  1&gt;ms\libeay32.def</span><br><span class="line"></span><br><span class="line">C:\openssl-1.0.2m&gt;perl util\mkdef.pl 32 ssleay  1&gt;ms\ssleay32.def</span><br><span class="line"></span><br><span class="line">C:\openssl-1.0.2m&gt;nmake -f ms\ntdll.mak</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终编译完成后会输出至d:\openssl_lib</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><a href="http://blog.csdn.net/u010725842/article/details/50295235">http://blog.csdn.net/u010725842/article/details/50295235</a></li><li><a href="https://wiki.openssl.org/index.php/Compilation_and_Installation#Windows">https://wiki.openssl.org/index.php/Compilation_and_Installation#Windows</a></li><li><a href="http://developer.covenanteyes.com/building-openssl-for-visual-studio/">http://developer.covenanteyes.com/building-openssl-for-visual-studio/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> openssl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APICloud插件--ChromeInspect</title>
      <link href="/2017/11/16/APICloud%E6%8F%92%E4%BB%B6-ChromeInspect/"/>
      <url>/2017/11/16/APICloud%E6%8F%92%E4%BB%B6-ChromeInspect/</url>
      
        <content type="html"><![CDATA[<h1 id="chromeInspect"><a href="#chromeInspect" class="headerlink" title="chromeInspect"></a>chromeInspect</h1><p>让chrome调试你的apicloud应用<br><a href="https://github.com/SweetInk/chromeInspect">源码地址</a><br><escape><span id="more"></span></escape></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ul><li><p>1.在apicloud后端打开模块管理，上传模块，然后添加至你当前项目里</p></li><li><p>2.js中使用</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apiready = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> ci = api.<span class="built_in">require</span>(<span class="string">&quot;chromeInspect&quot;</span>);</span><br><span class="line">    <span class="comment">//开启调试</span></span><br><span class="line">    ci.<span class="title function_">enableDebug</span>(<span class="keyword">function</span>(<span class="params">ret,err</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="comment">//关闭调试</span></span><br><span class="line">    ci.<span class="title function_">disableDebug</span>(<span class="keyword">function</span>(<span class="params">ret,err</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h1><ul><li>android 4.4+</li><li>chrome 最新版</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://doc.apicloud.com/Module-Dev/module-dev-guide-for-android">模块开发指南_Android</a></li><li><a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews">远程调试 WebView</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储方式-大小端</title>
      <link href="/2017/03/05/%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F-%E5%A4%A7%E5%B0%8F%E7%AB%AF/"/>
      <url>/2017/03/05/%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F-%E5%A4%A7%E5%B0%8F%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机中的存储方式"><a href="#计算机中的存储方式" class="headerlink" title="计算机中的存储方式"></a>计算机中的存储方式</h1><h3 id="大端存储"><a href="#大端存储" class="headerlink" title="大端存储"></a>大端存储</h3><p>低字节存数的高位，高字节存数的低位（即人的正常读取顺序）<br>一个十六进制的数：0x11223344 32位<br>大端模式下：0x 11 22 33 44</p><h3 id="小端存储"><a href="#小端存储" class="headerlink" title="小端存储"></a>小端存储</h3><p>低字节存数的低位，高字节存数的高位(和人的读写顺序相反)<br>小端模式下: 0x 44 33 22 11</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>work log 2017年2月22日</title>
      <link href="/2017/02/22/work-log-2017%E5%B9%B42%E6%9C%8822%E6%97%A5/"/>
      <url>/2017/02/22/work-log-2017%E5%B9%B42%E6%9C%8822%E6%97%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="0x001-问题"><a href="#0x001-问题" class="headerlink" title="0x001 问题"></a>0x001 问题</h2><p>今天修复APP BUG,无意中发现了以前遗留的问题：<br>1.从server 获取到数据后append到ul上，没有清空ul（低级错误啊，竟然没有发现）,导致list越来越长 &#x3D;&#x3D;！。</p><h2 id="0x002-收获"><a href="#0x002-收获" class="headerlink" title="0x002 收获"></a>0x002 收获</h2><p> <strong>1.jQuery几种符号选择器的区别（以前也知道，貌似很久没用就忘了，看来得多用啊）</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">空格：$(<span class="string">&#x27;parent childchild&#x27;</span>);<span class="comment">//表示获取parent下的所有的childchild节点（所有的子孙）。</span></span><br><span class="line"></span><br><span class="line">大于号：$(<span class="string">&#x27;parent &gt; child&#x27;</span>);<span class="comment">//表示获取parent下的所有child的儿子( 第一代)。</span></span><br><span class="line"></span><br><span class="line">加号：$(<span class="string">&#x27;pre + nextbrother&#x27;</span>);<span class="comment">//表示获得pre节点的下一个兄弟节点，相当于next()方法</span></span><br><span class="line"></span><br><span class="line">波浪号：$(<span class="string">&#x27;pre ~ brother&#x27;</span>);<span class="comment">//表示获取pre节点的后面的所有兄弟节点，相当于nextAll()方法。 </span></span><br></pre></td></tr></table></figure><p>原文：<a href="http://my.oschina.net/jsonavaj/blog/62630" title="原文">http://my.oschina.net/jsonavaj/blog/62630</a></p><p><strong>2.Jquey删除掉元素前先过滤：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element_list.<span class="title function_">not</span>(<span class="string">&quot;:first&quot;</span>).<span class="title function_">remove</span>();<span class="comment">//移除除第一个以外的所有元素</span></span><br><span class="line"></span><br><span class="line">element_list.<span class="title function_">not</span>(<span class="string">&quot;:eq(0)&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line">element_list.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">index</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> index%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line">&#125;).<span class="title function_">remove</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.MSSQL 的update from 语法</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> a <span class="keyword">set</span> a.fk_name <span class="operator">=</span> b.name <span class="keyword">from</span> a,b <span class="keyword">where</span> a.fid <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>post test</title>
      <link href="/2017/01/22/post-test/"/>
      <url>/2017/01/22/post-test/</url>
      
        <content type="html"><![CDATA[<h2 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h2><p>如果直接把CNAME放到.deploy_git。当使用hexo d 部署时，会导致CNAME被删除掉。</p><h1 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h1><p>_config.yml中把language设置为zh-CN时，使用next主题导致网页内容变成德语，应该设置为zh-Hans<br><a href="https://www.zhihu.com/question/41625825/answer/91769304">https://www.zhihu.com/question/41625825/answer/91769304</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/01/22/hello-world/"/>
      <url>/2017/01/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post test&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE HTML><html><head>    <meta http-equiv="content-type" content="text/html;charset=utf-8;"/>    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>    <meta name="robots" content="all"/>    <meta name="robots" content="index,follow"/></head><body><script type="text/javascript" src="http://www.qq.com/404/search_children.js"        charset="utf-8" homePageUrl="http://githuboy.online"        homePageName="回到我的主页"></script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>test page</title>
      <link href="/showcase/index.html"/>
      <url>/showcase/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="hello-world-show-case"><a href="#hello-world-show-case" class="headerlink" title="hello ,world show case"></a>hello ,world show case</h1><h1 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h1><p><a href="http://www.rfc-editor.org/rfc/rfc147.txt">RFC 143 Definition of a socket</a></p><p><a href="http://www.rfc-editor.org/rfc/rfc791.txt">RFC 791 Internet Protocol</a></p><p><a href="https://www.rfc-editor.org/rfc/rfc793.txt">RFC 793 Transmission Control Protocol</a></p><p><a href="http://www.rfc-editor.org/rfc/rfc6455.txt">RFC 6455 The WebSocket Protocol</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>demo</title>
      <link href="/demo/index.html"/>
      <url>/demo/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="Toy"><a href="#Toy" class="headerlink" title="Toy"></a>Toy</h1><h2 id="仿CyberPunk2077官网-图片-故障-效果"><a href="#仿CyberPunk2077官网-图片-故障-效果" class="headerlink" title="仿CyberPunk2077官网 图片 故障 效果"></a>仿CyberPunk2077官网 图片 故障 效果</h2><div id="badge-container-sweetink-CyberPunk2077-glitch-effect-4fb1cb1" class="hexo-github" style="width: 350px"></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-sweetink-CyberPunk2077-glitch-effect-4fb1cb1", "sweetink", "CyberPunk2077-glitch-effect", "4fb1cb1", false);</script><p><a href="r/Cyberpunk2077-glitch/" target="_blank">点击访问</a></p><h2 id="仿Google搜索”灭霸”效果"><a href="#仿Google搜索”灭霸”效果" class="headerlink" title="仿Google搜索”灭霸”效果"></a>仿Google搜索”灭霸”效果</h2><div id="badge-container-sweetink-Infinity-Gauntlet-demo-796251d" class="hexo-github" style="width: 350px"></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-sweetink-Infinity-Gauntlet-demo-796251d", "sweetink", "Infinity-Gauntlet-demo", "796251d", false);</script><p><a href="r/Infinity-Gauntlet-demo/index.html" target="_blank">点击访问</a></p><hr>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
